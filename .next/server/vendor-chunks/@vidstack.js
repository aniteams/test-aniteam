"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@vidstack";
exports.ids = ["vendor-chunks/@vidstack"];
exports.modules = {

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack--AIGOV5A.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack--AIGOV5A.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AirPlayButton: () => (/* binding */ AirPlayButton),\n/* harmony export */   Button: () => (/* binding */ Button),\n/* harmony export */   CaptionButton: () => (/* binding */ CaptionButton),\n/* harmony export */   ChapterTitle: () => (/* binding */ ChapterTitle),\n/* harmony export */   Chapters: () => (/* binding */ Chapters),\n/* harmony export */   FullscreenButton: () => (/* binding */ FullscreenButton),\n/* harmony export */   Gesture: () => (/* binding */ Gesture),\n/* harmony export */   Img: () => (/* binding */ Img),\n/* harmony export */   Item: () => (/* binding */ Item$1),\n/* harmony export */   Items: () => (/* binding */ Items),\n/* harmony export */   LiveButton: () => (/* binding */ LiveButton),\n/* harmony export */   MuteButton: () => (/* binding */ MuteButton),\n/* harmony export */   PIPButton: () => (/* binding */ PIPButton),\n/* harmony export */   PlayButton: () => (/* binding */ PlayButton),\n/* harmony export */   Portal: () => (/* binding */ Portal),\n/* harmony export */   Preview: () => (/* binding */ Preview),\n/* harmony export */   Progress: () => (/* binding */ Progress),\n/* harmony export */   Root: () => (/* binding */ Root$3),\n/* harmony export */   Root$1: () => (/* binding */ Root$2),\n/* harmony export */   Root$2: () => (/* binding */ Root),\n/* harmony export */   Root$3: () => (/* binding */ Root$1),\n/* harmony export */   Root$4: () => (/* binding */ Root$4),\n/* harmony export */   Root$5: () => (/* binding */ Root$5),\n/* harmony export */   SeekButton: () => (/* binding */ SeekButton),\n/* harmony export */   Steps: () => (/* binding */ Steps),\n/* harmony export */   Thumb: () => (/* binding */ Thumb),\n/* harmony export */   Thumbnail: () => (/* binding */ Thumbnail),\n/* harmony export */   Time: () => (/* binding */ Time),\n/* harmony export */   Track: () => (/* binding */ Track),\n/* harmony export */   TrackFill: () => (/* binding */ TrackFill),\n/* harmony export */   Value: () => (/* binding */ Value),\n/* harmony export */   appendParamsToURL: () => (/* binding */ appendParamsToURL),\n/* harmony export */   menu: () => (/* binding */ menu),\n/* harmony export */   radioGroup: () => (/* binding */ radioGroup),\n/* harmony export */   slider: () => (/* binding */ slider),\n/* harmony export */   sliderCallbacks: () => (/* binding */ sliderCallbacks),\n/* harmony export */   thumbnail: () => (/* binding */ thumbnail),\n/* harmony export */   timeSlider: () => (/* binding */ timeSlider),\n/* harmony export */   useAudioOptions: () => (/* binding */ useAudioOptions),\n/* harmony export */   useCaptionOptions: () => (/* binding */ useCaptionOptions),\n/* harmony export */   useMediaContext: () => (/* binding */ useMediaContext),\n/* harmony export */   useMediaPlayer: () => (/* binding */ useMediaPlayer),\n/* harmony export */   volumeSlider: () => (/* binding */ volumeSlider)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-D_bWd66h.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js\");\n/* harmony import */ var _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack-DUlCophs.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-DUlCophs.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* __next_internal_client_entry_do_not_use__ AirPlayButton,Button,CaptionButton,ChapterTitle,Chapters,FullscreenButton,Gesture,Img,Item,Items,LiveButton,MuteButton,PIPButton,PlayButton,Portal,Preview,Progress,Root,Root$1,Root$2,Root$3,Root$4,Root$5,SeekButton,Steps,Thumb,Thumbnail,Time,Track,TrackFill,Value,appendParamsToURL,menu,radioGroup,slider,sliderCallbacks,thumbnail,timeSlider,useAudioOptions,useCaptionOptions,useMediaContext,useMediaPlayer,volumeSlider auto */ \n\n\n\nfunction useMediaContext() {\n    return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useReactContext)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.mediaContext);\n}\nconst AirPlayButtonBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.AirPlayButtonInstance, {\n    domEventsRegex: /^onMedia/\n});\nconst AirPlayButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AirPlayButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nAirPlayButton.displayName = \"AirPlayButton\";\nconst PlayButtonBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.PlayButtonInstance, {\n    domEventsRegex: /^onMedia/\n});\nconst PlayButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PlayButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nPlayButton.displayName = \"PlayButton\";\nconst CaptionButtonBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.CaptionButtonInstance, {\n    domEventsRegex: /^onMedia/\n});\nconst CaptionButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CaptionButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nCaptionButton.displayName = \"CaptionButton\";\nconst FullscreenButtonBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.FullscreenButtonInstance, {\n    domEventsRegex: /^onMedia/\n});\nconst FullscreenButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FullscreenButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nFullscreenButton.displayName = \"FullscreenButton\";\nconst MuteButtonBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.MuteButtonInstance, {\n    domEventsRegex: /^onMedia/\n});\nconst MuteButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MuteButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nMuteButton.displayName = \"MuteButton\";\nconst PIPButtonBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.PIPButtonInstance, {\n    domEventsRegex: /^onMedia/\n});\nconst PIPButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PIPButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nPIPButton.displayName = \"PIPButton\";\nconst SeekButtonBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.SeekButtonInstance, {\n    domEventsRegex: /^onMedia/\n});\nconst SeekButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SeekButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nSeekButton.displayName = \"SeekButton\";\nconst LiveButtonBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.LiveButtonInstance, {\n    domEventsRegex: /^onMedia/\n});\nconst LiveButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LiveButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nLiveButton.displayName = \"LiveButton\";\nconst sliderCallbacks = [\n    \"onDragStart\",\n    \"onDragEnd\",\n    \"onDragValueChange\",\n    \"onValueChange\",\n    \"onPointerValueChange\"\n];\nconst SliderValueBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.SliderValueInstance);\nconst SliderBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.SliderInstance, {\n    events: sliderCallbacks\n});\nconst Root$5 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SliderBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2\n        }, children));\n});\nRoot$5.displayName = \"Slider\";\nconst Thumb = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardRef)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n        ...props,\n        ref: forwardRef\n    }));\nThumb.displayName = \"SliderThumb\";\nconst Track = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardRef)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n        ...props,\n        ref: forwardRef\n    }));\nTrack.displayName = \"SliderTrack\";\nconst TrackFill = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardRef)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n        ...props,\n        ref: forwardRef\n    }));\nTrackFill.displayName = \"SliderTrackFill\";\nconst PreviewBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.SliderPreviewInstance);\nconst Preview = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PreviewBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nPreview.displayName = \"SliderPreview\";\nconst Value = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SliderValueBridge, {\n        ...props\n    }, (props2, instance)=>{\n        const $text = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)({\n            \"Value.useSignal[$text]\": ()=>instance.getValueText()\n        }[\"Value.useSignal[$text]\"], instance);\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2,\n            ref: forwardRef\n        }, $text, children);\n    });\n});\nValue.displayName = \"SliderValue\";\nconst Steps = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    const $min = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.useSliderState)(\"min\"), $max = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.useSliderState)(\"max\"), $step = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.useSliderState)(\"step\"), steps = ($max - $min) / $step;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n        ...props,\n        ref: forwardRef\n    }, Array.from({\n        length: Math.floor(steps) + 1\n    }).map((_, step)=>children(step)));\n});\nSteps.displayName = \"SliderSteps\";\nvar slider = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Preview: Preview,\n    Root: Root$5,\n    Steps: Steps,\n    Thumb: Thumb,\n    Track: Track,\n    TrackFill: TrackFill,\n    Value: Value\n});\nconst VolumeSliderBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.VolumeSliderInstance, {\n    events: sliderCallbacks,\n    domEventsRegex: /^onMedia/\n});\nconst Root$4 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(VolumeSliderBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2\n        }, children));\n});\nRoot$4.displayName = \"VolumeSlider\";\nvar volumeSlider = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Preview: Preview,\n    Root: Root$4,\n    Steps: Steps,\n    Thumb: Thumb,\n    Track: Track,\n    TrackFill: TrackFill,\n    Value: Value\n});\nfunction createVTTCue(startTime = 0, endTime = 0, text = \"\") {\n    if (_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.IS_SERVER) {\n        return {\n            startTime,\n            endTime,\n            text,\n            addEventListener: _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.noop,\n            removeEventListener: _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.noop,\n            dispatchEvent: _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.noop\n        };\n    }\n    return new window.VTTCue(startTime, endTime, text);\n}\nfunction appendParamsToURL(baseUrl, params) {\n    const url = new URL(baseUrl);\n    for (const key of Object.keys(params)){\n        url.searchParams.set(key, params[key] + \"\");\n    }\n    return url.toString();\n}\nconst ThumbnailBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.ThumbnailInstance);\nconst Root$3 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThumbnailBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nRoot$3.displayName = \"Thumbnail\";\nconst Img = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    const { src, img, crossOrigin } = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useStateContext)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.ThumbnailInstance.state), $src = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(src), $crossOrigin = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(crossOrigin);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.img, {\n        crossOrigin: $crossOrigin,\n        ...props,\n        src: $src || void 0,\n        ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(img.set, forwardRef)\n    }, children);\n});\nImg.displayName = \"ThumbnailImg\";\nvar thumbnail = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Img: Img,\n    Root: Root$3\n});\nconst TimeSliderContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    $chapters: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.signal)(null)\n});\nTimeSliderContext.displayName = \"TimeSliderContext\";\nconst TimeSliderBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.TimeSliderInstance, {\n    events: sliderCallbacks,\n    domEventsRegex: /^onMedia/\n});\nconst Root$2 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    const $chapters = react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"Root$2.useMemo[$chapters]\": ()=>(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.signal)(null)\n    }[\"Root$2.useMemo[$chapters]\"], []);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TimeSliderContext.Provider, {\n        value: {\n            $chapters\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TimeSliderBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2\n        }, children)));\n});\nRoot$2.displayName = \"TimeSlider\";\nconst SliderChaptersBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.SliderChaptersInstance);\nconst Chapters = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SliderChaptersBridge, {\n        ...props\n    }, (props2, instance)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChapterTracks, {\n            instance\n        }, children)));\n});\nChapters.displayName = \"SliderChapters\";\nfunction ChapterTracks({ instance, children }) {\n    const $cues = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)({\n        \"ChapterTracks.useSignal[$cues]\": ()=>instance.cues\n    }[\"ChapterTracks.useSignal[$cues]\"], instance), refs = react__WEBPACK_IMPORTED_MODULE_0__.useRef([]), emptyCue = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), { $chapters } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(TimeSliderContext);\n    if (!emptyCue.current) {\n        emptyCue.current = createVTTCue();\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"ChapterTracks.useEffect\": ()=>{\n            $chapters.set(instance);\n            return ({\n                \"ChapterTracks.useEffect\": ()=>void $chapters.set(null)\n            })[\"ChapterTracks.useEffect\"];\n        }\n    }[\"ChapterTracks.useEffect\"], [\n        instance\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"ChapterTracks.useEffect\": ()=>{\n            instance.setRefs(refs.current);\n        }\n    }[\"ChapterTracks.useEffect\"], [\n        $cues\n    ]);\n    return children($cues.length ? $cues : [\n        emptyCue.current\n    ], (el)=>{\n        if (!el) {\n            refs.current.length = 0;\n            return;\n        }\n        refs.current.push(el);\n    });\n}\nChapterTracks.displayName = \"SliderChapterTracks\";\nconst ChapterTitle = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    const { $chapters } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(TimeSliderContext), [title, setTitle] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"ChapterTitle.useEffect\": ()=>{\n            return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.effect)({\n                \"ChapterTitle.useEffect\": ()=>{\n                    const chapters = $chapters(), cue = chapters?.activePointerCue || chapters?.activeCue;\n                    setTitle(cue?.text || \"\");\n                }\n            }[\"ChapterTitle.useEffect\"]);\n        }\n    }[\"ChapterTitle.useEffect\"], []);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n        ...props,\n        ref: forwardRef\n    }, title, children);\n});\nChapterTitle.displayName = \"SliderChapterTitle\";\nconst Progress = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardRef)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n        ...props,\n        ref: forwardRef\n    }));\nProgress.displayName = \"SliderProgress\";\nconst SliderThumbnailBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.SliderThumbnailInstance);\nconst ThumbnailRoot = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SliderThumbnailBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nThumbnailRoot.displayName = \"SliderThumbnail\";\nconst Thumbnail = {\n    Root: ThumbnailRoot,\n    Img: Img\n};\nconst VideoBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.SliderVideoInstance, {\n    events: [\n        \"onCanPlay\",\n        \"onError\"\n    ]\n});\nconst Video = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(VideoBridge, {\n        ...props\n    }, (props2, instance)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(VideoProvider, {\n            ...props2,\n            instance,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nVideo.displayName = \"SliderVideo\";\nconst VideoProvider = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ instance, children, ...props }, forwardRef)=>{\n    const { canLoad } = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useStateContext)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.mediaState), { src, video, crossOrigin } = instance.$state, $src = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(src), $canLoad = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(canLoad), $crossOrigin = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(crossOrigin);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.video, {\n        style: {\n            maxWidth: \"unset\"\n        },\n        ...props,\n        src: $src || void 0,\n        muted: true,\n        playsInline: true,\n        preload: $canLoad ? \"auto\" : \"none\",\n        crossOrigin: $crossOrigin || void 0,\n        ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(video.set, forwardRef)\n    }, children);\n});\nVideoProvider.displayName = \"SliderVideoProvider\";\nvar timeSlider = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    ChapterTitle: ChapterTitle,\n    Chapters: Chapters,\n    Preview: Preview,\n    Progress: Progress,\n    Root: Root$2,\n    Steps: Steps,\n    Thumb: Thumb,\n    Thumbnail: Thumbnail,\n    Track: Track,\n    TrackFill: TrackFill,\n    Value: Value,\n    Video: Video\n});\nconst RadioGroupBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.RadioGroupInstance, {\n    events: [\n        \"onChange\"\n    ]\n});\nconst Root$1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RadioGroupBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2\n        }, children));\n});\nRoot$1.displayName = \"RadioGroup\";\nconst ItemBridge$1 = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.RadioInstance, {\n    events: [\n        \"onChange\",\n        \"onSelect\"\n    ]\n});\nconst Item$1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ItemBridge$1, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nItem$1.displayName = \"RadioItem\";\nvar radioGroup = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Item: Item$1,\n    Root: Root$1\n});\nconst MenuBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.MenuInstance, {\n    events: [\n        \"onOpen\",\n        \"onClose\"\n    ],\n    domEventsRegex: /^onMedia/\n});\nconst Root = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MenuBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2, instance)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2,\n            style: {\n                display: !instance.isSubmenu ? \"contents\" : void 0,\n                ...props2.style\n            }\n        }, children));\n});\nRoot.displayName = \"Menu\";\nconst ButtonBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.MenuButtonInstance, {\n    events: [\n        \"onSelect\"\n    ]\n});\nconst Button = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nButton.displayName = \"MenuButton\";\nconst Portal = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ container = null, disabled = false, children, ...props }, forwardRef)=>{\n    let fullscreen = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.useMediaState)(\"fullscreen\"), shouldPortal = disabled === \"fullscreen\" ? !fullscreen : !disabled;\n    const target = react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"Portal.useMemo[target]\": ()=>{\n            if (_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.IS_SERVER) return null;\n            const node = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.isString)(container) ? document.querySelector(container) : container;\n            return node ?? document.body;\n        }\n    }[\"Portal.useMemo[target]\"], [\n        container\n    ]);\n    return !target || !shouldPortal ? children : /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n        ...props,\n        style: {\n            display: \"contents\",\n            ...props.style\n        },\n        ref: forwardRef\n    }, children), target);\n});\nPortal.displayName = \"MenuPortal\";\nconst ItemsBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.MenuItemsInstance);\nconst Items = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ItemsBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nItems.displayName = \"MenuItems\";\nconst ItemBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.MenuItemInstance);\nconst Item = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ItemBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nItem.displayName = \"MenuItem\";\nvar menu = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Button: Button,\n    Content: Items,\n    Item: Item,\n    Items: Items,\n    Portal: Portal,\n    Radio: Item$1,\n    RadioGroup: Root$1,\n    Root: Root\n});\nconst GestureBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.GestureInstance, {\n    events: [\n        \"onWillTrigger\",\n        \"onTrigger\"\n    ]\n});\nconst Gesture = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(GestureBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n            ...props2\n        }, children));\n});\nGesture.displayName = \"Gesture\";\nconst TimeBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.TimeInstance);\nconst Time = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TimeBridge, {\n        ...props\n    }, (props2, instance)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TimeText, {\n            ...props2,\n            instance,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nTime.displayName = \"Time\";\nconst TimeText = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ instance, children, ...props }, forwardRef)=>{\n    const { timeText } = instance.$state, $timeText = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(timeText);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.Primitive.div, {\n        ...props,\n        ref: forwardRef\n    }, $timeText, children);\n});\nTimeText.displayName = \"TimeText\";\nfunction useMediaPlayer() {\n    const context = useMediaContext();\n    if (!context) {\n        throw Error(\"[vidstack] no media context was found - was this called outside of `<MediaPlayer>`?\");\n    }\n    return context?.player || null;\n}\nfunction useAudioOptions() {\n    const media = useMediaContext(), { audioTracks, audioTrack } = media.$state, $audioTracks = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(audioTracks);\n    (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(audioTrack);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"useAudioOptions.useMemo\": ()=>{\n            const options = $audioTracks.map({\n                \"useAudioOptions.useMemo.options\": (track)=>({\n                        track,\n                        label: track.label,\n                        value: getTrackValue$1(track),\n                        get selected () {\n                            return audioTrack() === track;\n                        },\n                        select (trigger) {\n                            const index = audioTracks().indexOf(track);\n                            if (index >= 0) media.remote.changeAudioTrack(index, trigger);\n                        }\n                    })\n            }[\"useAudioOptions.useMemo.options\"]);\n            Object.defineProperty(options, \"disabled\", {\n                get () {\n                    return options.length <= 1;\n                }\n            });\n            Object.defineProperty(options, \"selectedTrack\", {\n                get () {\n                    return audioTrack();\n                }\n            });\n            Object.defineProperty(options, \"selectedValue\", {\n                get () {\n                    const track = audioTrack();\n                    return track ? getTrackValue$1(track) : void 0;\n                }\n            });\n            return options;\n        }\n    }[\"useAudioOptions.useMemo\"], [\n        $audioTracks\n    ]);\n}\nfunction getTrackValue$1(track) {\n    return track.label.toLowerCase();\n}\nfunction useCaptionOptions({ off = true } = {}) {\n    const media = useMediaContext(), { textTracks, textTrack } = media.$state, $textTracks = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(textTracks);\n    (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(textTrack);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"useCaptionOptions.useMemo\": ()=>{\n            const captionTracks = $textTracks.filter(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.isTrackCaptionKind), options = captionTracks.map({\n                \"useCaptionOptions.useMemo.options\": (track)=>({\n                        track,\n                        label: track.label,\n                        value: getTrackValue(track),\n                        get selected () {\n                            return textTrack() === track;\n                        },\n                        select (trigger) {\n                            const index = textTracks().indexOf(track);\n                            if (index >= 0) media.remote.changeTextTrackMode(index, \"showing\", trigger);\n                        }\n                    })\n            }[\"useCaptionOptions.useMemo.options\"]);\n            if (off) {\n                options.unshift({\n                    track: null,\n                    label: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.isString)(off) ? off : \"Off\",\n                    value: \"off\",\n                    get selected () {\n                        return !textTrack();\n                    },\n                    select (trigger) {\n                        media.remote.toggleCaptions(trigger);\n                    }\n                });\n            }\n            Object.defineProperty(options, \"disabled\", {\n                get () {\n                    return !captionTracks.length;\n                }\n            });\n            Object.defineProperty(options, \"selectedTrack\", {\n                get () {\n                    return textTrack();\n                }\n            });\n            Object.defineProperty(options, \"selectedValue\", {\n                get () {\n                    const track = textTrack();\n                    return track ? getTrackValue(track) : \"off\";\n                }\n            });\n            return options;\n        }\n    }[\"useCaptionOptions.useMemo\"], [\n        $textTracks\n    ]);\n}\nfunction getTrackValue(track) {\n    return track.id + \":\" + track.kind + \"-\" + track.label.toLowerCase();\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack--AIGOV5A.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3ZPG_odG.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-3ZPG_odG.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HLSProvider: () => (/* binding */ HLSProvider)\n/* harmony export */ });\n/* harmony import */ var _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-D_bWd66h.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js\");\n/* harmony import */ var _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-DUlCophs.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-DUlCophs.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ HLSProvider auto */ \n\n\n\nconst toDOMEventType = (type)=>(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.camelToKebabCase)(type);\nclass HLSController {\n    #video;\n    #ctx;\n    #instance;\n    #stopLiveSync;\n    #callbacks;\n    get instance() {\n        return this.#instance;\n    }\n    constructor(video, ctx){\n        this.#instance = null;\n        this.#stopLiveSync = null;\n        this.config = {};\n        this.#callbacks = /* @__PURE__ */ new Set();\n        this.#video = video;\n        this.#ctx = ctx;\n    }\n    setup(ctor) {\n        const { streamType } = this.#ctx.$state;\n        const isLive = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(streamType).includes(\"live\"), isLiveLowLatency = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(streamType).includes(\"ll-\");\n        this.#instance = new ctor({\n            lowLatencyMode: isLiveLowLatency,\n            backBufferLength: isLiveLowLatency ? 4 : isLive ? 8 : void 0,\n            renderTextTracksNatively: false,\n            ...this.config\n        });\n        const dispatcher = this.#dispatchHLSEvent.bind(this);\n        for (const event of Object.values(ctor.Events))this.#instance.on(event, dispatcher);\n        this.#instance.on(ctor.Events.ERROR, this.#onError.bind(this));\n        for (const callback of this.#callbacks)callback(this.#instance);\n        this.#ctx.player.dispatch(\"hls-instance\", {\n            detail: this.#instance\n        });\n        this.#instance.attachMedia(this.#video);\n        this.#instance.on(ctor.Events.AUDIO_TRACK_SWITCHED, this.#onAudioSwitch.bind(this));\n        this.#instance.on(ctor.Events.LEVEL_SWITCHED, this.#onLevelSwitched.bind(this));\n        this.#instance.on(ctor.Events.LEVEL_LOADED, this.#onLevelLoaded.bind(this));\n        this.#instance.on(ctor.Events.LEVEL_UPDATED, this.#onLevelUpdated.bind(this));\n        this.#instance.on(ctor.Events.NON_NATIVE_TEXT_TRACKS_FOUND, this.#onTracksFound.bind(this));\n        this.#instance.on(ctor.Events.CUES_PARSED, this.#onCuesParsed.bind(this));\n        this.#ctx.qualities[_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.QualitySymbol.enableAuto] = this.#enableAutoQuality.bind(this);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this.#ctx.qualities, \"change\", this.#onUserQualityChange.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this.#ctx.audioTracks, \"change\", this.#onUserAudioChange.bind(this));\n        this.#stopLiveSync = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#liveSync.bind(this));\n    }\n    #createDOMEvent(type, data) {\n        return new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(toDOMEventType(type), {\n            detail: data\n        });\n    }\n    #liveSync() {\n        if (!this.#ctx.$state.live()) return;\n        const raf = new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.RAFLoop(this.#liveSyncPosition.bind(this));\n        raf.start();\n        return raf.stop.bind(raf);\n    }\n    #liveSyncPosition() {\n        this.#ctx.$state.liveSyncPosition.set(this.#instance?.liveSyncPosition ?? Infinity);\n    }\n    #dispatchHLSEvent(type, data) {\n        this.#ctx.player?.dispatch(this.#createDOMEvent(type, data));\n    }\n    #onTracksFound(eventType, data) {\n        const event = this.#createDOMEvent(eventType, data);\n        let currentTrack = -1;\n        for(let i = 0; i < data.tracks.length; i++){\n            const nonNativeTrack = data.tracks[i], init = nonNativeTrack.subtitleTrack ?? nonNativeTrack.closedCaptions, track = new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.TextTrack({\n                id: `hls-${nonNativeTrack.kind}-${i}`,\n                src: init?.url,\n                label: nonNativeTrack.label,\n                language: init?.lang,\n                kind: nonNativeTrack.kind,\n                default: nonNativeTrack.default\n            });\n            track[_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.TextTrackSymbol.readyState] = 2;\n            track[_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.TextTrackSymbol.onModeChange] = ()=>{\n                if (track.mode === \"showing\") {\n                    this.#instance.subtitleTrack = i;\n                    currentTrack = i;\n                } else if (currentTrack === i) {\n                    this.#instance.subtitleTrack = -1;\n                    currentTrack = -1;\n                }\n            };\n            this.#ctx.textTracks.add(track, event);\n        }\n    }\n    #onCuesParsed(eventType, data) {\n        const index = this.#instance?.subtitleTrack, track = this.#ctx.textTracks.getById(`hls-${data.type}-${index}`);\n        if (!track) return;\n        const event = this.#createDOMEvent(eventType, data);\n        for (const cue of data.cues){\n            cue.positionAlign = \"auto\";\n            track.addCue(cue, event);\n        }\n    }\n    #onAudioSwitch(eventType, data) {\n        const track = this.#ctx.audioTracks[data.id];\n        if (track) {\n            const trigger = this.#createDOMEvent(eventType, data);\n            this.#ctx.audioTracks[_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.ListSymbol.select](track, true, trigger);\n        }\n    }\n    #onLevelSwitched(eventType, data) {\n        const quality = this.#ctx.qualities[data.level];\n        if (quality) {\n            const trigger = this.#createDOMEvent(eventType, data);\n            this.#ctx.qualities[_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.ListSymbol.select](quality, true, trigger);\n        }\n    }\n    #onLevelUpdated(eventType, data) {\n        if (data.details.totalduration > 0) {\n            this.#ctx.$state.inferredLiveDVRWindow.set(data.details.totalduration);\n        }\n    }\n    #onLevelLoaded(eventType, data) {\n        if (this.#ctx.$state.canPlay()) return;\n        const { type, live, totalduration: duration, targetduration } = data.details, trigger = this.#createDOMEvent(eventType, data);\n        this.#ctx.notify(\"stream-type-change\", live ? type === \"EVENT\" && Number.isFinite(duration) && targetduration >= 10 ? \"live:dvr\" : \"live\" : \"on-demand\", trigger);\n        this.#ctx.notify(\"duration-change\", duration, trigger);\n        const media = this.#instance.media;\n        if (this.#instance.currentLevel === -1) {\n            this.#ctx.qualities[_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.QualitySymbol.setAuto](true, trigger);\n        }\n        for (const remoteTrack of this.#instance.audioTracks){\n            const localTrack = {\n                id: remoteTrack.id.toString(),\n                label: remoteTrack.name,\n                language: remoteTrack.lang || \"\",\n                kind: \"main\"\n            };\n            this.#ctx.audioTracks[_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.ListSymbol.add](localTrack, trigger);\n        }\n        for (const level of this.#instance.levels){\n            const videoQuality = {\n                id: level.id?.toString() ?? level.height + \"p\",\n                width: level.width,\n                height: level.height,\n                codec: level.codecSet,\n                bitrate: level.bitrate\n            };\n            this.#ctx.qualities[_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.ListSymbol.add](videoQuality, trigger);\n        }\n        media.dispatchEvent(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"canplay\", {\n            trigger\n        }));\n    }\n    #onError(eventType, data) {\n        {\n            this.#ctx.logger?.errorGroup(`[vidstack] HLS error \\`${eventType}\\``).labelledLog(\"Media Element\", this.#instance?.media).labelledLog(\"HLS Instance\", this.#instance).labelledLog(\"Event Type\", eventType).labelledLog(\"Data\", data).labelledLog(\"Src\", (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#ctx.$state.source)).labelledLog(\"Media Store\", {\n                ...this.#ctx.$state\n            }).dispatch();\n        }\n        if (data.fatal) {\n            switch(data.type){\n                case \"mediaError\":\n                    this.#instance?.recoverMediaError();\n                    break;\n                default:\n                    this.#onFatalError(data.error);\n                    break;\n            }\n        }\n    }\n    #onFatalError(error) {\n        this.#ctx.notify(\"error\", {\n            message: error.message,\n            code: 1,\n            error\n        });\n    }\n    #enableAutoQuality() {\n        if (this.#instance) this.#instance.currentLevel = -1;\n    }\n    #onUserQualityChange() {\n        const { qualities } = this.#ctx;\n        if (!this.#instance || qualities.auto) return;\n        this.#instance[qualities.switch + \"Level\"] = qualities.selectedIndex;\n        if (_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.IS_CHROME) {\n            this.#video.currentTime = this.#video.currentTime;\n        }\n    }\n    #onUserAudioChange() {\n        const { audioTracks } = this.#ctx;\n        if (this.#instance && this.#instance.audioTrack !== audioTracks.selectedIndex) {\n            this.#instance.audioTrack = audioTracks.selectedIndex;\n        }\n    }\n    onInstance(callback) {\n        this.#callbacks.add(callback);\n        return ()=>this.#callbacks.delete(callback);\n    }\n    loadSource(src) {\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src)) return;\n        this.#instance?.loadSource(src.src);\n    }\n    destroy() {\n        this.#instance?.destroy();\n        this.#instance = null;\n        this.#stopLiveSync?.();\n        this.#stopLiveSync = null;\n        this.#ctx?.logger?.info(\"\\uD83C\\uDFD7️ Destroyed HLS instance\");\n    }\n}\nclass HLSLibLoader {\n    #lib;\n    #ctx;\n    #callback;\n    constructor(lib, ctx, callback){\n        this.#lib = lib;\n        this.#ctx = ctx;\n        this.#callback = callback;\n        this.#startLoading();\n    }\n    async #startLoading() {\n        this.#ctx.logger?.info(\"\\uD83C\\uDFD7️ Loading HLS Library\");\n        const callbacks = {\n            onLoadStart: this.#onLoadStart.bind(this),\n            onLoaded: this.#onLoaded.bind(this),\n            onLoadError: this.#onLoadError.bind(this)\n        };\n        let ctor = await loadHLSScript(this.#lib, callbacks);\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(ctor) && !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(this.#lib)) ctor = await importHLS(this.#lib, callbacks);\n        if (!ctor) return null;\n        if (!ctor.isSupported()) {\n            const message = \"[vidstack] `hls.js` is not supported in this environment\";\n            this.#ctx.logger?.error(message);\n            this.#ctx.player.dispatch(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"hls-unsupported\"));\n            this.#ctx.notify(\"error\", {\n                message,\n                code: 4\n            });\n            return null;\n        }\n        return ctor;\n    }\n    #onLoadStart() {\n        {\n            this.#ctx.logger?.infoGroup(\"Starting to load `hls.js`\").labelledLog(\"URL\", this.#lib).dispatch();\n        }\n        this.#ctx.player.dispatch(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"hls-lib-load-start\"));\n    }\n    #onLoaded(ctor) {\n        {\n            this.#ctx.logger?.infoGroup(\"Loaded `hls.js`\").labelledLog(\"Library\", this.#lib).labelledLog(\"Constructor\", ctor).dispatch();\n        }\n        this.#ctx.player.dispatch(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"hls-lib-loaded\", {\n            detail: ctor\n        }));\n        this.#callback(ctor);\n    }\n    #onLoadError(e) {\n        const error = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.coerceToError)(e);\n        {\n            this.#ctx.logger?.errorGroup(\"[vidstack] Failed to load `hls.js`\").labelledLog(\"Library\", this.#lib).labelledLog(\"Error\", e).dispatch();\n        }\n        this.#ctx.player.dispatch(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"hls-lib-load-error\", {\n            detail: error\n        }));\n        this.#ctx.notify(\"error\", {\n            message: error.message,\n            code: 4,\n            error\n        });\n    }\n}\nasync function importHLS(loader, callbacks = {}) {\n    if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(loader)) return void 0;\n    callbacks.onLoadStart?.();\n    if (loader.prototype && loader.prototype !== Function) {\n        callbacks.onLoaded?.(loader);\n        return loader;\n    }\n    try {\n        const ctor = (await loader())?.default;\n        if (ctor && !!ctor.isSupported) {\n            callbacks.onLoaded?.(ctor);\n        } else {\n            throw Error( true ? \"[vidstack] failed importing `hls.js`. Dynamic import returned invalid constructor.\" : 0);\n        }\n        return ctor;\n    } catch (err) {\n        callbacks.onLoadError?.(err);\n    }\n    return void 0;\n}\nasync function loadHLSScript(src, callbacks = {}) {\n    if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src)) return void 0;\n    callbacks.onLoadStart?.();\n    try {\n        await (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.loadScript)(src);\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(window.Hls)) {\n            throw Error( true ? \"[vidstack] failed loading `hls.js`. Could not find a valid `Hls` constructor on window\" : 0);\n        }\n        const ctor = window.Hls;\n        callbacks.onLoaded?.(ctor);\n        return ctor;\n    } catch (err) {\n        callbacks.onLoadError?.(err);\n    }\n    return void 0;\n}\nconst JS_DELIVR_CDN = \"https://cdn.jsdelivr.net\";\nclass HLSProvider extends _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.VideoProvider {\n    #ctor;\n    #controller;\n    /**\n   * The `hls.js` constructor.\n   */ get ctor() {\n        return this.#ctor;\n    }\n    /**\n   * The current `hls.js` instance.\n   */ get instance() {\n        return this.#controller.instance;\n    }\n    static{\n        /**\n   * Whether `hls.js` is supported in this environment.\n   */ this.supported = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.isHLSSupported)();\n    }\n    get type() {\n        return \"hls\";\n    }\n    get canLiveSync() {\n        return true;\n    }\n    #library;\n    /**\n   * The `hls.js` configuration object.\n   *\n   * @see {@link https://github.com/video-dev/hls.js/blob/master/docs/API.md#fine-tuning}\n   */ get config() {\n        return this.#controller.config;\n    }\n    set config(config) {\n        this.#controller.config = config;\n    }\n    /**\n   * The `hls.js` constructor (supports dynamic imports) or a URL of where it can be found.\n   *\n   * @defaultValue `https://cdn.jsdelivr.net/npm/hls.js@^1.0.0/dist/hls.min.js`\n   */ get library() {\n        return this.#library;\n    }\n    set library(library) {\n        this.#library = library;\n    }\n    preconnect() {\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(this.#library)) return;\n        (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.preconnect)(this.#library);\n    }\n    setup() {\n        super.setup();\n        new HLSLibLoader(this.#library, this.ctx, (ctor)=>{\n            this.#ctor = ctor;\n            this.#controller.setup(ctor);\n            this.ctx.notify(\"provider-setup\", this);\n            const src = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.ctx.$state.source);\n            if (src) this.loadSource(src);\n        });\n    }\n    async loadSource(src, preload) {\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src)) {\n            this.removeSource();\n            return;\n        }\n        this.media.preload = preload || \"\";\n        this.appendSource(src, \"application/x-mpegurl\");\n        this.#controller.loadSource(src);\n        this.currentSrc = src;\n    }\n    /**\n   * The given callback is invoked when a new `hls.js` instance is created and right before it's\n   * attached to media.\n   */ onInstance(callback) {\n        const instance = this.#controller.instance;\n        if (instance) callback(instance);\n        return this.#controller.onInstance(callback);\n    }\n    destroy() {\n        this.#controller.destroy();\n    }\n    constructor(...args){\n        super(...args), this.$$PROVIDER_TYPE = \"HLS\", this.#ctor = null, this.#controller = new HLSController(this.video, this.ctx), this.#library = `${JS_DELIVR_CDN}/npm/hls.js@^1.5.0/dist/hls${\".js\"}`;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3ZPG_odG.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BIA_pmri.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-BIA_pmri.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultAudioLayout: () => (/* binding */ DefaultAudioLayout),\n/* harmony export */   DefaultBufferingIndicator: () => (/* binding */ DefaultBufferingIndicator),\n/* harmony export */   DefaultKeyboardDisplay: () => (/* binding */ DefaultKeyboardDisplay),\n/* harmony export */   DefaultLayoutContext: () => (/* binding */ DefaultLayoutContext),\n/* harmony export */   DefaultMenuButton: () => (/* binding */ DefaultMenuButton),\n/* harmony export */   DefaultMenuCheckbox: () => (/* binding */ DefaultMenuCheckbox),\n/* harmony export */   DefaultMenuItem: () => (/* binding */ DefaultMenuItem),\n/* harmony export */   DefaultMenuRadioGroup: () => (/* binding */ DefaultMenuRadioGroup),\n/* harmony export */   DefaultMenuSection: () => (/* binding */ DefaultMenuSection),\n/* harmony export */   DefaultMenuSliderItem: () => (/* binding */ DefaultMenuSliderItem),\n/* harmony export */   DefaultSliderParts: () => (/* binding */ DefaultSliderParts),\n/* harmony export */   DefaultSliderSteps: () => (/* binding */ DefaultSliderSteps),\n/* harmony export */   DefaultTooltip: () => (/* binding */ DefaultTooltip),\n/* harmony export */   DefaultVideoGestures: () => (/* binding */ DefaultVideoGestures),\n/* harmony export */   DefaultVideoLargeLayout: () => (/* binding */ DefaultVideoLargeLayout),\n/* harmony export */   DefaultVideoLayout: () => (/* binding */ DefaultVideoLayout),\n/* harmony export */   DefaultVideoSmallLayout: () => (/* binding */ DefaultVideoSmallLayout),\n/* harmony export */   createRadioOptions: () => (/* binding */ createRadioOptions),\n/* harmony export */   i18n: () => (/* binding */ i18n),\n/* harmony export */   useDefaultLayoutContext: () => (/* binding */ useDefaultLayoutContext),\n/* harmony export */   useDefaultLayoutWord: () => (/* binding */ useDefaultLayoutWord)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./vidstack-D_bWd66h.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js\");\n/* harmony import */ var _vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./vidstack-GeL5yun1.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-GeL5yun1.js\");\n/* harmony import */ var _vidstack_BPOD0tS4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-BPOD0tS4.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BPOD0tS4.js\");\n/* harmony import */ var _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack--AIGOV5A.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack--AIGOV5A.js\");\n/* harmony import */ var _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./vidstack-DUlCophs.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-DUlCophs.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var _vidstack_D_hQD1eE_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./vidstack-D-hQD1eE.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D-hQD1eE.js\");\n/* __next_internal_client_entry_do_not_use__ DefaultAudioLayout,DefaultBufferingIndicator,DefaultKeyboardDisplay,DefaultLayoutContext,DefaultMenuButton,DefaultMenuCheckbox,DefaultMenuItem,DefaultMenuRadioGroup,DefaultMenuSection,DefaultMenuSliderItem,DefaultSliderParts,DefaultSliderSteps,DefaultTooltip,DefaultVideoGestures,DefaultVideoLargeLayout,DefaultVideoLayout,DefaultVideoSmallLayout,createRadioOptions,i18n,useDefaultLayoutContext,useDefaultLayoutWord auto */ \n\n\n\n\n\n\n\nconst DefaultLayoutContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({});\nDefaultLayoutContext.displayName = \"DefaultLayoutContext\";\nfunction useDefaultLayoutContext() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(DefaultLayoutContext);\n}\nfunction useDefaultLayoutWord(word) {\n    const { translations } = useDefaultLayoutContext();\n    return i18n(translations, word);\n}\nfunction i18n(translations, word) {\n    return translations?.[word] ?? word;\n}\nfunction useColorSchemeClass(colorScheme) {\n    const systemColorPreference = (0,_vidstack_BPOD0tS4_js__WEBPACK_IMPORTED_MODULE_2__.useColorSchemePreference)();\n    if (colorScheme === \"default\") {\n        return null;\n    } else if (colorScheme === \"system\") {\n        return systemColorPreference;\n    } else {\n        return colorScheme;\n    }\n}\nfunction createDefaultMediaLayout({ type, smLayoutWhen, renderLayout }) {\n    const Layout = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, className, disableTimeSlider = false, hideQualityBitrate = false, icons, colorScheme = \"system\", download = null, menuContainer = null, menuGroup = \"bottom\", noAudioGain = false, audioGains = {\n        min: 0,\n        max: 300,\n        step: 25\n    }, noGestures = false, noKeyboardAnimations = false, noModal = false, noScrubGesture, playbackRates = {\n        min: 0,\n        max: 2,\n        step: 0.25\n    }, seekStep = 10, showMenuDelay, showTooltipDelay = 700, sliderChaptersMinWidth = 325, slots, smallLayoutWhen = smLayoutWhen, thumbnails = null, translations, ...props }, forwardRef)=>{\n        const media = (0,_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.useMediaContext)(), $load = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)(media.$props.load), $canLoad = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"canLoad\"), $viewType = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"viewType\"), $streamType = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"streamType\"), $smallWhen = (0,_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.createComputed)(()=>{\n            return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.isBoolean)(smallLayoutWhen) ? smallLayoutWhen : smallLayoutWhen(media.player.state);\n        }, [\n            smallLayoutWhen\n        ]), userPrefersAnnouncements = (0,_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.createSignal)(true), userPrefersKeyboardAnimations = (0,_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.createSignal)(true), isMatch = $viewType === type, isSmallLayout = $smallWhen(), isForcedLayout = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.isBoolean)(smallLayoutWhen), isLoadLayout = $load === \"play\" && !$canLoad, canRender = $canLoad || isForcedLayout || isLoadLayout, colorSchemeClass = useColorSchemeClass(colorScheme), layoutEl = (0,_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.createSignal)(null);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)($smallWhen);\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ...props,\n            className: `vds-${type}-layout` + (colorSchemeClass ? ` ${colorSchemeClass}` : \"\") + (className ? ` ${className}` : \"\"),\n            \"data-match\": isMatch ? \"\" : null,\n            \"data-sm\": isSmallLayout ? \"\" : null,\n            \"data-lg\": !isSmallLayout ? \"\" : null,\n            \"data-size\": isSmallLayout ? \"sm\" : \"lg\",\n            \"data-no-scrub-gesture\": noScrubGesture ? \"\" : null,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.composeRefs)(layoutEl.set, forwardRef)\n        }, canRender && isMatch ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultLayoutContext.Provider, {\n            value: {\n                disableTimeSlider,\n                hideQualityBitrate,\n                icons,\n                colorScheme,\n                download,\n                isSmallLayout,\n                menuContainer,\n                menuGroup,\n                noAudioGain,\n                audioGains,\n                layoutEl,\n                noGestures,\n                noKeyboardAnimations,\n                noModal,\n                noScrubGesture,\n                showMenuDelay,\n                showTooltipDelay,\n                sliderChaptersMinWidth,\n                slots,\n                seekStep,\n                playbackRates,\n                thumbnails,\n                translations,\n                userPrefersAnnouncements,\n                userPrefersKeyboardAnimations\n            }\n        }, renderLayout({\n            streamType: $streamType,\n            isSmallLayout,\n            isLoadLayout\n        }), children) : null);\n    });\n    Layout.displayName = \"DefaultMediaLayout\";\n    return Layout;\n}\nfunction useDefaultAudioLayoutSlots() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(DefaultLayoutContext).slots;\n}\nfunction useDefaultVideoLayoutSlots() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(DefaultLayoutContext).slots;\n}\nfunction slot(slots, name, defaultValue) {\n    const slot2 = slots?.[name], capitalizedName = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.uppercaseFirstChar)(name);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, slots?.[`before${capitalizedName}`], (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.isUndefined)(slot2) ? defaultValue : slot2, slots?.[`after${capitalizedName}`]);\n}\nfunction DefaultAnnouncer() {\n    const { userPrefersAnnouncements, translations } = useDefaultLayoutContext(), $userPrefersAnnouncements = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)(userPrefersAnnouncements);\n    if (!$userPrefersAnnouncements) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.MediaAnnouncer, {\n        translations\n    });\n}\nDefaultAnnouncer.displayName = \"DefaultAnnouncer\";\nfunction DefaultTooltip({ content, placement, children }) {\n    const { showTooltipDelay } = useDefaultLayoutContext();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Root, {\n        showDelay: showTooltipDelay\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Trigger, {\n        asChild: true\n    }, children), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Content, {\n        className: \"vds-tooltip-content\",\n        placement\n    }, content));\n}\nDefaultTooltip.displayName = \"DefaultTooltip\";\nfunction DefaultPlayButton({ tooltip }) {\n    const { icons: Icons } = useDefaultLayoutContext(), playText = useDefaultLayoutWord(\"Play\"), pauseText = useDefaultLayoutWord(\"Pause\"), $paused = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"paused\"), $ended = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"ended\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: $paused ? playText : pauseText,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.PlayButton, {\n        className: \"vds-play-button vds-button\",\n        \"aria-label\": playText\n    }, $ended ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.PlayButton.Replay, {\n        className: \"vds-icon\"\n    }) : $paused ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.PlayButton.Play, {\n        className: \"vds-icon\"\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.PlayButton.Pause, {\n        className: \"vds-icon\"\n    })));\n}\nDefaultPlayButton.displayName = \"DefaultPlayButton\";\nconst DefaultMuteButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ tooltip }, forwardRef)=>{\n    const { icons: Icons } = useDefaultLayoutContext(), muteText = useDefaultLayoutWord(\"Mute\"), unmuteText = useDefaultLayoutWord(\"Unmute\"), $muted = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"muted\"), $volume = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"volume\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: $muted ? unmuteText : muteText,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.MuteButton, {\n        className: \"vds-mute-button vds-button\",\n        \"aria-label\": muteText,\n        ref: forwardRef\n    }, $muted || $volume == 0 ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.MuteButton.Mute, {\n        className: \"vds-icon\"\n    }) : $volume < 0.5 ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.MuteButton.VolumeLow, {\n        className: \"vds-icon\"\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.MuteButton.VolumeHigh, {\n        className: \"vds-icon\"\n    })));\n});\nDefaultMuteButton.displayName = \"DefaultMuteButton\";\nfunction DefaultCaptionButton({ tooltip }) {\n    const { icons: Icons } = useDefaultLayoutContext(), captionsText = useDefaultLayoutWord(\"Captions\"), onText = useDefaultLayoutWord(\"Closed-Captions On\"), offText = useDefaultLayoutWord(\"Closed-Captions Off\"), $track = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"textTrack\"), isOn = $track && (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.isTrackCaptionKind)($track);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: isOn ? onText : offText,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.CaptionButton, {\n        className: \"vds-caption-button vds-button\",\n        \"aria-label\": captionsText\n    }, isOn ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.CaptionButton.On, {\n        className: \"vds-icon\"\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.CaptionButton.Off, {\n        className: \"vds-icon\"\n    })));\n}\nDefaultCaptionButton.displayName = \"DefaultCaptionButton\";\nfunction DefaultPIPButton({ tooltip }) {\n    const { icons: Icons } = useDefaultLayoutContext(), pipText = useDefaultLayoutWord(\"PiP\"), enterText = useDefaultLayoutWord(\"Enter PiP\"), exitText = useDefaultLayoutWord(\"Exit PiP\"), $pip = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"pictureInPicture\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: $pip ? exitText : enterText,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.PIPButton, {\n        className: \"vds-pip-button vds-button\",\n        \"aria-label\": pipText\n    }, $pip ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.PIPButton.Exit, {\n        className: \"vds-icon\"\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.PIPButton.Enter, {\n        className: \"vds-icon\"\n    })));\n}\nDefaultPIPButton.displayName = \"DefaultPIPButton\";\nfunction DefaultFullscreenButton({ tooltip }) {\n    const { icons: Icons } = useDefaultLayoutContext(), fullscreenText = useDefaultLayoutWord(\"Fullscreen\"), enterText = useDefaultLayoutWord(\"Enter Fullscreen\"), exitText = useDefaultLayoutWord(\"Exit Fullscreen\"), $fullscreen = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"fullscreen\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: $fullscreen ? exitText : enterText,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.FullscreenButton, {\n        className: \"vds-fullscreen-button vds-button\",\n        \"aria-label\": fullscreenText\n    }, $fullscreen ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.FullscreenButton.Exit, {\n        className: \"vds-icon\"\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.FullscreenButton.Enter, {\n        className: \"vds-icon\"\n    })));\n}\nDefaultFullscreenButton.displayName = \"DefaultFullscreenButton\";\nfunction DefaultSeekButton({ backward, tooltip }) {\n    const { icons: Icons, seekStep } = useDefaultLayoutContext(), seekForwardText = useDefaultLayoutWord(\"Seek Forward\"), seekBackwardText = useDefaultLayoutWord(\"Seek Backward\"), seconds = (backward ? -1 : 1) * seekStep, label = seconds >= 0 ? seekForwardText : seekBackwardText;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: label,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.SeekButton, {\n        className: \"vds-seek-button vds-button\",\n        seconds,\n        \"aria-label\": label\n    }, seconds >= 0 ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.SeekButton.Forward, {\n        className: \"vds-icon\"\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.SeekButton.Backward, {\n        className: \"vds-icon\"\n    })));\n}\nDefaultSeekButton.displayName = \"DefaultSeekButton\";\nfunction DefaultAirPlayButton({ tooltip }) {\n    const { icons: Icons } = useDefaultLayoutContext(), airPlayText = useDefaultLayoutWord(\"AirPlay\"), $state = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"remotePlaybackState\"), stateText = useDefaultLayoutWord((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.uppercaseFirstChar)($state)), label = `${airPlayText} ${stateText}`, Icon = ($state === \"connecting\" ? Icons.AirPlayButton.Connecting : $state === \"connected\" ? Icons.AirPlayButton.Connected : null) ?? Icons.AirPlayButton.Default;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: airPlayText,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.AirPlayButton, {\n        className: \"vds-airplay-button vds-button\",\n        \"aria-label\": label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icon, {\n        className: \"vds-icon\"\n    })));\n}\nDefaultAirPlayButton.displayName = \"DefaultAirPlayButton\";\nfunction DefaultGoogleCastButton({ tooltip }) {\n    const { icons: Icons } = useDefaultLayoutContext(), googleCastText = useDefaultLayoutWord(\"Google Cast\"), $state = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"remotePlaybackState\"), stateText = useDefaultLayoutWord((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.uppercaseFirstChar)($state)), label = `${googleCastText} ${stateText}`, Icon = ($state === \"connecting\" ? Icons.GoogleCastButton.Connecting : $state === \"connected\" ? Icons.GoogleCastButton.Connected : null) ?? Icons.GoogleCastButton.Default;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: googleCastText,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.GoogleCastButton, {\n        className: \"vds-google-cast-button vds-button\",\n        \"aria-label\": label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icon, {\n        className: \"vds-icon\"\n    })));\n}\nDefaultGoogleCastButton.displayName = \"DefaultGoogleCastButton\";\nfunction DefaultLiveButton() {\n    const $live = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"live\"), label = useDefaultLayoutWord(\"Skip To Live\"), liveText = useDefaultLayoutWord(\"LIVE\");\n    return $live ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.LiveButton, {\n        className: \"vds-live-button\",\n        \"aria-label\": label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"vds-live-button-text\"\n    }, liveText)) : null;\n}\nDefaultLiveButton.displayName = \"DefaultLiveButton\";\nfunction DefaultDownloadButton() {\n    const { download, icons: Icons } = useDefaultLayoutContext(), $src = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"source\"), $title = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"title\"), file = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.getDownloadFile)({\n        title: $title,\n        src: $src,\n        download\n    }), downloadText = useDefaultLayoutWord(\"Download\");\n    return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.isString)(file?.url) ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: downloadText,\n        placement: \"top\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        role: \"button\",\n        className: \"vds-download-button vds-button\",\n        \"aria-label\": downloadText,\n        href: (0,_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.appendParamsToURL)(file.url, {\n            download: file.name\n        }),\n        download: file.name,\n        target: \"_blank\"\n    }, Icons.DownloadButton ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.DownloadButton.Default, {\n        className: \"vds-icon\"\n    }) : null)) : null;\n}\nDefaultDownloadButton.displayName = \"DefaultDownloadButton\";\nfunction DefaultCaptions() {\n    const exampleText = useDefaultLayoutWord(\"Captions look like this\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Captions, {\n        className: \"vds-captions\",\n        exampleText\n    });\n}\nDefaultCaptions.displayName = \"DefaultCaptions\";\nfunction DefaultControlsSpacer() {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-controls-spacer\"\n    });\n}\nDefaultControlsSpacer.displayName = \"DefaultControlsSpacer\";\nfunction useParentDialogEl() {\n    const { layoutEl } = useDefaultLayoutContext(), $layoutEl = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)(layoutEl);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"useParentDialogEl.useMemo\": ()=>$layoutEl?.closest(\"dialog\")\n    }[\"useParentDialogEl.useMemo\"], [\n        $layoutEl\n    ]);\n}\nfunction DefaultChaptersMenu({ tooltip, placement, portalClass = \"\" }) {\n    const { showMenuDelay, noModal, isSmallLayout, icons: Icons, menuGroup, menuContainer, colorScheme } = useDefaultLayoutContext(), chaptersText = useDefaultLayoutWord(\"Chapters\"), options = (0,_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.useChapterOptions)(), disabled = !options.length, { thumbnails } = useDefaultLayoutContext(), $src = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"currentSrc\"), $viewType = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"viewType\"), $offset = !isSmallLayout && menuGroup === \"bottom\" && $viewType === \"video\" ? 26 : 0, $RemotionThumbnail = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)(_vidstack_D_hQD1eE_js__WEBPACK_IMPORTED_MODULE_7__.RemotionThumbnail), colorSchemeClass = useColorSchemeClass(colorScheme), [isOpen, setIsOpen] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false), dialogEl = useParentDialogEl();\n    if (disabled) return null;\n    function onOpen() {\n        (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(()=>{\n            setIsOpen(true);\n        });\n    }\n    function onClose() {\n        setIsOpen(false);\n    }\n    const Content = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Items, {\n        className: \"vds-chapters-menu-items vds-menu-items\",\n        placement,\n        offset: $offset\n    }, isOpen ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Root$3, {\n        className: \"vds-chapters-radio-group vds-radio-group\",\n        value: options.selectedValue,\n        \"data-thumbnails\": thumbnails ? \"\" : null\n    }, options.map(({ cue, label, value, startTimeText, durationText, select, setProgressVar })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Item, {\n            className: \"vds-chapter-radio vds-radio\",\n            value,\n            key: value,\n            onSelect: select,\n            ref: setProgressVar\n        }, thumbnails ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Root, {\n            src: thumbnails,\n            className: \"vds-thumbnail\",\n            time: cue.startTime\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Img, null)) : $RemotionThumbnail && (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.isRemotionSrc)($src) ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($RemotionThumbnail, {\n            className: \"vds-thumbnail\",\n            frame: cue.startTime * $src.fps\n        }) : null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"vds-chapter-radio-content\"\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            className: \"vds-chapter-radio-label\"\n        }, label), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            className: \"vds-chapter-radio-start-time\"\n        }, startTimeText), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            className: \"vds-chapter-radio-duration\"\n        }, durationText))))) : null);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Root$2, {\n        className: \"vds-chapters-menu vds-menu\",\n        showDelay: showMenuDelay,\n        onOpen,\n        onClose\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: chaptersText,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Button, {\n        className: \"vds-menu-button vds-button\",\n        disabled,\n        \"aria-label\": chaptersText\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.Menu.Chapters, {\n        className: \"vds-icon\"\n    }))), noModal || !isSmallLayout ? Content : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Portal, {\n        container: menuContainer ?? dialogEl,\n        className: portalClass + (colorSchemeClass ? ` ${colorSchemeClass}` : \"\"),\n        disabled: \"fullscreen\",\n        \"data-sm\": isSmallLayout ? \"\" : null,\n        \"data-lg\": !isSmallLayout ? \"\" : null,\n        \"data-size\": isSmallLayout ? \"sm\" : \"lg\"\n    }, Content));\n}\nDefaultChaptersMenu.displayName = \"DefaultChaptersMenu\";\nconst FONT_COLOR_OPTION = {\n    type: \"color\"\n};\nconst FONT_FAMILY_OPTION = {\n    type: \"radio\",\n    values: {\n        \"Monospaced Serif\": \"mono-serif\",\n        \"Proportional Serif\": \"pro-serif\",\n        \"Monospaced Sans-Serif\": \"mono-sans\",\n        \"Proportional Sans-Serif\": \"pro-sans\",\n        Casual: \"casual\",\n        Cursive: \"cursive\",\n        \"Small Capitals\": \"capitals\"\n    }\n};\nconst FONT_SIZE_OPTION = {\n    type: \"slider\",\n    min: 0,\n    max: 400,\n    step: 25,\n    upIcon: null,\n    downIcon: null\n};\nconst FONT_OPACITY_OPTION = {\n    type: \"slider\",\n    min: 0,\n    max: 100,\n    step: 5,\n    upIcon: null,\n    downIcon: null\n};\nconst FONT_TEXT_SHADOW_OPTION = {\n    type: \"radio\",\n    values: [\n        \"None\",\n        \"Drop Shadow\",\n        \"Raised\",\n        \"Depressed\",\n        \"Outline\"\n    ]\n};\nconst FONT_DEFAULTS = {\n    fontFamily: \"pro-sans\",\n    fontSize: \"100%\",\n    textColor: \"#ffffff\",\n    textOpacity: \"100%\",\n    textShadow: \"none\",\n    textBg: \"#000000\",\n    textBgOpacity: \"100%\",\n    displayBg: \"#000000\",\n    displayBgOpacity: \"0%\"\n};\nconst FONT_SIGNALS = Object.keys(FONT_DEFAULTS).reduce((prev, type)=>({\n        ...prev,\n        [type]: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.signal)(FONT_DEFAULTS[type])\n    }), {});\nif (!_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.IS_SERVER) {\n    for (const type of Object.keys(FONT_SIGNALS)){\n        const value = localStorage.getItem(`vds-player:${(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.camelToKebabCase)(type)}`);\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.isString)(value)) FONT_SIGNALS[type].set(value);\n    }\n}\nfunction onFontReset() {\n    for (const type of Object.keys(FONT_SIGNALS)){\n        const defaultValue = FONT_DEFAULTS[type];\n        FONT_SIGNALS[type].set(defaultValue);\n    }\n}\nfunction hexToRgb(hex) {\n    const { style } = new Option();\n    style.color = hex;\n    return style.color.match(/\\((.*?)\\)/)[1].replace(/,/g, \" \");\n}\nlet isWatchingVars = false, players = /* @__PURE__ */ new Set();\nfunction updateFontCssVars() {\n    if (_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.IS_SERVER) return;\n    const { player } = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaContext)();\n    players.add(player);\n    (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.onDispose)(()=>players.delete(player));\n    if (!isWatchingVars) {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.scoped)(()=>{\n            for (const type of (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.keysOf)(FONT_SIGNALS)){\n                const $value = FONT_SIGNALS[type], defaultValue = FONT_DEFAULTS[type], varName = `--media-user-${(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.camelToKebabCase)(type)}`, storageKey = `vds-player:${(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.camelToKebabCase)(type)}`;\n                (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.effect)(()=>{\n                    const value = $value(), isDefaultVarValue = value === defaultValue, varValue = !isDefaultVarValue ? getCssVarValue(player, type, value) : null;\n                    for (const player2 of players){\n                        player2.el?.style.setProperty(varName, varValue);\n                    }\n                    if (isDefaultVarValue) {\n                        localStorage.removeItem(storageKey);\n                    } else {\n                        localStorage.setItem(storageKey, value);\n                    }\n                });\n            }\n        }, null);\n        isWatchingVars = true;\n    }\n}\nfunction getCssVarValue(player, type, value) {\n    switch(type){\n        case \"fontFamily\":\n            const fontVariant = value === \"capitals\" ? \"small-caps\" : \"\";\n            player.el?.style.setProperty(\"--media-user-font-variant\", fontVariant);\n            return getFontFamilyCSSVarValue(value);\n        case \"fontSize\":\n        case \"textOpacity\":\n        case \"textBgOpacity\":\n        case \"displayBgOpacity\":\n            return percentToRatio(value);\n        case \"textColor\":\n            return `rgb(${hexToRgb(value)} / var(--media-user-text-opacity, 1))`;\n        case \"textShadow\":\n            return getTextShadowCssVarValue(value);\n        case \"textBg\":\n            return `rgb(${hexToRgb(value)} / var(--media-user-text-bg-opacity, 1))`;\n        case \"displayBg\":\n            return `rgb(${hexToRgb(value)} / var(--media-user-display-bg-opacity, 1))`;\n    }\n}\nfunction percentToRatio(value) {\n    return (parseInt(value) / 100).toString();\n}\nfunction getFontFamilyCSSVarValue(value) {\n    switch(value){\n        case \"mono-serif\":\n            return '\"Courier New\", Courier, \"Nimbus Mono L\", \"Cutive Mono\", monospace';\n        case \"mono-sans\":\n            return '\"Deja Vu Sans Mono\", \"Lucida Console\", Monaco, Consolas, \"PT Mono\", monospace';\n        case \"pro-sans\":\n            return 'Roboto, \"Arial Unicode Ms\", Arial, Helvetica, Verdana, \"PT Sans Caption\", sans-serif';\n        case \"casual\":\n            return '\"Comic Sans MS\", Impact, Handlee, fantasy';\n        case \"cursive\":\n            return '\"Monotype Corsiva\", \"URW Chancery L\", \"Apple Chancery\", \"Dancing Script\", cursive';\n        case \"capitals\":\n            return '\"Arial Unicode Ms\", Arial, Helvetica, Verdana, \"Marcellus SC\", sans-serif + font-variant=small-caps';\n        default:\n            return '\"Times New Roman\", Times, Georgia, Cambria, \"PT Serif Caption\", serif';\n    }\n}\nfunction getTextShadowCssVarValue(value) {\n    switch(value){\n        case \"drop shadow\":\n            return \"rgb(34, 34, 34) 1.86389px 1.86389px 2.79583px, rgb(34, 34, 34) 1.86389px 1.86389px 3.72778px, rgb(34, 34, 34) 1.86389px 1.86389px 4.65972px\";\n        case \"raised\":\n            return \"rgb(34, 34, 34) 1px 1px, rgb(34, 34, 34) 2px 2px\";\n        case \"depressed\":\n            return \"rgb(204, 204, 204) 1px 1px, rgb(34, 34, 34) -1px -1px\";\n        case \"outline\":\n            return \"rgb(34, 34, 34) 0px 0px 1.86389px, rgb(34, 34, 34) 0px 0px 1.86389px, rgb(34, 34, 34) 0px 0px 1.86389px, rgb(34, 34, 34) 0px 0px 1.86389px, rgb(34, 34, 34) 0px 0px 1.86389px\";\n        default:\n            return \"\";\n    }\n}\nfunction DefaultMenuSection({ label, value, children }) {\n    const id = react__WEBPACK_IMPORTED_MODULE_0__.useId();\n    if (!label) {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"vds-menu-section\"\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"vds-menu-section-body\"\n        }, children));\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"section\", {\n        className: \"vds-menu-section\",\n        role: \"group\",\n        \"aria-labelledby\": id\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-menu-section-title\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"header\", {\n        id\n    }, label), value ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-menu-section-value\"\n    }, value) : null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-menu-section-body\"\n    }, children));\n}\nDefaultMenuSection.displayName = \"DefaultMenuSection\";\nfunction DefaultMenuButton({ label, hint = \"\", Icon, disabled = false }) {\n    const { icons: Icons } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(DefaultLayoutContext);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Button, {\n        className: \"vds-menu-item\",\n        disabled\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.Menu.ArrowLeft, {\n        className: \"vds-menu-close-icon vds-icon\"\n    }), Icon ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icon, {\n        className: \"vds-menu-item-icon vds-icon\"\n    }) : null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"vds-menu-item-label\"\n    }, label), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"vds-menu-item-hint\"\n    }, hint), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.Menu.ArrowRight, {\n        className: \"vds-menu-open-icon vds-icon\"\n    }));\n}\nDefaultMenuButton.displayName = \"DefaultMenuButton\";\nfunction DefaultMenuItem({ label, children }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-menu-item\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-menu-item-label\"\n    }, label), children);\n}\nDefaultMenuItem.displayName = \"DefaultMenuItem\";\nfunction DefaultMenuRadioGroup({ value, options, onChange }) {\n    const { icons: Icons } = useDefaultLayoutContext();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Root$3, {\n        className: \"vds-radio-group\",\n        value,\n        onChange\n    }, options.map((option)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Item, {\n            className: \"vds-radio\",\n            value: option.value,\n            key: option.value\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.Menu.RadioCheck, {\n            className: \"vds-icon\"\n        }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            className: \"vds-radio-label\",\n            \"data-part\": \"label\"\n        }, option.label))));\n}\nDefaultMenuRadioGroup.displayName = \"DefaultMenuRadioGroup\";\nfunction createRadioOptions(entries) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"createRadioOptions.useMemo\": ()=>(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(entries) ? entries.map({\n                \"createRadioOptions.useMemo\": (entry)=>({\n                        label: entry,\n                        value: entry.toLowerCase()\n                    })\n            }[\"createRadioOptions.useMemo\"]) : Object.keys(entries).map({\n                \"createRadioOptions.useMemo\": (label)=>({\n                        label,\n                        value: entries[label]\n                    })\n            }[\"createRadioOptions.useMemo\"])\n    }[\"createRadioOptions.useMemo\"], [\n        entries\n    ]);\n}\nfunction DefaultMenuSliderItem({ label, value, UpIcon, DownIcon, children, isMin, isMax }) {\n    const hasTitle = label || value, Content = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, DownIcon ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DownIcon, {\n        className: \"vds-icon down\"\n    }) : null, children, UpIcon ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(UpIcon, {\n        className: \"vds-icon up\"\n    }) : null);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: `vds-menu-item vds-menu-slider-item${hasTitle ? \" group\" : \"\"}`,\n        \"data-min\": isMin ? \"\" : null,\n        \"data-max\": isMax ? \"\" : null\n    }, hasTitle ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-menu-slider-title\"\n    }, label ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, label) : null, value ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, value) : null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-menu-slider-body\"\n    }, Content)) : Content);\n}\nDefaultMenuSliderItem.displayName = \"DefaultMenuSliderItem\";\nfunction DefaultSliderParts() {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Track, {\n        className: \"vds-slider-track\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.TrackFill, {\n        className: \"vds-slider-track-fill vds-slider-track\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Thumb, {\n        className: \"vds-slider-thumb\"\n    }));\n}\nDefaultSliderParts.displayName = \"DefaultSliderParts\";\nfunction DefaultSliderSteps() {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Steps, {\n        className: \"vds-slider-steps\"\n    }, (step)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"vds-slider-step\",\n            key: String(step)\n        }));\n}\nDefaultSliderSteps.displayName = \"DefaultSliderSteps\";\nfunction DefaultFontMenu() {\n    const label = useDefaultLayoutWord(\"Caption Styles\"), $hasCaptions = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"hasCaptions\"), fontSectionLabel = useDefaultLayoutWord(\"Font\"), textSectionLabel = useDefaultLayoutWord(\"Text\"), textBgSectionLabel = useDefaultLayoutWord(\"Text Background\"), displayBgSectionLabel = useDefaultLayoutWord(\"Display Background\");\n    if (!$hasCaptions) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Root$2, {\n        className: \"vds-font-menu vds-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuButton, {\n        label\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Items, {\n        className: \"vds-font-style-items vds-menu-items\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, {\n        label: fontSectionLabel\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontFamilyMenu, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSizeSlider, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, {\n        label: textSectionLabel\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTextColorInput, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTextShadowMenu, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTextOpacitySlider, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, {\n        label: textBgSectionLabel\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTextBgInput, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTextBgOpacitySlider, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, {\n        label: displayBgSectionLabel\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultDisplayBgInput, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultDisplayBgOpacitySlider, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultResetMenuItem, null))));\n}\nDefaultFontMenu.displayName = \"DefaultFontMenu\";\nfunction DefaultFontFamilyMenu() {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSetting, {\n        label: \"Family\",\n        type: \"fontFamily\",\n        option: FONT_FAMILY_OPTION\n    });\n}\nDefaultFontFamilyMenu.displayName = \"DefaultFontFamilyMenu\";\nfunction DefaultFontSizeSlider() {\n    const { icons: Icons } = useDefaultLayoutContext(), option = {\n        ...FONT_SIZE_OPTION,\n        upIcon: Icons.Menu.FontSizeUp,\n        downIcon: Icons.Menu.FontSizeDown\n    };\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSetting, {\n        label: \"Size\",\n        type: \"fontSize\",\n        option\n    });\n}\nDefaultFontSizeSlider.displayName = \"DefaultFontSizeSlider\";\nfunction DefaultTextColorInput() {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSetting, {\n        label: \"Color\",\n        type: \"textColor\",\n        option: FONT_COLOR_OPTION\n    });\n}\nDefaultTextColorInput.displayName = \"DefaultTextColorInput\";\nfunction DefaultTextOpacitySlider() {\n    const { icons: Icons } = useDefaultLayoutContext(), option = {\n        ...FONT_OPACITY_OPTION,\n        upIcon: Icons.Menu.OpacityUp,\n        downIcon: Icons.Menu.OpacityDown\n    };\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSetting, {\n        label: \"Opacity\",\n        type: \"textOpacity\",\n        option\n    });\n}\nDefaultTextOpacitySlider.displayName = \"DefaultTextOpacitySlider\";\nfunction DefaultTextShadowMenu() {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSetting, {\n        label: \"Shadow\",\n        type: \"textShadow\",\n        option: FONT_TEXT_SHADOW_OPTION\n    });\n}\nDefaultTextShadowMenu.displayName = \"DefaultTextShadowMenu\";\nfunction DefaultTextBgInput() {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSetting, {\n        label: \"Color\",\n        type: \"textBg\",\n        option: FONT_COLOR_OPTION\n    });\n}\nDefaultTextBgInput.displayName = \"DefaultTextBgInput\";\nfunction DefaultTextBgOpacitySlider() {\n    const { icons: Icons } = useDefaultLayoutContext(), option = {\n        ...FONT_OPACITY_OPTION,\n        upIcon: Icons.Menu.OpacityUp,\n        downIcon: Icons.Menu.OpacityDown\n    };\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSetting, {\n        label: \"Opacity\",\n        type: \"textBgOpacity\",\n        option\n    });\n}\nDefaultTextBgOpacitySlider.displayName = \"DefaultTextBgOpacitySlider\";\nfunction DefaultDisplayBgInput() {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSetting, {\n        label: \"Color\",\n        type: \"displayBg\",\n        option: FONT_COLOR_OPTION\n    });\n}\nDefaultDisplayBgInput.displayName = \"DefaultDisplayBgInput\";\nfunction DefaultDisplayBgOpacitySlider() {\n    const { icons: Icons } = useDefaultLayoutContext(), option = {\n        ...FONT_OPACITY_OPTION,\n        upIcon: Icons.Menu.OpacityUp,\n        downIcon: Icons.Menu.OpacityDown\n    };\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontSetting, {\n        label: \"Opacity\",\n        type: \"displayBgOpacity\",\n        option\n    });\n}\nDefaultDisplayBgOpacitySlider.displayName = \"DefaultDisplayBgOpacitySlider\";\nfunction DefaultFontSetting({ label, option, type }) {\n    const player = (0,_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.useMediaPlayer)(), $currentValue = FONT_SIGNALS[type], $value = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)($currentValue), translatedLabel = useDefaultLayoutWord(label);\n    const notify = react__WEBPACK_IMPORTED_MODULE_0__.useCallback({\n        \"DefaultFontSetting.useCallback[notify]\": ()=>{\n            player?.dispatchEvent(new Event(\"vds-font-change\"));\n        }\n    }[\"DefaultFontSetting.useCallback[notify]\"], [\n        player\n    ]);\n    const onChange = react__WEBPACK_IMPORTED_MODULE_0__.useCallback({\n        \"DefaultFontSetting.useCallback[onChange]\": (newValue)=>{\n            $currentValue.set(newValue);\n            notify();\n        }\n    }[\"DefaultFontSetting.useCallback[onChange]\"], [\n        $currentValue,\n        notify\n    ]);\n    if (option.type === \"color\") {\n        let onColorChange2 = function(event) {\n            onChange(event.target.value);\n        };\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuItem, {\n            label: translatedLabel\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n            className: \"vds-color-picker\",\n            type: \"color\",\n            value: $value,\n            onChange: onColorChange2\n        }));\n    }\n    if (option.type === \"slider\") {\n        let onSliderValueChange2 = function(value) {\n            onChange(value + \"%\");\n        };\n        const { min, max, step, upIcon, downIcon } = option;\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSliderItem, {\n            label: translatedLabel,\n            value: $value,\n            UpIcon: upIcon,\n            DownIcon: downIcon,\n            isMin: $value === min + \"%\",\n            isMax: $value === max + \"%\"\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Root$5, {\n            className: \"vds-slider\",\n            min,\n            max,\n            step,\n            keyStep: step,\n            value: parseInt($value),\n            \"aria-label\": translatedLabel,\n            onValueChange: onSliderValueChange2,\n            onDragValueChange: onSliderValueChange2\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSliderParts, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSliderSteps, null)));\n    }\n    if (option.type === \"radio\") {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontRadioGroup, {\n            id: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.camelToKebabCase)(type),\n            label: translatedLabel,\n            value: $value,\n            values: option.values,\n            onChange\n        });\n    }\n    return null;\n}\nDefaultFontSetting.displayName = \"DefaultFontSetting\";\nfunction DefaultFontRadioGroup({ id, label, value, values, onChange }) {\n    const radioOptions = createRadioOptions(values), { translations } = useDefaultLayoutContext(), hint = react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"DefaultFontRadioGroup.useMemo[hint]\": ()=>{\n            const label2 = radioOptions.find({\n                \"DefaultFontRadioGroup.useMemo[hint]\": (radio)=>radio.value === value\n            }[\"DefaultFontRadioGroup.useMemo[hint]\"])?.label || \"\";\n            return i18n(translations, label2);\n        }\n    }[\"DefaultFontRadioGroup.useMemo[hint]\"], [\n        value,\n        radioOptions\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Root$2, {\n        className: `vds-${id}-menu vds-menu`\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuButton, {\n        label,\n        hint\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Items, {\n        className: \"vds-menu-items\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuRadioGroup, {\n        value,\n        options: radioOptions,\n        onChange\n    })));\n}\nDefaultFontRadioGroup.displayName = \"DefaultFontRadioGroup\";\nfunction DefaultResetMenuItem() {\n    const resetText = useDefaultLayoutWord(\"Reset\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        className: \"vds-menu-item\",\n        role: \"menuitem\",\n        onClick: onFontReset\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"vds-menu-item-label\"\n    }, resetText));\n}\nDefaultResetMenuItem.displayName = \"DefaultResetMenuItem\";\nfunction DefaultMenuCheckbox({ label, checked, storageKey, defaultChecked = false, onChange }) {\n    const [isChecked, setIsChecked] = react__WEBPACK_IMPORTED_MODULE_0__.useState(defaultChecked), [isActive, setIsActive] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"DefaultMenuCheckbox.useEffect\": ()=>{\n            const savedValue = storageKey ? localStorage.getItem(storageKey) : null, checked2 = !!(savedValue ?? defaultChecked);\n            setIsChecked(checked2);\n            onChange?.(checked2);\n        }\n    }[\"DefaultMenuCheckbox.useEffect\"], []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"DefaultMenuCheckbox.useEffect\": ()=>{\n            if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.isBoolean)(checked)) setIsChecked(checked);\n        }\n    }[\"DefaultMenuCheckbox.useEffect\"], [\n        checked\n    ]);\n    function onPress(event) {\n        if (event && \"button\" in event && event?.button === 1) return;\n        const toggledCheck = !isChecked;\n        setIsChecked(toggledCheck);\n        if (storageKey) localStorage.setItem(storageKey, toggledCheck ? \"1\" : \"\");\n        onChange?.(toggledCheck, event?.nativeEvent);\n        setIsActive(false);\n    }\n    function onActive(event) {\n        if (event.button !== 0) return;\n        setIsActive(true);\n    }\n    function onKeyDown(event) {\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.isKeyboardClick)(event.nativeEvent)) onPress();\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-menu-checkbox\",\n        role: \"menuitemcheckbox\",\n        tabIndex: 0,\n        \"aria-label\": label,\n        \"aria-checked\": isChecked ? \"true\" : \"false\",\n        \"data-active\": isActive ? \"\" : null,\n        onPointerUp: onPress,\n        onPointerDown: onActive,\n        onKeyDown\n    });\n}\nDefaultMenuCheckbox.displayName = \"DefaultMenuCheckbox\";\nfunction DefaultAccessibilityMenu({ slots }) {\n    const label = useDefaultLayoutWord(\"Accessibility\"), { icons: Icons } = useDefaultLayoutContext();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Root$2, {\n        className: \"vds-accessibility-menu vds-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuButton, {\n        label,\n        Icon: Icons.Menu.Accessibility\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Items, {\n        className: \"vds-menu-items\"\n    }, slot(slots, \"accessibilityMenuItemsStart\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAnnouncementsMenuCheckbox, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultKeyboardAnimationsMenuCheckbox, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFontMenu, null)), slot(slots, \"accessibilityMenuItemsEnd\", null)));\n}\nDefaultAccessibilityMenu.displayName = \"DefaultAccessibilityMenu\";\nfunction DefaultAnnouncementsMenuCheckbox() {\n    const { userPrefersAnnouncements } = useDefaultLayoutContext(), label = useDefaultLayoutWord(\"Announcements\");\n    function onChange(checked) {\n        userPrefersAnnouncements.set(checked);\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuItem, {\n        label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuCheckbox, {\n        label,\n        defaultChecked: true,\n        storageKey: \"vds-player::announcements\",\n        onChange\n    }));\n}\nDefaultAnnouncementsMenuCheckbox.displayName = \"DefaultAnnouncementsMenuCheckbox\";\nfunction DefaultKeyboardAnimationsMenuCheckbox() {\n    const $viewType = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"viewType\"), { userPrefersKeyboardAnimations, noKeyboardAnimations } = useDefaultLayoutContext(), label = useDefaultLayoutWord(\"Keyboard Animations\");\n    if ($viewType !== \"video\" || noKeyboardAnimations) return null;\n    function onChange(checked) {\n        userPrefersKeyboardAnimations.set(checked);\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuItem, {\n        label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuCheckbox, {\n        label,\n        defaultChecked: true,\n        storageKey: \"vds-player::keyboard-animations\",\n        onChange\n    }));\n}\nDefaultKeyboardAnimationsMenuCheckbox.displayName = \"DefaultKeyboardAnimationsMenuCheckbox\";\nfunction DefaultAudioMenu({ slots }) {\n    const label = useDefaultLayoutWord(\"Audio\"), $canSetAudioGain = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"canSetAudioGain\"), $audioTracks = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"audioTracks\"), { noAudioGain, icons: Icons } = useDefaultLayoutContext(), hasGainSlider = $canSetAudioGain && !noAudioGain, $disabled = !hasGainSlider && $audioTracks.length <= 1;\n    if ($disabled) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Root$2, {\n        className: \"vds-audio-menu vds-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuButton, {\n        label,\n        Icon: Icons.Menu.Audio\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Items, {\n        className: \"vds-menu-items\"\n    }, slot(slots, \"audioMenuItemsStart\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAudioTracksMenu, null), hasGainSlider ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAudioBoostMenuSection, null) : null, slot(slots, \"audioMenuItemsEnd\", null)));\n}\nDefaultAudioMenu.displayName = \"DefaultAudioMenu\";\nfunction DefaultAudioBoostMenuSection() {\n    const $audioGain = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"audioGain\"), label = useDefaultLayoutWord(\"Boost\"), value = Math.round((($audioGain ?? 1) - 1) * 100) + \"%\", $canSetAudioGain = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"canSetAudioGain\"), { noAudioGain, icons: Icons } = useDefaultLayoutContext(), $disabled = !$canSetAudioGain || noAudioGain, min = useGainMin(), max = useGainMax();\n    if ($disabled) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, {\n        label,\n        value\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSliderItem, {\n        UpIcon: Icons.Menu.AudioBoostUp,\n        DownIcon: Icons.Menu.AudioBoostDown,\n        isMin: (($audioGain ?? 1) - 1) * 100 <= min,\n        isMax: (($audioGain ?? 1) - 1) * 100 === max\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAudioGainSlider, null)));\n}\nDefaultAudioBoostMenuSection.displayName = \"DefaultAudioBoostMenuSection\";\nfunction useGainMin() {\n    const { audioGains } = useDefaultLayoutContext(), min = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(audioGains) ? audioGains[0] : audioGains?.min;\n    return min ?? 0;\n}\nfunction useGainMax() {\n    const { audioGains } = useDefaultLayoutContext(), max = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(audioGains) ? audioGains[audioGains.length - 1] : audioGains?.max;\n    return max ?? 300;\n}\nfunction useGainStep() {\n    const { audioGains } = useDefaultLayoutContext(), step = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(audioGains) ? audioGains[1] - audioGains[0] : audioGains?.step;\n    return step || 25;\n}\nfunction DefaultAudioGainSlider() {\n    const label = useDefaultLayoutWord(\"Audio Boost\"), min = useGainMin(), max = useGainMax(), step = useGainStep();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Root$1, {\n        className: \"vds-audio-gain-slider vds-slider\",\n        \"aria-label\": label,\n        min,\n        max,\n        step,\n        keyStep: step\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSliderParts, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSliderSteps, null));\n}\nDefaultAudioGainSlider.displayName = \"DefaultAudioGainSlider\";\nfunction DefaultAudioTracksMenu() {\n    const { icons: Icons } = useDefaultLayoutContext(), label = useDefaultLayoutWord(\"Track\"), defaultText = useDefaultLayoutWord(\"Default\"), $track = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"audioTrack\"), options = (0,_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.useAudioOptions)();\n    if (options.disabled) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Root$2, {\n        className: \"vds-audio-track-menu vds-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuButton, {\n        label,\n        hint: $track?.label ?? defaultText,\n        disabled: options.disabled,\n        Icon: Icons.Menu.Audio\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Items, {\n        className: \"vds-menu-items\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Root$3, {\n        className: \"vds-audio-radio-group vds-radio-group\",\n        value: options.selectedValue\n    }, options.map(({ label: label2, value, select })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Item, {\n            className: \"vds-audio-radio vds-radio\",\n            value,\n            onSelect: select,\n            key: value\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.Menu.RadioCheck, {\n            className: \"vds-icon\"\n        }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            className: \"vds-radio-label\"\n        }, label2))))));\n}\nDefaultAudioTracksMenu.displayName = \"DefaultAudioTracksMenu\";\nfunction DefaultCaptionMenu({ slots }) {\n    const { icons: Icons } = useDefaultLayoutContext(), label = useDefaultLayoutWord(\"Captions\"), offText = useDefaultLayoutWord(\"Off\"), options = (0,_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.useCaptionOptions)({\n        off: offText\n    }), hint = options.selectedTrack?.label ?? offText;\n    if (options.disabled) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Root$2, {\n        className: \"vds-captions-menu vds-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuButton, {\n        label,\n        hint,\n        disabled: options.disabled,\n        Icon: Icons.Menu.Captions\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Items, {\n        className: \"vds-menu-items\"\n    }, slot(slots, \"captionsMenuItemsStart\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Root$3, {\n        className: \"vds-captions-radio-group vds-radio-group\",\n        value: options.selectedValue\n    }, options.map(({ label: label2, value, select })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Item, {\n            className: \"vds-caption-radio vds-radio\",\n            value,\n            onSelect: select,\n            key: value\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.Menu.RadioCheck, {\n            className: \"vds-icon\"\n        }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            className: \"vds-radio-label\"\n        }, label2)))), slot(slots, \"captionsMenuItemsEnd\", null)));\n}\nDefaultCaptionMenu.displayName = \"DefaultCaptionMenu\";\nfunction DefaultPlaybackMenu({ slots }) {\n    const label = useDefaultLayoutWord(\"Playback\"), { icons: Icons } = useDefaultLayoutContext();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Root$2, {\n        className: \"vds-playback-menu vds-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuButton, {\n        label,\n        Icon: Icons.Menu.Playback\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Items, {\n        className: \"vds-menu-items\"\n    }, slot(slots, \"playbackMenuItemsStart\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, null, slot(slots, \"playbackMenuLoop\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultLoopMenuCheckbox, null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSpeedMenuSection, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultQualityMenuSection, null), slot(slots, \"playbackMenuItemsEnd\", null)));\n}\nDefaultPlaybackMenu.displayName = \"DefaultPlaybackMenu\";\nfunction DefaultLoopMenuCheckbox() {\n    const { remote } = (0,_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.useMediaContext)(), label = useDefaultLayoutWord(\"Loop\");\n    function onChange(checked, trigger) {\n        remote.userPrefersLoopChange(checked, trigger);\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuItem, {\n        label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuCheckbox, {\n        label,\n        storageKey: \"vds-player::user-loop\",\n        onChange\n    }));\n}\nDefaultLoopMenuCheckbox.displayName = \"DefaultLoopMenuCheckbox\";\nfunction DefaultAutoQualityMenuCheckbox() {\n    const { remote, qualities } = (0,_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.useMediaContext)(), $autoQuality = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"autoQuality\"), label = useDefaultLayoutWord(\"Auto\");\n    function onChange(checked, trigger) {\n        if (checked) {\n            remote.requestAutoQuality(trigger);\n        } else {\n            remote.changeQuality(qualities.selectedIndex, trigger);\n        }\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuItem, {\n        label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuCheckbox, {\n        label,\n        checked: $autoQuality,\n        onChange,\n        defaultChecked: $autoQuality\n    }));\n}\nDefaultAutoQualityMenuCheckbox.displayName = \"DefaultAutoQualityMenuCheckbox\";\nfunction DefaultQualityMenuSection() {\n    const { hideQualityBitrate, icons: Icons } = useDefaultLayoutContext(), $canSetQuality = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"canSetQuality\"), $qualities = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"qualities\"), $quality = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"quality\"), label = useDefaultLayoutWord(\"Quality\"), autoText = useDefaultLayoutWord(\"Auto\"), sortedQualities = react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"DefaultQualityMenuSection.useMemo[sortedQualities]\": ()=>(0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.sortVideoQualities)($qualities)\n    }[\"DefaultQualityMenuSection.useMemo[sortedQualities]\"], [\n        $qualities\n    ]);\n    if (!$canSetQuality || $qualities.length <= 1) return null;\n    const height = $quality?.height, bitrate = !hideQualityBitrate ? $quality?.bitrate : null, bitrateText = bitrate && bitrate > 0 ? `${(bitrate / 1e6).toFixed(2)} Mbps` : null, value = height ? `${height}p${bitrateText ? ` (${bitrateText})` : \"\"}` : autoText, isMin = sortedQualities[0] === $quality, isMax = sortedQualities.at(-1) === $quality;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, {\n        label,\n        value\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSliderItem, {\n        UpIcon: Icons.Menu.QualityUp,\n        DownIcon: Icons.Menu.QualityDown,\n        isMin,\n        isMax\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultQualitySlider, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAutoQualityMenuCheckbox, null));\n}\nDefaultQualityMenuSection.displayName = \"DefaultQualityMenuSection\";\nfunction DefaultQualitySlider() {\n    const label = useDefaultLayoutWord(\"Quality\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Root$3, {\n        className: \"vds-quality-slider vds-slider\",\n        \"aria-label\": label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSliderParts, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSliderSteps, null));\n}\nDefaultQualitySlider.displayName = \"DefaultQualitySlider\";\nfunction DefaultSpeedMenuSection() {\n    const { icons: Icons } = useDefaultLayoutContext(), $playbackRate = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"playbackRate\"), $canSetPlaybackRate = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"canSetPlaybackRate\"), label = useDefaultLayoutWord(\"Speed\"), normalText = useDefaultLayoutWord(\"Normal\"), min = useSpeedMin(), max = useSpeedMax(), value = $playbackRate === 1 ? normalText : $playbackRate + \"x\";\n    if (!$canSetPlaybackRate) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSection, {\n        label,\n        value\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMenuSliderItem, {\n        UpIcon: Icons.Menu.SpeedUp,\n        DownIcon: Icons.Menu.SpeedDown,\n        isMin: $playbackRate === min,\n        isMax: $playbackRate === max\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSpeedSlider, null)));\n}\nfunction useSpeedMin() {\n    const { playbackRates } = useDefaultLayoutContext(), rates = playbackRates;\n    return ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(rates) ? rates[0] : rates?.min) ?? 0;\n}\nfunction useSpeedMax() {\n    const { playbackRates } = useDefaultLayoutContext(), rates = playbackRates;\n    return ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(rates) ? rates[rates.length - 1] : rates?.max) ?? 2;\n}\nfunction useSpeedStep() {\n    const { playbackRates } = useDefaultLayoutContext(), rates = playbackRates;\n    return ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(rates) ? rates[1] - rates[0] : rates?.step) || 0.25;\n}\nfunction DefaultSpeedSlider() {\n    const label = useDefaultLayoutWord(\"Speed\"), min = useSpeedMin(), max = useSpeedMax(), step = useSpeedStep();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Root$2, {\n        className: \"vds-speed-slider vds-slider\",\n        \"aria-label\": label,\n        min,\n        max,\n        step,\n        keyStep: step\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSliderParts, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSliderSteps, null));\n}\nDefaultSpeedSlider.displayName = \"DefaultSpeedSlider\";\nfunction DefaultSettingsMenu({ tooltip, placement, portalClass = \"\", slots }) {\n    const { showMenuDelay, icons: Icons, isSmallLayout, menuContainer, menuGroup, noModal, colorScheme } = useDefaultLayoutContext(), settingsText = useDefaultLayoutWord(\"Settings\"), $viewType = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"viewType\"), $offset = !isSmallLayout && menuGroup === \"bottom\" && $viewType === \"video\" ? 26 : 0, colorSchemeClass = useColorSchemeClass(colorScheme), [isOpen, setIsOpen] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false), dialogEl = useParentDialogEl();\n    (0,_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.useScoped)(updateFontCssVars);\n    function onOpen() {\n        (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(()=>{\n            setIsOpen(true);\n        });\n    }\n    function onClose() {\n        setIsOpen(false);\n    }\n    const Content = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Items, {\n        className: \"vds-settings-menu-items vds-menu-items\",\n        placement,\n        offset: $offset\n    }, isOpen ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, slot(slots, \"settingsMenuItemsStart\", null), slot(slots, \"settingsMenuStartItems\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultPlaybackMenu, {\n        slots\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAccessibilityMenu, {\n        slots\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAudioMenu, {\n        slots\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultCaptionMenu, {\n        slots\n    }), slot(slots, \"settingsMenuEndItems\", null), slot(slots, \"settingsMenuItemsEnd\", null)) : null);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Root$2, {\n        className: \"vds-settings-menu vds-menu\",\n        showDelay: showMenuDelay,\n        onOpen,\n        onClose\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTooltip, {\n        content: settingsText,\n        placement: tooltip\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Button, {\n        className: \"vds-menu-button vds-button\",\n        \"aria-label\": settingsText\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icons.Menu.Settings, {\n        className: \"vds-icon vds-rotate-icon\"\n    }))), noModal || !isSmallLayout ? Content : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Portal, {\n        className: portalClass + (colorSchemeClass ? ` ${colorSchemeClass}` : \"\"),\n        container: menuContainer ?? dialogEl,\n        disabled: \"fullscreen\",\n        \"data-sm\": isSmallLayout ? \"\" : null,\n        \"data-lg\": !isSmallLayout ? \"\" : null,\n        \"data-size\": isSmallLayout ? \"sm\" : \"lg\",\n        \"data-view-type\": $viewType\n    }, Content));\n}\nDefaultSettingsMenu.displayName = \"DefaultSettingsMenu\";\nfunction DefaultVolumePopup({ tooltip, orientation, slots }) {\n    const $pointer = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"pointer\"), $muted = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"muted\"), $canSetVolume = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"canSetVolume\"), [rootEl, setRootEl] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null), isRootActive = (0,_vidstack_BPOD0tS4_js__WEBPACK_IMPORTED_MODULE_2__.useActive)(rootEl), muteButton = slot(slots, \"muteButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultMuteButton, {\n        tooltip\n    }));\n    if (!$canSetVolume) {\n        return muteButton;\n    }\n    return $pointer === \"coarse\" && !$muted ? null : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-volume\",\n        \"data-active\": isRootActive ? \"\" : null,\n        ref: setRootEl\n    }, muteButton, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-volume-popup\"\n    }, slot(slots, \"volumeSlider\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVolumeSlider, {\n        orientation\n    }))));\n}\nDefaultVolumePopup.displayName = \"DefaultVolumePopup\";\nfunction DefaultVolumeSlider(props) {\n    const label = useDefaultLayoutWord(\"Volume\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Root$4, {\n        className: \"vds-volume-slider vds-slider\",\n        \"aria-label\": label,\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Track, {\n        className: \"vds-slider-track\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.TrackFill, {\n        className: \"vds-slider-track-fill vds-slider-track\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Thumb, {\n        className: \"vds-slider-thumb\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Preview, {\n        className: \"vds-slider-preview\",\n        noClamp: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Value, {\n        className: \"vds-slider-value\"\n    })));\n}\nDefaultVolumeSlider.displayName = \"DefaultVolumeSlider\";\nfunction DefaultTimeSlider() {\n    const [instance, setInstance] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null), [width, setWidth] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0), $src = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"currentSrc\"), { thumbnails, sliderChaptersMinWidth, disableTimeSlider, seekStep, noScrubGesture } = useDefaultLayoutContext(), label = useDefaultLayoutWord(\"Seek\"), $RemotionSliderThumbnail = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)(_vidstack_D_hQD1eE_js__WEBPACK_IMPORTED_MODULE_7__.RemotionSliderThumbnail);\n    const onResize = react__WEBPACK_IMPORTED_MODULE_0__.useCallback({\n        \"DefaultTimeSlider.useCallback[onResize]\": ()=>{\n            const el = instance?.el;\n            el && setWidth(el.clientWidth);\n        }\n    }[\"DefaultTimeSlider.useCallback[onResize]\"], [\n        instance\n    ]);\n    (0,_vidstack_BPOD0tS4_js__WEBPACK_IMPORTED_MODULE_2__.useResizeObserver)(instance?.el, onResize);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Root$1, {\n        className: \"vds-time-slider vds-slider\",\n        \"aria-label\": label,\n        disabled: disableTimeSlider,\n        noSwipeGesture: noScrubGesture,\n        keyStep: seekStep,\n        ref: setInstance\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Chapters, {\n        className: \"vds-slider-chapters\",\n        disabled: width < sliderChaptersMinWidth\n    }, (cues, forwardRef)=>cues.map((cue)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                className: \"vds-slider-chapter\",\n                key: cue.startTime,\n                ref: forwardRef\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Track, {\n                className: \"vds-slider-track\"\n            }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.TrackFill, {\n                className: \"vds-slider-track-fill vds-slider-track\"\n            }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Progress, {\n                className: \"vds-slider-progress vds-slider-track\"\n            })))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Thumb, {\n        className: \"vds-slider-thumb\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Preview, {\n        className: \"vds-slider-preview\"\n    }, thumbnails ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Thumbnail.Root, {\n        src: thumbnails,\n        className: \"vds-slider-thumbnail vds-thumbnail\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Thumbnail.Img, null)) : $RemotionSliderThumbnail && (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.isRemotionSrc)($src) ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($RemotionSliderThumbnail, {\n        className: \"vds-slider-thumbnail vds-thumbnail\"\n    }) : null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.ChapterTitle, {\n        className: \"vds-slider-chapter-title\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Value, {\n        className: \"vds-slider-value\"\n    })));\n}\nDefaultTimeSlider.displayName = \"DefaultTimeSlider\";\nfunction DefaultTimeGroup({ slots }) {\n    const $duration = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"duration\");\n    if (!$duration) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-time-group\"\n    }, slot(slots, \"currentTime\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Time, {\n        className: \"vds-time\",\n        type: \"current\"\n    })), slot(slots, \"timeDivider\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-time-divider\"\n    }, \"/\")), slot(slots, \"endTime\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Time, {\n        className: \"vds-time\",\n        type: \"duration\"\n    })));\n}\nDefaultTimeGroup.displayName = \"DefaultTimeGroup\";\nfunction DefaultTimeInfo({ slots }) {\n    const $live = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"live\");\n    return $live ? slot(slots, \"liveButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultLiveButton, null)) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTimeGroup, {\n        slots\n    });\n}\nDefaultTimeInfo.displayName = \"DefaultTimeInfo\";\nfunction DefaultTimeInvert({ slots }) {\n    const $live = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"live\"), $duration = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"duration\");\n    return $live ? slot(slots, \"liveButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultLiveButton, null)) : slot(slots, \"endTime\", $duration ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Time, {\n        className: \"vds-time\",\n        type: \"current\",\n        toggle: true,\n        remainder: true\n    }) : null);\n}\nDefaultTimeInvert.displayName = \"DefaultTimeInvert\";\nconst MediaLayout$1 = createDefaultMediaLayout({\n    type: \"audio\",\n    smLayoutWhen ({ width }) {\n        return width < 576;\n    },\n    renderLayout: ()=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioLayout, null)\n});\nfunction DefaultAudioLayout(props) {\n    const [scrubbing, setScrubbing] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false), $pointer = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"pointer\");\n    const onStartScrubbing = react__WEBPACK_IMPORTED_MODULE_0__.useCallback({\n        \"DefaultAudioLayout.useCallback[onStartScrubbing]\": (event)=>{\n            const { target } = event, hasTimeSlider = !!(target instanceof HTMLElement && target.closest(\".vds-time-slider\"));\n            if (!hasTimeSlider) return;\n            event.nativeEvent.stopImmediatePropagation();\n            setScrubbing(true);\n        }\n    }[\"DefaultAudioLayout.useCallback[onStartScrubbing]\"], []);\n    const onStopScrubbing = react__WEBPACK_IMPORTED_MODULE_0__.useCallback({\n        \"DefaultAudioLayout.useCallback[onStopScrubbing]\": ()=>{\n            setScrubbing(false);\n        }\n    }[\"DefaultAudioLayout.useCallback[onStopScrubbing]\"], []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"DefaultAudioLayout.useEffect\": ()=>{\n            if (scrubbing) return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.listenEvent)(window, \"pointerdown\", onStopScrubbing);\n        }\n    }[\"DefaultAudioLayout.useEffect\"], [\n        scrubbing,\n        onStopScrubbing\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaLayout$1, {\n        ...props,\n        \"data-scrubbing\": scrubbing ? \"\" : null,\n        onPointerDown: scrubbing ? (e)=>e.stopPropagation() : void 0,\n        onPointerDownCapture: $pointer === \"coarse\" && !scrubbing ? onStartScrubbing : void 0\n    });\n}\nDefaultAudioLayout.displayName = \"DefaultAudioLayout\";\nfunction AudioLayout() {\n    const slots = useDefaultAudioLayoutSlots();\n    (0,_vidstack_BPOD0tS4_js__WEBPACK_IMPORTED_MODULE_2__.useLayoutName)(\"audio\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAnnouncer, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultCaptions, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Root$4, {\n        className: \"vds-controls\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"vds-controls-group\"\n    }, slot(slots, \"seekBackwardButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSeekButton, {\n        backward: true,\n        tooltip: \"top start\"\n    })), slot(slots, \"playButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultPlayButton, {\n        tooltip: \"top center\"\n    })), slot(slots, \"seekForwardButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSeekButton, {\n        tooltip: \"top center\"\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAudioTitle, null), slot(slots, \"timeSlider\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTimeSlider, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTimeInvert, {\n        slots\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVolumePopup, {\n        orientation: \"vertical\",\n        tooltip: \"top\",\n        slots\n    }), slot(slots, \"captionButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultCaptionButton, {\n        tooltip: \"top center\"\n    })), slot(slots, \"downloadButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultDownloadButton, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAudioMenus, {\n        slots\n    }))));\n}\nAudioLayout.displayName = \"AudioLayout\";\nfunction DefaultAudioMenus({ slots }) {\n    const { isSmallLayout, noModal } = useDefaultLayoutContext(), placement = noModal ? \"top end\" : !isSmallLayout ? \"top end\" : null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, slot(slots, \"chaptersMenu\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultChaptersMenu, {\n        tooltip: \"top\",\n        placement,\n        portalClass: \"vds-audio-layout\"\n    })), slot(slots, \"settingsMenu\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSettingsMenu, {\n        tooltip: \"top end\",\n        placement,\n        portalClass: \"vds-audio-layout\",\n        slots\n    })));\n}\nDefaultAudioMenus.displayName = \"DefaultAudioMenus\";\nfunction DefaultAudioTitle() {\n    const [rootEl, setRootEl] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null), media = (0,_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.useMediaContext)(), { translations } = useDefaultLayoutContext(), [isTextOverflowing, setIsTextOverflowing] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const isContinued = (0,_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.createComputed)(()=>{\n        const { started, currentTime } = media.$state;\n        return started() || currentTime() > 0;\n    });\n    const $title = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)((0,_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.createComputed)({\n        \"DefaultAudioTitle.useSignal[$title]\": ()=>{\n            const { title, ended } = media.$state;\n            if (!title()) return \"\";\n            const word = ended() ? \"Replay\" : isContinued() ? \"Continue\" : \"Play\";\n            return `${i18n(translations, word)}: ${title()}`;\n        }\n    }[\"DefaultAudioTitle.useSignal[$title]\"]));\n    const chapterTitle = (0,_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.useChapterTitle)(), $isContinued = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)(isContinued), $chapterTitle = $isContinued ? chapterTitle : \"\", isTransitionActive = (0,_vidstack_BPOD0tS4_js__WEBPACK_IMPORTED_MODULE_2__.useTransitionActive)(rootEl);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"DefaultAudioTitle.useEffect\": ()=>{\n            if (isTransitionActive && document.activeElement === document.body) {\n                media.player.el?.focus({\n                    preventScroll: true\n                });\n            }\n        }\n    }[\"DefaultAudioTitle.useEffect\"], []);\n    const onResize = react__WEBPACK_IMPORTED_MODULE_0__.useCallback({\n        \"DefaultAudioTitle.useCallback[onResize]\": ()=>{\n            const el = rootEl, isOverflowing = !!el && !isTransitionActive && el.clientWidth < el.children[0].clientWidth;\n            if (el) (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.toggleClass)(el, \"vds-marquee\", isOverflowing);\n            setIsTextOverflowing(isOverflowing);\n        }\n    }[\"DefaultAudioTitle.useCallback[onResize]\"], [\n        rootEl,\n        isTransitionActive\n    ]);\n    (0,_vidstack_BPOD0tS4_js__WEBPACK_IMPORTED_MODULE_2__.useResizeObserver)(rootEl, onResize);\n    return $title ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"vds-title\",\n        title: $title,\n        ref: setRootEl\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioTitle, {\n        title: $title,\n        chapterTitle: $chapterTitle\n    }), isTextOverflowing && !isTransitionActive ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioTitle, {\n        title: $title,\n        chapterTitle: $chapterTitle\n    }) : null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null);\n}\nDefaultAudioTitle.displayName = \"DefaultAudioTitle\";\nfunction AudioTitle({ title, chapterTitle }) {\n    const slots = useDefaultAudioLayoutSlots();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"vds-title-text\"\n    }, slot(slots, \"title\", title), slot(slots, \"chapterTitle\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"vds-chapter-title\"\n    }, chapterTitle)));\n}\nAudioTitle.displayName = \"AudioTitle\";\nconst DefaultKeyboardDisplay = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ icons: Icons, ...props }, forwardRef)=>{\n    const [visible, setVisible] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false), [Icon, setIcon] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null), [count, setCount] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0), $lastKeyboardAction = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"lastKeyboardAction\");\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"DefaultKeyboardDisplay.useEffect\": ()=>{\n            setCount({\n                \"DefaultKeyboardDisplay.useEffect\": (n)=>n + 1\n            }[\"DefaultKeyboardDisplay.useEffect\"]);\n        }\n    }[\"DefaultKeyboardDisplay.useEffect\"], [\n        $lastKeyboardAction\n    ]);\n    const actionDataAttr = react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"DefaultKeyboardDisplay.useMemo[actionDataAttr]\": ()=>{\n            const action = $lastKeyboardAction?.action;\n            return action && visible ? (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.camelToKebabCase)(action) : null;\n        }\n    }[\"DefaultKeyboardDisplay.useMemo[actionDataAttr]\"], [\n        visible,\n        $lastKeyboardAction\n    ]);\n    const className = react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"DefaultKeyboardDisplay.useMemo[className]\": ()=>`vds-kb-action${!visible ? \" hidden\" : \"\"}${props.className ? ` ${props.className}` : \"\"}`\n    }[\"DefaultKeyboardDisplay.useMemo[className]\"], [\n        visible\n    ]);\n    const $$text = (0,_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.createComputed)(getText), $text = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)($$text);\n    (0,_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.createEffect)(()=>{\n        const Icon2 = getIcon(Icons);\n        setIcon(()=>Icon2);\n    }, [\n        Icons\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"DefaultKeyboardDisplay.useEffect\": ()=>{\n            setVisible(!!$lastKeyboardAction);\n            const id = setTimeout({\n                \"DefaultKeyboardDisplay.useEffect.id\": ()=>setVisible(false)\n            }[\"DefaultKeyboardDisplay.useEffect.id\"], 500);\n            return ({\n                \"DefaultKeyboardDisplay.useEffect\": ()=>{\n                    setVisible(false);\n                    window.clearTimeout(id);\n                }\n            })[\"DefaultKeyboardDisplay.useEffect\"];\n        }\n    }[\"DefaultKeyboardDisplay.useEffect\"], [\n        $lastKeyboardAction\n    ]);\n    return Icon ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.Primitive.div, {\n        ...props,\n        className,\n        \"data-action\": actionDataAttr,\n        ref: forwardRef\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-kb-text-wrapper\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-kb-text\"\n    }, $text)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-kb-bezel\",\n        key: count\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-kb-icon\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Icon, null)))) : null;\n});\nDefaultKeyboardDisplay.displayName = \"DefaultKeyboardDisplay\";\nfunction getText() {\n    const { $state } = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.useContext)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.mediaContext), action = $state.lastKeyboardAction()?.action, audioGain = $state.audioGain() ?? 1;\n    switch(action){\n        case \"toggleMuted\":\n            return $state.muted() ? \"0%\" : getVolumeText($state.volume(), audioGain);\n        case \"volumeUp\":\n        case \"volumeDown\":\n            return getVolumeText($state.volume(), audioGain);\n        default:\n            return \"\";\n    }\n}\nfunction getVolumeText(volume, gain) {\n    return `${Math.round(volume * gain * 100)}%`;\n}\nfunction getIcon(Icons) {\n    const { $state } = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.useContext)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.mediaContext), action = $state.lastKeyboardAction()?.action;\n    switch(action){\n        case \"togglePaused\":\n            return !$state.paused() ? Icons.Play : Icons.Pause;\n        case \"toggleMuted\":\n            return $state.muted() || $state.volume() === 0 ? Icons.Mute : $state.volume() >= 0.5 ? Icons.VolumeUp : Icons.VolumeDown;\n        case \"toggleFullscreen\":\n            return $state.fullscreen() ? Icons.EnterFullscreen : Icons.ExitFullscreen;\n        case \"togglePictureInPicture\":\n            return $state.pictureInPicture() ? Icons.EnterPiP : Icons.ExitPiP;\n        case \"toggleCaptions\":\n            return $state.hasCaptions() ? $state.textTrack() ? Icons.CaptionsOn : Icons.CaptionsOff : null;\n        case \"volumeUp\":\n            return Icons.VolumeUp;\n        case \"volumeDown\":\n            return Icons.VolumeDown;\n        case \"seekForward\":\n            return Icons.SeekForward;\n        case \"seekBackward\":\n            return Icons.SeekBackward;\n        default:\n            return null;\n    }\n}\nfunction DefaultTitle() {\n    const $started = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"started\"), $title = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"title\"), $hasChapters = (0,_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.useActiveTextTrack)(\"chapters\");\n    return $hasChapters && ($started || !$title) ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.ChapterTitle, {\n        className: \"vds-chapter-title\"\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Title, {\n        className: \"vds-chapter-title\"\n    });\n}\nDefaultTitle.displayName = \"DefaultTitle\";\nconst MediaLayout = createDefaultMediaLayout({\n    type: \"video\",\n    smLayoutWhen ({ width, height }) {\n        return width < 576 || height < 380;\n    },\n    renderLayout (props) {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(VideoLayout, {\n            ...props\n        });\n    }\n});\nfunction DefaultVideoLayout(props) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaLayout, {\n        ...props\n    });\n}\nDefaultVideoLayout.displayName = \"DefaultVideoLayout\";\nfunction VideoLayout({ streamType, isLoadLayout, isSmallLayout }) {\n    (0,_vidstack_BPOD0tS4_js__WEBPACK_IMPORTED_MODULE_2__.useLayoutName)(\"video\");\n    return isLoadLayout ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoLoadLayout, null) : streamType === \"unknown\" ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultBufferingIndicator, null) : isSmallLayout ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoSmallLayout, null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoLargeLayout, null);\n}\nVideoLayout.displayName = \"VideoLayout\";\nfunction DefaultVideoLargeLayout() {\n    const { menuGroup } = useDefaultLayoutContext(), baseSlots = useDefaultVideoLayoutSlots(), slots = {\n        ...baseSlots,\n        ...baseSlots?.largeLayout\n    };\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAnnouncer, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoGestures, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoKeyboardDisplay, null), slot(slots, \"bufferingIndicator\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultBufferingIndicator, null)), slot(slots, \"captions\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultCaptions, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Root$4, {\n        className: \"vds-controls\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"vds-controls-group\"\n    }, slot(slots, \"topControlsGroupStart\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), slot(slots, \"topControlsGroupCenter\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), slot(slots, \"topControlsGroupEnd\", null), menuGroup === \"top\" && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoMenus, {\n        slots\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"vds-controls-group\"\n    }, slot(slots, \"centerControlsGroupStart\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), slot(slots, \"centerControlsGroupCenter\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), slot(slots, \"centerControlsGroupEnd\", null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"vds-controls-group\"\n    }, slot(slots, \"timeSlider\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTimeSlider, null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"vds-controls-group\"\n    }, slot(slots, \"playButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultPlayButton, {\n        tooltip: \"top start\"\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVolumePopup, {\n        orientation: \"horizontal\",\n        tooltip: \"top\",\n        slots\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTimeInfo, {\n        slots\n    }), slot(slots, \"chapterTitle\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTitle, null)), slot(slots, \"captionButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultCaptionButton, {\n        tooltip: \"top\"\n    })), menuGroup === \"bottom\" && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoMenus, {\n        slots\n    }), slot(slots, \"airPlayButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAirPlayButton, {\n        tooltip: \"top\"\n    })), slot(slots, \"googleCastButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultGoogleCastButton, {\n        tooltip: \"top\"\n    })), slot(slots, \"downloadButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultDownloadButton, null)), slot(slots, \"pipButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultPIPButton, {\n        tooltip: \"top\"\n    })), slot(slots, \"fullscreenButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFullscreenButton, {\n        tooltip: \"top end\"\n    })))));\n}\nDefaultVideoLargeLayout.displayName = \"DefaultVideoLargeLayout\";\nfunction DefaultVideoSmallLayout() {\n    const baseSlots = useDefaultVideoLayoutSlots(), slots = {\n        ...baseSlots,\n        ...baseSlots?.smallLayout\n    };\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAnnouncer, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoGestures, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoKeyboardDisplay, null), slot(slots, \"bufferingIndicator\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultBufferingIndicator, null)), slot(slots, \"captions\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultCaptions, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Root$4, {\n        className: \"vds-controls\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"vds-controls-group\"\n    }, slot(slots, \"topControlsGroupStart\", null), slot(slots, \"airPlayButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultAirPlayButton, {\n        tooltip: \"top start\"\n    })), slot(slots, \"googleCastButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultGoogleCastButton, {\n        tooltip: \"top start\"\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), slot(slots, \"topControlsGroupCenter\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), slot(slots, \"captionButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultCaptionButton, {\n        tooltip: \"bottom\"\n    })), slot(slots, \"downloadButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultDownloadButton, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoMenus, {\n        slots\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVolumePopup, {\n        orientation: \"vertical\",\n        tooltip: \"bottom end\",\n        slots\n    }), slot(slots, \"topControlsGroupEnd\", null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"vds-controls-group\",\n        style: {\n            pointerEvents: \"none\"\n        }\n    }, slot(slots, \"centerControlsGroupStart\", null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), slot(slots, \"centerControlsGroupCenter\", null), slot(slots, \"playButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultPlayButton, {\n        tooltip: \"top\"\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), slot(slots, \"centerControlsGroupEnd\", null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultControlsSpacer, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"vds-controls-group\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTimeInfo, {\n        slots\n    }), slot(slots, \"chapterTitle\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTitle, null)), slot(slots, \"fullscreenButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultFullscreenButton, {\n        tooltip: \"top end\"\n    }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"vds-controls-group\"\n    }, slot(slots, \"timeSlider\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTimeSlider, null)))), slot(slots, \"startDuration\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultVideoStartDuration, null)));\n}\nDefaultVideoSmallLayout.displayName = \"DefaultVideoSmallLayout\";\nfunction DefaultVideoStartDuration() {\n    const $duration = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_5__.useMediaState)(\"duration\");\n    if ($duration === 0) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-start-duration\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Time, {\n        className: \"vds-time\",\n        type: \"duration\"\n    }));\n}\nDefaultVideoStartDuration.displayName = \"DefaultVideoStartDuration\";\nfunction DefaultVideoGestures() {\n    const { noGestures } = useDefaultLayoutContext();\n    if (noGestures) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-gestures\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Gesture, {\n        className: \"vds-gesture\",\n        event: \"pointerup\",\n        action: \"toggle:paused\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Gesture, {\n        className: \"vds-gesture\",\n        event: \"pointerup\",\n        action: \"toggle:controls\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Gesture, {\n        className: \"vds-gesture\",\n        event: \"dblpointerup\",\n        action: \"toggle:fullscreen\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Gesture, {\n        className: \"vds-gesture\",\n        event: \"dblpointerup\",\n        action: \"seek:-10\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Gesture, {\n        className: \"vds-gesture\",\n        event: \"dblpointerup\",\n        action: \"seek:10\"\n    }));\n}\nDefaultVideoGestures.displayName = \"DefaultVideoGestures\";\nfunction DefaultBufferingIndicator() {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-buffering-indicator\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Root$5, {\n        className: \"vds-buffering-spinner\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.Track, {\n        className: \"vds-buffering-track\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_6__.TrackFill, {\n        className: \"vds-buffering-track-fill\"\n    })));\n}\nDefaultBufferingIndicator.displayName = \"DefaultBufferingIndicator\";\nfunction DefaultVideoMenus({ slots }) {\n    const { isSmallLayout, noModal, menuGroup } = useDefaultLayoutContext(), side = menuGroup === \"top\" || isSmallLayout ? \"bottom\" : \"top\", tooltip = `${side} end`, placement = noModal ? `${side} end` : !isSmallLayout ? `${side} end` : null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, slot(slots, \"chaptersMenu\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultChaptersMenu, {\n        tooltip,\n        placement,\n        portalClass: \"vds-video-layout\"\n    })), slot(slots, \"settingsMenu\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultSettingsMenu, {\n        tooltip,\n        placement,\n        portalClass: \"vds-video-layout\",\n        slots\n    })));\n}\nDefaultVideoMenus.displayName = \"DefaultVideoMenus\";\nfunction DefaultVideoLoadLayout() {\n    const { isSmallLayout } = useDefaultLayoutContext(), baseSlots = useDefaultVideoLayoutSlots(), slots = {\n        ...baseSlots,\n        ...baseSlots?.[isSmallLayout ? \"smallLayout\" : \"largeLayout\"]\n    };\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"vds-load-container\"\n    }, slot(slots, \"bufferingIndicator\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultBufferingIndicator, null)), slot(slots, \"loadButton\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultPlayButton, {\n        tooltip: \"top\"\n    })));\n}\nDefaultVideoLoadLayout.displayName = \"DefaultVideoLoadLayout\";\nfunction DefaultVideoKeyboardDisplay() {\n    const { noKeyboardAnimations, icons, userPrefersKeyboardAnimations } = useDefaultLayoutContext(), $userPrefersKeyboardAnimations = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_4__.useSignal)(userPrefersKeyboardAnimations), disabled = noKeyboardAnimations || !$userPrefersKeyboardAnimations;\n    if (disabled || !icons.KeyboardDisplay) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultKeyboardDisplay, {\n        icons: icons.KeyboardDisplay\n    });\n}\nDefaultVideoKeyboardDisplay.displayName = \"DefaultVideoKeyboardDisplay\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BIA_pmri.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BM-FgV9W.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-BM-FgV9W.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCastContext: () => (/* binding */ getCastContext),\n/* harmony export */   getCastErrorMessage: () => (/* binding */ getCastErrorMessage),\n/* harmony export */   getCastSession: () => (/* binding */ getCastSession),\n/* harmony export */   getCastSessionMedia: () => (/* binding */ getCastSessionMedia),\n/* harmony export */   hasActiveCastSession: () => (/* binding */ hasActiveCastSession),\n/* harmony export */   listenCastContextEvent: () => (/* binding */ listenCastContextEvent),\n/* harmony export */   loader: () => (/* binding */ loader)\n/* harmony export */ });\n/* harmony import */ var _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-DUlCophs.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-DUlCophs.js\");\n/* harmony import */ var _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-D_bWd66h.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js\");\n/* __next_internal_client_entry_do_not_use__ getCastContext,getCastErrorMessage,getCastSession,getCastSessionMedia,hasActiveCastSession,listenCastContextEvent,loader auto */ \n\nfunction getCastFrameworkURL() {\n    return \"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\";\n}\nfunction hasLoadedCastFramework() {\n    return !!window.cast?.framework;\n}\nfunction isCastAvailable() {\n    return !!window.chrome?.cast?.isAvailable;\n}\nfunction isCastConnected() {\n    return getCastContext().getCastState() === cast.framework.CastState.CONNECTED;\n}\nfunction getCastContext() {\n    return window.cast.framework.CastContext.getInstance();\n}\nfunction getCastSession() {\n    return getCastContext().getCurrentSession();\n}\nfunction getCastSessionMedia() {\n    return getCastSession()?.getSessionObj().media[0];\n}\nfunction hasActiveCastSession(src) {\n    const contentId = getCastSessionMedia()?.media.contentId;\n    return contentId === src?.src;\n}\nfunction getDefaultCastOptions() {\n    return {\n        language: \"en-US\",\n        autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n        receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID,\n        resumeSavedSession: true,\n        androidReceiverCompatible: true\n    };\n}\nfunction getCastErrorMessage(code) {\n    const defaultMessage = `Google Cast Error Code: ${code}`;\n    {\n        switch(code){\n            case chrome.cast.ErrorCode.API_NOT_INITIALIZED:\n                return \"The API is not initialized.\";\n            case chrome.cast.ErrorCode.CANCEL:\n                return \"The operation was canceled by the user\";\n            case chrome.cast.ErrorCode.CHANNEL_ERROR:\n                return \"A channel to the receiver is not available.\";\n            case chrome.cast.ErrorCode.EXTENSION_MISSING:\n                return \"The Cast extension is not available.\";\n            case chrome.cast.ErrorCode.INVALID_PARAMETER:\n                return \"The parameters to the operation were not valid.\";\n            case chrome.cast.ErrorCode.RECEIVER_UNAVAILABLE:\n                return \"No receiver was compatible with the session request.\";\n            case chrome.cast.ErrorCode.SESSION_ERROR:\n                return \"A session could not be created, or a session was invalid.\";\n            case chrome.cast.ErrorCode.TIMEOUT:\n                return \"The operation timed out.\";\n            default:\n                return defaultMessage;\n        }\n    }\n}\nfunction listenCastContextEvent(type, handler) {\n    return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_0__.listenEvent)(getCastContext(), type, handler);\n}\nclass GoogleCastLoader {\n    #player;\n    /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */ get cast() {\n        return getCastContext();\n    }\n    mediaType() {\n        return \"video\";\n    }\n    canPlay(src) {\n        return _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_1__.IS_CHROME && !_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_1__.IS_IOS && (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_1__.canGoogleCastSrc)(src);\n    }\n    async prompt(ctx) {\n        let loadEvent, openEvent, errorEvent;\n        try {\n            loadEvent = await this.#loadCastFramework(ctx);\n            if (!this.#player) {\n                this.#player = new cast.framework.RemotePlayer();\n                new cast.framework.RemotePlayerController(this.#player);\n            }\n            openEvent = ctx.player.createEvent(\"google-cast-prompt-open\", {\n                trigger: loadEvent\n            });\n            ctx.player.dispatchEvent(openEvent);\n            this.#notifyRemoteStateChange(ctx, \"connecting\", openEvent);\n            await this.#showPrompt((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_0__.peek)(ctx.$props.googleCast));\n            ctx.$state.remotePlaybackInfo.set({\n                deviceName: getCastSession()?.getCastDevice().friendlyName\n            });\n            if (isCastConnected()) this.#notifyRemoteStateChange(ctx, \"connected\", openEvent);\n        } catch (code) {\n            const error = code instanceof Error ? code : this.#createError((code + \"\").toUpperCase(), \"Prompt failed.\");\n            errorEvent = ctx.player.createEvent(\"google-cast-prompt-error\", {\n                detail: error,\n                trigger: openEvent ?? loadEvent,\n                cancelable: true\n            });\n            ctx.player.dispatch(errorEvent);\n            this.#notifyRemoteStateChange(ctx, isCastConnected() ? \"connected\" : \"disconnected\", errorEvent);\n            throw error;\n        } finally{\n            ctx.player.dispatch(\"google-cast-prompt-close\", {\n                trigger: errorEvent ?? openEvent ?? loadEvent\n            });\n        }\n    }\n    async load(ctx) {\n        if (_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_1__.IS_SERVER) {\n            throw Error(\"[vidstack] can not load google cast provider server-side\");\n        }\n        if (!this.#player) {\n            throw Error(\"[vidstack] google cast player was not initialized\");\n        }\n        return new (await __webpack_require__.e(/*! import() */ \"vendor-chunks/@vidstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./vidstack-CBaoV8XT.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CBaoV8XT.js\"))).GoogleCastProvider(this.#player, ctx);\n    }\n    async #loadCastFramework(ctx) {\n        if (hasLoadedCastFramework()) return;\n        const loadStartEvent = ctx.player.createEvent(\"google-cast-load-start\");\n        ctx.player.dispatch(loadStartEvent);\n        await (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_1__.loadScript)(getCastFrameworkURL());\n        await customElements.whenDefined(\"google-cast-launcher\");\n        const loadedEvent = ctx.player.createEvent(\"google-cast-loaded\", {\n            trigger: loadStartEvent\n        });\n        ctx.player.dispatch(loadedEvent);\n        if (!isCastAvailable()) {\n            throw this.#createError(\"CAST_NOT_AVAILABLE\", \"Google Cast not available on this platform.\");\n        }\n        return loadedEvent;\n    }\n    async #showPrompt(options) {\n        this.#setOptions(options);\n        const errorCode = await this.cast.requestSession();\n        if (errorCode) {\n            throw this.#createError(errorCode.toUpperCase(), getCastErrorMessage(errorCode));\n        }\n    }\n    #setOptions(options) {\n        this.cast?.setOptions({\n            ...getDefaultCastOptions(),\n            ...options\n        });\n    }\n    #notifyRemoteStateChange(ctx, state, trigger) {\n        const detail = {\n            type: \"google-cast\",\n            state\n        };\n        ctx.notify(\"remote-playback-change\", detail, trigger);\n    }\n    #createError(code, message) {\n        const error = Error(message);\n        error.code = code;\n        return error;\n    }\n    constructor(){\n        this.name = \"google-cast\";\n    }\n}\nvar loader = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    GoogleCastLoader: GoogleCastLoader\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BM-FgV9W.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BPOD0tS4.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-BPOD0tS4.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useActive: () => (/* binding */ useActive),\n/* harmony export */   useClassName: () => (/* binding */ useClassName),\n/* harmony export */   useColorSchemePreference: () => (/* binding */ useColorSchemePreference),\n/* harmony export */   useLayoutName: () => (/* binding */ useLayoutName),\n/* harmony export */   useResizeObserver: () => (/* binding */ useResizeObserver),\n/* harmony export */   useTransitionActive: () => (/* binding */ useTransitionActive)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-D_bWd66h.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js\");\n/* harmony import */ var _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack--AIGOV5A.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack--AIGOV5A.js\");\n/* __next_internal_client_entry_do_not_use__ useActive,useClassName,useColorSchemePreference,useLayoutName,useResizeObserver,useTransitionActive auto */ \n\n\nfunction useClassName(el, className) {\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useClassName.useEffect\": ()=>{\n            if (!el || !className) return;\n            const tokens = className.split(\" \");\n            for (const token of tokens)el.classList.add(token);\n            return ({\n                \"useClassName.useEffect\": ()=>{\n                    for (const token of tokens)el.classList.remove(token);\n                }\n            })[\"useClassName.useEffect\"];\n        }\n    }[\"useClassName.useEffect\"], [\n        el,\n        className\n    ]);\n}\nfunction useResizeObserver(el, callback) {\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useResizeObserver.useEffect\": ()=>{\n            if (!el) return;\n            callback();\n            const observer = new ResizeObserver((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.animationFrameThrottle)(callback));\n            observer.observe(el);\n            return ({\n                \"useResizeObserver.useEffect\": ()=>observer.disconnect()\n            })[\"useResizeObserver.useEffect\"];\n        }\n    }[\"useResizeObserver.useEffect\"], [\n        el,\n        callback\n    ]);\n}\nfunction useTransitionActive(el) {\n    const [isActive, setIsActive] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useTransitionActive.useEffect\": ()=>{\n            if (!el) return;\n            const events = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(el).add(\"transitionstart\", {\n                \"useTransitionActive.useEffect.events\": ()=>setIsActive(true)\n            }[\"useTransitionActive.useEffect.events\"]).add(\"transitionend\", {\n                \"useTransitionActive.useEffect.events\": ()=>setIsActive(false)\n            }[\"useTransitionActive.useEffect.events\"]);\n            return ({\n                \"useTransitionActive.useEffect\": ()=>events.abort()\n            })[\"useTransitionActive.useEffect\"];\n        }\n    }[\"useTransitionActive.useEffect\"], [\n        el\n    ]);\n    return isActive;\n}\nfunction useMouseEnter(el) {\n    const [isMouseEnter, setIsMouseEnter] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useMouseEnter.useEffect\": ()=>{\n            if (!el) return;\n            const events = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(el).add(\"mouseenter\", {\n                \"useMouseEnter.useEffect.events\": ()=>setIsMouseEnter(true)\n            }[\"useMouseEnter.useEffect.events\"]).add(\"mouseleave\", {\n                \"useMouseEnter.useEffect.events\": ()=>setIsMouseEnter(false)\n            }[\"useMouseEnter.useEffect.events\"]);\n            return ({\n                \"useMouseEnter.useEffect\": ()=>events.abort()\n            })[\"useMouseEnter.useEffect\"];\n        }\n    }[\"useMouseEnter.useEffect\"], [\n        el\n    ]);\n    return isMouseEnter;\n}\nfunction useFocusIn(el) {\n    const [isFocusIn, setIsFocusIn] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useFocusIn.useEffect\": ()=>{\n            if (!el) return;\n            const events = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(el).add(\"focusin\", {\n                \"useFocusIn.useEffect.events\": ()=>setIsFocusIn(true)\n            }[\"useFocusIn.useEffect.events\"]).add(\"focusout\", {\n                \"useFocusIn.useEffect.events\": ()=>setIsFocusIn(false)\n            }[\"useFocusIn.useEffect.events\"]);\n            return ({\n                \"useFocusIn.useEffect\": ()=>events.abort()\n            })[\"useFocusIn.useEffect\"];\n        }\n    }[\"useFocusIn.useEffect\"], [\n        el\n    ]);\n    return isFocusIn;\n}\nfunction useActive(el) {\n    const isMouseEnter = useMouseEnter(el), isFocusIn = useFocusIn(el), prevMouseEnter = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    if (prevMouseEnter.current && !isMouseEnter) return false;\n    prevMouseEnter.current = isMouseEnter;\n    return isMouseEnter || isFocusIn;\n}\nfunction useColorSchemePreference() {\n    const [colorScheme, setColorScheme] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\"dark\");\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useColorSchemePreference.useEffect\": ()=>{\n            const media = window.matchMedia(\"(prefers-color-scheme: light)\");\n            function onChange() {\n                setColorScheme(media.matches ? \"light\" : \"dark\");\n            }\n            onChange();\n            return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(media, \"change\", onChange);\n        }\n    }[\"useColorSchemePreference.useEffect\"], []);\n    return colorScheme;\n}\nfunction useLayoutName(name) {\n    const player = (0,_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_2__.useMediaPlayer)();\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useLayoutName.useEffect\": ()=>{\n            if (!player) return;\n            return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)({\n                \"useLayoutName.useEffect\": ()=>{\n                    const el = player.$el;\n                    el?.setAttribute(\"data-layout\", name);\n                    return ({\n                        \"useLayoutName.useEffect\": ()=>el?.removeAttribute(\"data-layout\")\n                    })[\"useLayoutName.useEffect\"];\n                }\n            }[\"useLayoutName.useEffect\"]);\n        }\n    }[\"useLayoutName.useEffect\"], [\n        player\n    ]);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BPOD0tS4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Bt-dOpts.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-Bt-dOpts.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VimeoProvider: () => (/* binding */ VimeoProvider)\n/* harmony export */ });\n/* harmony import */ var _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-D_bWd66h.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js\");\n/* harmony import */ var _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack-DUlCophs.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-DUlCophs.js\");\n/* harmony import */ var _vidstack_D8t5kEKd_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-D8t5kEKd.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D8t5kEKd.js\");\n/* harmony import */ var _vidstack_krOAtKMi_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./vidstack-krOAtKMi.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-krOAtKMi.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ VimeoProvider auto */ \n\n\n\n\n\nconst trackedVimeoEvents = [\n    \"bufferend\",\n    \"bufferstart\",\n    // 'cuechange',\n    \"durationchange\",\n    \"ended\",\n    \"enterpictureinpicture\",\n    \"error\",\n    \"fullscreenchange\",\n    \"leavepictureinpicture\",\n    \"loaded\",\n    // 'loadeddata',\n    // 'loadedmetadata',\n    // 'loadstart',\n    \"playProgress\",\n    \"loadProgress\",\n    \"pause\",\n    \"play\",\n    \"playbackratechange\",\n    // 'progress',\n    \"qualitychange\",\n    \"seeked\",\n    \"seeking\",\n    // 'texttrackchange',\n    \"timeupdate\",\n    \"volumechange\",\n    \"waiting\"\n];\nclass VimeoProvider extends _vidstack_D8t5kEKd_js__WEBPACK_IMPORTED_MODULE_1__.EmbedProvider {\n    #ctx;\n    #videoId;\n    #pro;\n    #hash;\n    #currentSrc;\n    #fullscreenActive;\n    #seekableRange;\n    #timeRAF;\n    #currentCue;\n    #chaptersTrack;\n    #promises;\n    #videoInfoPromise;\n    constructor(iframe, ctx){\n        super(iframe), this.$$PROVIDER_TYPE = \"VIMEO\", this.scope = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createScope)(), this.#videoId = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.signal)(\"\"), this.#pro = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.signal)(false), this.#hash = null, this.#currentSrc = null, this.#fullscreenActive = false, this.#seekableRange = new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.TimeRange(0, 0), this.#timeRAF = new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.RAFLoop(this.#onAnimationFrame.bind(this)), this.#currentCue = null, this.#chaptersTrack = null, this.#promises = /* @__PURE__ */ new Map(), this.#videoInfoPromise = null, /**\n   * Whether tracking session data should be enabled on the embed, including cookies and analytics.\n   * This is turned off by default to be GDPR-compliant.\n   *\n   * @defaultValue `false`\n   */ this.cookies = false, this.title = true, this.byline = true, this.portrait = true, this.color = \"00ADEF\", // Embed will sometimes dispatch 0 at end of playback.\n        this.#preventTimeUpdates = false;\n        this.#ctx = ctx;\n        const self = this;\n        this.fullscreen = {\n            get active () {\n                return self.#fullscreenActive;\n            },\n            supported: true,\n            enter: ()=>this.#remote(\"requestFullscreen\"),\n            exit: ()=>this.#remote(\"exitFullscreen\")\n        };\n    }\n    get type() {\n        return \"vimeo\";\n    }\n    get currentSrc() {\n        return this.#currentSrc;\n    }\n    get videoId() {\n        return this.#videoId();\n    }\n    get hash() {\n        return this.#hash;\n    }\n    get isPro() {\n        return this.#pro();\n    }\n    preconnect() {\n        (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.preconnect)(this.getOrigin());\n    }\n    setup() {\n        super.setup();\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.effect)(this.#watchVideoId.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.effect)(this.#watchVideoInfo.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.effect)(this.#watchPro.bind(this));\n        this.#ctx.notify(\"provider-setup\", this);\n    }\n    destroy() {\n        this.#reset();\n        this.fullscreen = void 0;\n        const message = \"provider destroyed\";\n        for (const promises of this.#promises.values()){\n            for (const { reject } of promises)reject(message);\n        }\n        this.#promises.clear();\n        this.#remote(\"destroy\");\n    }\n    async play() {\n        return this.#remote(\"play\");\n    }\n    async pause() {\n        return this.#remote(\"pause\");\n    }\n    setMuted(muted) {\n        this.#remote(\"setMuted\", muted);\n    }\n    setCurrentTime(time) {\n        this.#remote(\"seekTo\", time);\n        this.#ctx.notify(\"seeking\", time);\n    }\n    setVolume(volume) {\n        this.#remote(\"setVolume\", volume);\n        this.#remote(\"setMuted\", (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.peek)(this.#ctx.$state.muted));\n    }\n    setPlaybackRate(rate) {\n        this.#remote(\"setPlaybackRate\", rate);\n    }\n    async loadSource(src) {\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.isString)(src.src)) {\n            this.#currentSrc = null;\n            this.#hash = null;\n            this.#videoId.set(\"\");\n            return;\n        }\n        const { videoId, hash } = (0,_vidstack_krOAtKMi_js__WEBPACK_IMPORTED_MODULE_4__.resolveVimeoVideoId)(src.src);\n        this.#videoId.set(videoId ?? \"\");\n        this.#hash = hash ?? null;\n        this.#currentSrc = src;\n    }\n    #watchVideoId() {\n        this.#reset();\n        const videoId = this.#videoId();\n        if (!videoId) {\n            this.src.set(\"\");\n            return;\n        }\n        this.src.set(`${this.getOrigin()}/video/${videoId}`);\n        this.#ctx.notify(\"load-start\");\n    }\n    #watchVideoInfo() {\n        const videoId = this.#videoId();\n        if (!videoId) return;\n        const promise = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.deferredPromise)(), abort = new AbortController();\n        this.#videoInfoPromise = promise;\n        (0,_vidstack_krOAtKMi_js__WEBPACK_IMPORTED_MODULE_4__.getVimeoVideoInfo)(videoId, abort, this.#hash).then((info)=>{\n            promise.resolve(info);\n        }).catch((e)=>{\n            promise.reject();\n            {\n                this.#ctx.logger?.warnGroup(`Failed to fetch vimeo video info for id \\`${videoId}\\`.`).labelledLog(\"Error\", e).dispatch();\n            }\n        });\n        return ()=>{\n            promise.reject();\n            abort.abort();\n        };\n    }\n    #watchPro() {\n        const isPro = this.#pro(), { $state, qualities } = this.#ctx;\n        $state.canSetPlaybackRate.set(isPro);\n        qualities[_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.ListSymbol.setReadonly](!isPro);\n        if (isPro) {\n            return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.listenEvent)(qualities, \"change\", ()=>{\n                if (qualities.auto) return;\n                const id = qualities.selected?.id;\n                if (id) this.#remote(\"setQuality\", id);\n            });\n        }\n    }\n    getOrigin() {\n        return \"https://player.vimeo.com\";\n    }\n    buildParams() {\n        const { keyDisabled } = this.#ctx.$props, { playsInline, nativeControls } = this.#ctx.$state, showControls = nativeControls();\n        return {\n            title: this.title,\n            byline: this.byline,\n            color: this.color,\n            portrait: this.portrait,\n            controls: showControls,\n            h: this.hash,\n            keyboard: showControls && !keyDisabled(),\n            transparent: true,\n            playsinline: playsInline(),\n            dnt: !this.cookies\n        };\n    }\n    #onAnimationFrame() {\n        this.#remote(\"getCurrentTime\");\n    }\n    #preventTimeUpdates;\n    #onTimeUpdate(time, trigger) {\n        if (this.#preventTimeUpdates && time === 0) return;\n        const { realCurrentTime, paused, bufferedEnd, seekableEnd, live } = this.#ctx.$state;\n        if (realCurrentTime() === time) return;\n        const prevTime = realCurrentTime();\n        this.#ctx.notify(\"time-change\", time, trigger);\n        if (Math.abs(prevTime - time) > 1.5) {\n            this.#ctx.notify(\"seeking\", time, trigger);\n            if (!paused() && bufferedEnd() < time) {\n                this.#ctx.notify(\"waiting\", void 0, trigger);\n            }\n        }\n        if (!live() && seekableEnd() - time < 0.01) {\n            this.#ctx.notify(\"end\", void 0, trigger);\n            this.#preventTimeUpdates = true;\n            setTimeout(()=>{\n                this.#preventTimeUpdates = false;\n            }, 500);\n        }\n    }\n    #onSeeked(time, trigger) {\n        this.#ctx.notify(\"seeked\", time, trigger);\n    }\n    #onLoaded(trigger) {\n        const videoId = this.#videoId();\n        this.#videoInfoPromise?.promise.then((info)=>{\n            if (!info) return;\n            const { title, poster, duration, pro } = info;\n            this.#pro.set(pro);\n            this.#ctx.notify(\"title-change\", title, trigger);\n            this.#ctx.notify(\"poster-change\", poster, trigger);\n            this.#ctx.notify(\"duration-change\", duration, trigger);\n            this.#onReady(duration, trigger);\n        }).catch(()=>{\n            if (videoId !== this.#videoId()) return;\n            this.#remote(\"getVideoTitle\");\n            this.#remote(\"getDuration\");\n        });\n    }\n    #onReady(duration, trigger) {\n        const { nativeControls } = this.#ctx.$state, showEmbedControls = nativeControls();\n        this.#seekableRange = new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.TimeRange(0, duration);\n        const detail = {\n            buffered: new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.TimeRange(0, 0),\n            seekable: this.#seekableRange,\n            duration\n        };\n        this.#ctx.delegate.ready(detail, trigger);\n        if (!showEmbedControls) {\n            this.#remote(\"_hideOverlay\");\n        }\n        this.#remote(\"getQualities\");\n        this.#remote(\"getChapters\");\n    }\n    #onMethod(method, data, trigger) {\n        switch(method){\n            case \"getVideoTitle\":\n                const videoTitle = data;\n                this.#ctx.notify(\"title-change\", videoTitle, trigger);\n                break;\n            case \"getDuration\":\n                const duration = data;\n                if (!this.#ctx.$state.canPlay()) {\n                    this.#onReady(duration, trigger);\n                } else {\n                    this.#ctx.notify(\"duration-change\", duration, trigger);\n                }\n                break;\n            case \"getCurrentTime\":\n                this.#onTimeUpdate(data, trigger);\n                break;\n            case \"getBuffered\":\n                if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(data) && data.length) {\n                    this.#onLoadProgress(data[data.length - 1][1], trigger);\n                }\n                break;\n            case \"setMuted\":\n                this.#onVolumeChange((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.peek)(this.#ctx.$state.volume), data, trigger);\n                break;\n            // case 'getTextTracks':\n            //   this.#onTextTracksChange(data as VimeoTextTrack[], trigger);\n            //   break;\n            case \"getChapters\":\n                this.#onChaptersChange(data);\n                break;\n            case \"getQualities\":\n                this.#onQualitiesChange(data, trigger);\n                break;\n        }\n        this.#getPromise(method)?.resolve();\n    }\n    #attachListeners() {\n        for (const type of trackedVimeoEvents){\n            this.#remote(\"addEventListener\", type);\n        }\n    }\n    #onPause(trigger) {\n        this.#timeRAF.stop();\n        this.#ctx.notify(\"pause\", void 0, trigger);\n    }\n    #onPlay(trigger) {\n        this.#timeRAF.start();\n        this.#ctx.notify(\"play\", void 0, trigger);\n    }\n    #onPlayProgress(trigger) {\n        const { paused } = this.#ctx.$state;\n        if (!paused() && !this.#preventTimeUpdates) {\n            this.#ctx.notify(\"playing\", void 0, trigger);\n        }\n    }\n    #onLoadProgress(buffered, trigger) {\n        const detail = {\n            buffered: new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.TimeRange(0, buffered),\n            seekable: this.#seekableRange\n        };\n        this.#ctx.notify(\"progress\", detail, trigger);\n    }\n    #onBufferStart(trigger) {\n        this.#ctx.notify(\"waiting\", void 0, trigger);\n    }\n    #onBufferEnd(trigger) {\n        const { paused } = this.#ctx.$state;\n        if (!paused()) this.#ctx.notify(\"playing\", void 0, trigger);\n    }\n    #onWaiting(trigger) {\n        const { paused } = this.#ctx.$state;\n        if (paused()) {\n            this.#ctx.notify(\"play\", void 0, trigger);\n        }\n        this.#ctx.notify(\"waiting\", void 0, trigger);\n    }\n    #onVolumeChange(volume, muted, trigger) {\n        const detail = {\n            volume,\n            muted\n        };\n        this.#ctx.notify(\"volume-change\", detail, trigger);\n    }\n    // #onTextTrackChange(track: VimeoTextTrack, trigger: Event) {\n    //   const textTrack = this.#ctx.textTracks.toArray().find((t) => t.language === track.language);\n    //   if (textTrack) textTrack.mode = track.mode;\n    // }\n    // #onTextTracksChange(tracks: VimeoTextTrack[], trigger: Event) {\n    //   for (const init of tracks) {\n    //     const textTrack = new TextTrack({\n    //       ...init,\n    //       label: init.label.replace('auto-generated', 'auto'),\n    //     });\n    //     textTrack[TextTrackSymbol.readyState] = 2;\n    //     this.#ctx.textTracks.add(textTrack, trigger);\n    //     textTrack.setMode(init.mode, trigger);\n    //   }\n    // }\n    // #onCueChange(cue: VimeoTextCue, trigger: Event) {\n    //   const { textTracks, $state } = this.#ctx,\n    //     { currentTime } = $state,\n    //     track = textTracks.selected;\n    //   if (this.#currentCue) track?.removeCue(this.#currentCue, trigger);\n    //   this.#currentCue = new window.VTTCue(currentTime(), Number.MAX_SAFE_INTEGER, cue.text);\n    //   track?.addCue(this.#currentCue, trigger);\n    // }\n    #onChaptersChange(chapters) {\n        this.#removeChapters();\n        if (!chapters.length) return;\n        const track = new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.TextTrack({\n            kind: \"chapters\",\n            default: true\n        }), { seekableEnd } = this.#ctx.$state;\n        for(let i = 0; i < chapters.length; i++){\n            const chapter = chapters[i], nextChapter = chapters[i + 1];\n            track.addCue(new window.VTTCue(chapter.startTime, nextChapter?.startTime ?? seekableEnd(), chapter.title));\n        }\n        this.#chaptersTrack = track;\n        this.#ctx.textTracks.add(track);\n    }\n    #removeChapters() {\n        if (!this.#chaptersTrack) return;\n        this.#ctx.textTracks.remove(this.#chaptersTrack);\n        this.#chaptersTrack = null;\n    }\n    #onQualitiesChange(qualities, trigger) {\n        this.#ctx.qualities[_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.QualitySymbol.enableAuto] = qualities.some((q)=>q.id === \"auto\") ? ()=>this.#remote(\"setQuality\", \"auto\") : void 0;\n        for (const quality of qualities){\n            if (quality.id === \"auto\") continue;\n            const height = +quality.id.slice(0, -1);\n            if (isNaN(height)) continue;\n            this.#ctx.qualities[_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.ListSymbol.add]({\n                id: quality.id,\n                width: height * (16 / 9),\n                height,\n                codec: \"avc1,h.264\",\n                bitrate: -1\n            }, trigger);\n        }\n        this.#onQualityChange(qualities.find((q)=>q.active), trigger);\n    }\n    #onQualityChange({ id } = {}, trigger) {\n        if (!id) return;\n        const isAuto = id === \"auto\", newQuality = this.#ctx.qualities.getById(id);\n        if (isAuto) {\n            this.#ctx.qualities[_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.QualitySymbol.setAuto](isAuto, trigger);\n            this.#ctx.qualities[_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.ListSymbol.select](void 0, true, trigger);\n        } else {\n            this.#ctx.qualities[_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.ListSymbol.select](newQuality ?? void 0, true, trigger);\n        }\n    }\n    #onEvent(event, payload, trigger) {\n        switch(event){\n            case \"ready\":\n                this.#attachListeners();\n                break;\n            case \"loaded\":\n                this.#onLoaded(trigger);\n                break;\n            case \"play\":\n                this.#onPlay(trigger);\n                break;\n            case \"playProgress\":\n                this.#onPlayProgress(trigger);\n                break;\n            case \"pause\":\n                this.#onPause(trigger);\n                break;\n            case \"loadProgress\":\n                this.#onLoadProgress(payload.seconds, trigger);\n                break;\n            case \"waiting\":\n                this.#onWaiting(trigger);\n                break;\n            case \"bufferstart\":\n                this.#onBufferStart(trigger);\n                break;\n            case \"bufferend\":\n                this.#onBufferEnd(trigger);\n                break;\n            case \"volumechange\":\n                this.#onVolumeChange(payload.volume, (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.peek)(this.#ctx.$state.muted), trigger);\n                break;\n            case \"durationchange\":\n                this.#seekableRange = new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.TimeRange(0, payload.duration);\n                this.#ctx.notify(\"duration-change\", payload.duration, trigger);\n                break;\n            case \"playbackratechange\":\n                this.#ctx.notify(\"rate-change\", payload.playbackRate, trigger);\n                break;\n            case \"qualitychange\":\n                this.#onQualityChange(payload, trigger);\n                break;\n            case \"fullscreenchange\":\n                this.#fullscreenActive = payload.fullscreen;\n                this.#ctx.notify(\"fullscreen-change\", payload.fullscreen, trigger);\n                break;\n            case \"enterpictureinpicture\":\n                this.#ctx.notify(\"picture-in-picture-change\", true, trigger);\n                break;\n            case \"leavepictureinpicture\":\n                this.#ctx.notify(\"picture-in-picture-change\", false, trigger);\n                break;\n            case \"ended\":\n                this.#ctx.notify(\"end\", void 0, trigger);\n                break;\n            case \"error\":\n                this.#onError(payload, trigger);\n                break;\n            case \"seek\":\n            case \"seeked\":\n                this.#onSeeked(payload.seconds, trigger);\n                break;\n        }\n    }\n    #onError(error, trigger) {\n        const { message, method } = error;\n        if (method === \"setPlaybackRate\") {\n            this.#pro.set(false);\n        }\n        if (method) {\n            this.#getPromise(method)?.reject(message);\n        }\n        {\n            this.#ctx.logger?.errorGroup(`[vimeo]: ${message}`).labelledLog(\"Error\", error).labelledLog(\"Provider\", this).labelledLog(\"Event\", trigger).dispatch();\n        }\n    }\n    onMessage(message, event) {\n        if (message.event) {\n            this.#onEvent(message.event, message.data, event);\n        } else if (message.method) {\n            this.#onMethod(message.method, message.value, event);\n        }\n    }\n    onLoad() {}\n    async #remote(command, arg) {\n        let promise = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.deferredPromise)(), promises = this.#promises.get(command);\n        if (!promises) this.#promises.set(command, promises = []);\n        promises.push(promise);\n        this.postMessage({\n            method: command,\n            value: arg\n        });\n        return promise.promise;\n    }\n    #reset() {\n        this.#timeRAF.stop();\n        this.#seekableRange = new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.TimeRange(0, 0);\n        this.#videoInfoPromise = null;\n        this.#currentCue = null;\n        this.#pro.set(false);\n        this.#removeChapters();\n    }\n    #getPromise(command) {\n        return this.#promises.get(command)?.shift();\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Bt-dOpts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CBF7iUqu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-CBF7iUqu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Icon: () => (/* binding */ Icon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Icon auto */ \nconst Icon = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, ref)=>{\n    const { width, height, size = null, paths, ...restProps } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        viewBox: \"0 0 32 32\",\n        ...restProps,\n        width: width ?? size,\n        height: height ?? size,\n        fill: \"none\",\n        \"aria-hidden\": \"true\",\n        focusable: \"false\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        ref,\n        dangerouslySetInnerHTML: {\n            __html: paths\n        }\n    });\n});\nIcon.displayName = \"VidstackIcon\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9jaHVua3Mvdmlkc3RhY2stQ0JGN2lVcXUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7MERBRStCO0FBRS9CLE1BQU1DLE9BQU8sYUFBYSxpQkFBR0QsNkNBQWdCLENBQUMsQ0FBQ0csT0FBT0M7SUFDcEQsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxJQUFJLEVBQUVDLEtBQUssRUFBRSxHQUFHQyxXQUFXLEdBQUdOO0lBQzVELHFCQUFPSCxnREFBbUIsQ0FBQyxPQUFPO1FBQ2hDVyxTQUFTO1FBQ1QsR0FBR0YsU0FBUztRQUNaSixPQUFPQSxTQUFTRTtRQUNoQkQsUUFBUUEsVUFBVUM7UUFDbEJLLE1BQU07UUFDTixlQUFlO1FBQ2ZDLFdBQVc7UUFDWEMsT0FBTztRQUNQVjtRQUNBVyx5QkFBeUI7WUFBRUMsUUFBUVI7UUFBTTtJQUMzQztBQUNGO0FBQ0FQLEtBQUtnQixXQUFXLEdBQUc7QUFFSCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxsb3JkclxcRG93bmxvYWRzXFxBbmlUZWFtcy1tYWluXFxub2RlX21vZHVsZXNcXEB2aWRzdGFja1xccmVhY3RcXGRldlxcY2h1bmtzXFx2aWRzdGFjay1DQkY3aVVxdS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIlxuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IEljb24gPSAvKiBAX19QVVJFX18gKi8gUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICBjb25zdCB7IHdpZHRoLCBoZWlnaHQsIHNpemUgPSBudWxsLCBwYXRocywgLi4ucmVzdFByb3BzIH0gPSBwcm9wcztcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwge1xuICAgIHZpZXdCb3g6IFwiMCAwIDMyIDMyXCIsXG4gICAgLi4ucmVzdFByb3BzLFxuICAgIHdpZHRoOiB3aWR0aCA/PyBzaXplLFxuICAgIGhlaWdodDogaGVpZ2h0ID8/IHNpemUsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIixcbiAgICBmb2N1c2FibGU6IFwiZmFsc2VcIixcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIHJlZixcbiAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDogeyBfX2h0bWw6IHBhdGhzIH1cbiAgfSk7XG59KTtcbkljb24uZGlzcGxheU5hbWUgPSBcIlZpZHN0YWNrSWNvblwiO1xuXG5leHBvcnQgeyBJY29uIH07XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJJY29uIiwiZm9yd2FyZFJlZiIsInByb3BzIiwicmVmIiwid2lkdGgiLCJoZWlnaHQiLCJzaXplIiwicGF0aHMiLCJyZXN0UHJvcHMiLCJjcmVhdGVFbGVtZW50Iiwidmlld0JveCIsImZpbGwiLCJmb2N1c2FibGUiLCJ4bWxucyIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwiZGlzcGxheU5hbWUiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CBF7iUqu.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CBaoV8XT.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-CBaoV8XT.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleCastProvider: () => (/* binding */ GoogleCastProvider)\n/* harmony export */ });\n/* harmony import */ var _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-D_bWd66h.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js\");\n/* harmony import */ var _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-DUlCophs.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-DUlCophs.js\");\n/* harmony import */ var _vidstack_BM_FgV9W_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack-BM-FgV9W.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BM-FgV9W.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ GoogleCastProvider auto */ \n\n\n\n\nclass GoogleCastMediaInfoBuilder {\n    #info;\n    constructor(src){\n        this.#info = new chrome.cast.media.MediaInfo(src.src, src.type);\n    }\n    build() {\n        return this.#info;\n    }\n    setStreamType(streamType) {\n        if (streamType.includes(\"live\")) {\n            this.#info.streamType = chrome.cast.media.StreamType.LIVE;\n        } else {\n            this.#info.streamType = chrome.cast.media.StreamType.BUFFERED;\n        }\n        return this;\n    }\n    setTracks(tracks) {\n        this.#info.tracks = tracks.map(this.#buildCastTrack);\n        return this;\n    }\n    setMetadata(title, poster) {\n        this.#info.metadata = new chrome.cast.media.GenericMediaMetadata();\n        this.#info.metadata.title = title;\n        this.#info.metadata.images = [\n            {\n                url: poster\n            }\n        ];\n        return this;\n    }\n    #buildCastTrack(track, trackId) {\n        const castTrack = new chrome.cast.media.Track(trackId, chrome.cast.media.TrackType.TEXT);\n        castTrack.name = track.label;\n        castTrack.trackContentId = track.src;\n        castTrack.trackContentType = \"text/vtt\";\n        castTrack.language = track.language;\n        castTrack.subtype = track.kind.toUpperCase();\n        return castTrack;\n    }\n}\nclass GoogleCastTracksManager {\n    #cast;\n    #ctx;\n    #onNewLocalTracks;\n    constructor(cast1, ctx, onNewLocalTracks){\n        this.#cast = cast1;\n        this.#ctx = ctx;\n        this.#onNewLocalTracks = onNewLocalTracks;\n    }\n    setup() {\n        const syncRemoteActiveIds = this.syncRemoteActiveIds.bind(this);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this.#ctx.audioTracks, \"change\", syncRemoteActiveIds);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this.#ctx.textTracks, \"mode-change\", syncRemoteActiveIds);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#syncLocalTracks.bind(this));\n    }\n    getLocalTextTracks() {\n        return this.#ctx.$state.textTracks().filter((track)=>track.src && track.type === \"vtt\");\n    }\n    #getLocalAudioTracks() {\n        return this.#ctx.$state.audioTracks();\n    }\n    #getRemoteTracks(type) {\n        const tracks = this.#cast.mediaInfo?.tracks ?? [];\n        return type ? tracks.filter((track)=>track.type === type) : tracks;\n    }\n    #getRemoteActiveIds() {\n        const activeIds = [], activeLocalAudioTrack = this.#getLocalAudioTracks().find((track)=>track.selected), activeLocalTextTracks = this.getLocalTextTracks().filter((track)=>track.mode === \"showing\");\n        if (activeLocalAudioTrack) {\n            const remoteAudioTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.AUDIO), remoteAudioTrack = this.#findRemoteTrack(remoteAudioTracks, activeLocalAudioTrack);\n            if (remoteAudioTrack) activeIds.push(remoteAudioTrack.trackId);\n        }\n        if (activeLocalTextTracks?.length) {\n            const remoteTextTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.TEXT);\n            if (remoteTextTracks.length) {\n                for (const localTrack of activeLocalTextTracks){\n                    const remoteTextTrack = this.#findRemoteTrack(remoteTextTracks, localTrack);\n                    if (remoteTextTrack) activeIds.push(remoteTextTrack.trackId);\n                }\n            }\n        }\n        return activeIds;\n    }\n    #syncLocalTracks() {\n        const localTextTracks = this.getLocalTextTracks();\n        if (!this.#cast.isMediaLoaded) return;\n        const remoteTextTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.TEXT);\n        for (const localTrack of localTextTracks){\n            const hasRemoteTrack = this.#findRemoteTrack(remoteTextTracks, localTrack);\n            if (!hasRemoteTrack) {\n                (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.untrack)(()=>this.#onNewLocalTracks?.());\n                break;\n            }\n        }\n    }\n    syncRemoteTracks(event) {\n        if (!this.#cast.isMediaLoaded) return;\n        const localAudioTracks = this.#getLocalAudioTracks(), localTextTracks = this.getLocalTextTracks(), remoteAudioTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.AUDIO), remoteTextTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.TEXT);\n        for (const remoteAudioTrack of remoteAudioTracks){\n            const hasLocalTrack = this.#findLocalTrack(localAudioTracks, remoteAudioTrack);\n            if (hasLocalTrack) continue;\n            const localAudioTrack = {\n                id: remoteAudioTrack.trackId.toString(),\n                label: remoteAudioTrack.name,\n                language: remoteAudioTrack.language,\n                kind: remoteAudioTrack.subtype ?? \"main\",\n                selected: false\n            };\n            this.#ctx.audioTracks[_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.ListSymbol.add](localAudioTrack, event);\n        }\n        for (const remoteTextTrack of remoteTextTracks){\n            const hasLocalTrack = this.#findLocalTrack(localTextTracks, remoteTextTrack);\n            if (hasLocalTrack) continue;\n            const localTextTrack = {\n                id: remoteTextTrack.trackId.toString(),\n                src: remoteTextTrack.trackContentId,\n                label: remoteTextTrack.name,\n                language: remoteTextTrack.language,\n                kind: remoteTextTrack.subtype.toLowerCase()\n            };\n            this.#ctx.textTracks.add(localTextTrack, event);\n        }\n    }\n    syncRemoteActiveIds(event) {\n        if (!this.#cast.isMediaLoaded) return;\n        const activeIds = this.#getRemoteActiveIds(), editRequest = new chrome.cast.media.EditTracksInfoRequest(activeIds);\n        this.#editTracksInfo(editRequest).catch((error)=>{\n            {\n                this.#ctx.logger?.errorGroup(\"[vidstack] failed to edit cast tracks info\").labelledLog(\"Edit Request\", editRequest).labelledLog(\"Error\", error).dispatch();\n            }\n        });\n    }\n    #editTracksInfo(request) {\n        const media = (0,_vidstack_BM_FgV9W_js__WEBPACK_IMPORTED_MODULE_3__.getCastSessionMedia)();\n        return new Promise((resolve, reject)=>media?.editTracksInfo(request, resolve, reject));\n    }\n    #findLocalTrack(localTracks, remoteTrack) {\n        return localTracks.find((localTrack)=>this.#isMatch(localTrack, remoteTrack));\n    }\n    #findRemoteTrack(remoteTracks, localTrack) {\n        return remoteTracks.find((remoteTrack)=>this.#isMatch(localTrack, remoteTrack));\n    }\n    // Note: we can't rely on id matching because they will differ between local/remote. A local\n    // track id might not even exist.\n    #isMatch(localTrack, remoteTrack) {\n        return remoteTrack.name === localTrack.label && remoteTrack.language === localTrack.language && remoteTrack.subtype.toLowerCase() === localTrack.kind.toLowerCase();\n    }\n}\nclass GoogleCastProvider {\n    #player;\n    #ctx;\n    #tracks;\n    #currentSrc;\n    #state;\n    #currentTime;\n    #played;\n    #seekableRange;\n    #timeRAF;\n    #playerEventHandlers;\n    #reloadInfo;\n    #isIdle;\n    constructor(player, ctx){\n        this.$$PROVIDER_TYPE = \"GOOGLE_CAST\";\n        this.scope = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createScope)();\n        this.#currentSrc = null;\n        this.#state = \"disconnected\";\n        this.#currentTime = 0;\n        this.#played = 0;\n        this.#seekableRange = new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, 0);\n        this.#timeRAF = new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.RAFLoop(this.#onAnimationFrame.bind(this));\n        this.#reloadInfo = null;\n        this.#isIdle = false;\n        this.#player = player;\n        this.#ctx = ctx;\n        this.#tracks = new GoogleCastTracksManager(player, ctx, this.#onNewLocalTracks.bind(this));\n    }\n    get type() {\n        return \"google-cast\";\n    }\n    get currentSrc() {\n        return this.#currentSrc;\n    }\n    /**\n   * The Google Cast remote player.\n   *\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.RemotePlayer}\n   */ get player() {\n        return this.#player;\n    }\n    /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */ get cast() {\n        return (0,_vidstack_BM_FgV9W_js__WEBPACK_IMPORTED_MODULE_3__.getCastContext)();\n    }\n    /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastSession}\n   */ get session() {\n        return (0,_vidstack_BM_FgV9W_js__WEBPACK_IMPORTED_MODULE_3__.getCastSession)();\n    }\n    /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/chrome.cast.media.Media}\n   */ get media() {\n        return (0,_vidstack_BM_FgV9W_js__WEBPACK_IMPORTED_MODULE_3__.getCastSessionMedia)();\n    }\n    /**\n   * Whether the current Google Cast session belongs to this provider.\n   */ get hasActiveSession() {\n        return (0,_vidstack_BM_FgV9W_js__WEBPACK_IMPORTED_MODULE_3__.hasActiveCastSession)(this.#currentSrc);\n    }\n    setup() {\n        this.#attachCastContextEventListeners();\n        this.#attachCastPlayerEventListeners();\n        this.#tracks.setup();\n        this.#ctx.notify(\"provider-setup\", this);\n    }\n    #attachCastContextEventListeners() {\n        (0,_vidstack_BM_FgV9W_js__WEBPACK_IMPORTED_MODULE_3__.listenCastContextEvent)(cast.framework.CastContextEventType.CAST_STATE_CHANGED, this.#onCastStateChange.bind(this));\n    }\n    #attachCastPlayerEventListeners() {\n        const Event2 = cast.framework.RemotePlayerEventType, handlers = {\n            [Event2.IS_CONNECTED_CHANGED]: this.#onCastStateChange,\n            [Event2.IS_MEDIA_LOADED_CHANGED]: this.#onMediaLoadedChange,\n            [Event2.CAN_CONTROL_VOLUME_CHANGED]: this.#onCanControlVolumeChange,\n            [Event2.CAN_SEEK_CHANGED]: this.#onCanSeekChange,\n            [Event2.DURATION_CHANGED]: this.#onDurationChange,\n            [Event2.IS_MUTED_CHANGED]: this.#onVolumeChange,\n            [Event2.VOLUME_LEVEL_CHANGED]: this.#onVolumeChange,\n            [Event2.IS_PAUSED_CHANGED]: this.#onPausedChange,\n            [Event2.LIVE_SEEKABLE_RANGE_CHANGED]: this.#onProgress,\n            [Event2.PLAYER_STATE_CHANGED]: this.#onPlayerStateChange\n        };\n        this.#playerEventHandlers = handlers;\n        const handler = this.#onRemotePlayerEvent.bind(this);\n        for (const type of (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.keysOf)(handlers)){\n            this.#player.controller.addEventListener(type, handler);\n        }\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            for (const type of (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.keysOf)(handlers)){\n                this.#player.controller.removeEventListener(type, handler);\n            }\n        });\n    }\n    async play() {\n        if (!this.#player.isPaused && !this.#isIdle) return;\n        if (this.#isIdle) {\n            await this.#reload(false, 0);\n            return;\n        }\n        this.#player.controller?.playOrPause();\n    }\n    async pause() {\n        if (this.#player.isPaused) return;\n        this.#player.controller?.playOrPause();\n    }\n    getMediaStatus(request) {\n        return new Promise((resolve, reject)=>{\n            this.media?.getStatus(request, resolve, reject);\n        });\n    }\n    setMuted(muted) {\n        const hasChanged = muted && !this.#player.isMuted || !muted && this.#player.isMuted;\n        if (hasChanged) this.#player.controller?.muteOrUnmute();\n    }\n    setCurrentTime(time) {\n        this.#player.currentTime = time;\n        this.#ctx.notify(\"seeking\", time);\n        this.#player.controller?.seek();\n    }\n    setVolume(volume) {\n        this.#player.volumeLevel = volume;\n        this.#player.controller?.setVolumeLevel();\n    }\n    async loadSource(src) {\n        if (this.#reloadInfo?.src !== src) this.#reloadInfo = null;\n        if ((0,_vidstack_BM_FgV9W_js__WEBPACK_IMPORTED_MODULE_3__.hasActiveCastSession)(src)) {\n            this.#resumeSession();\n            this.#currentSrc = src;\n            return;\n        }\n        this.#ctx.notify(\"load-start\");\n        const loadRequest = this.#buildLoadRequest(src), errorCode = await this.session.loadMedia(loadRequest);\n        if (errorCode) {\n            this.#currentSrc = null;\n            this.#ctx.notify(\"error\", Error((0,_vidstack_BM_FgV9W_js__WEBPACK_IMPORTED_MODULE_3__.getCastErrorMessage)(errorCode)));\n            return;\n        }\n        this.#currentSrc = src;\n    }\n    destroy() {\n        this.#reset();\n        this.#endSession();\n    }\n    #reset() {\n        if (!this.#reloadInfo) {\n            this.#played = 0;\n            this.#seekableRange = new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, 0);\n        }\n        this.#timeRAF.stop();\n        this.#currentTime = 0;\n        this.#reloadInfo = null;\n    }\n    #resumeSession() {\n        const resumeSessionEvent = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"resume-session\", {\n            detail: this.session\n        });\n        this.#onMediaLoadedChange(resumeSessionEvent);\n        const { muted, volume, savedState } = this.#ctx.$state, localState = savedState();\n        this.setCurrentTime(Math.max(this.#player.currentTime, localState?.currentTime ?? 0));\n        this.setMuted(muted());\n        this.setVolume(volume());\n        if (localState?.paused === false) this.play();\n    }\n    #endSession() {\n        this.cast.endCurrentSession(true);\n        const { remotePlaybackLoader } = this.#ctx.$state;\n        remotePlaybackLoader.set(null);\n    }\n    #disconnectFromReceiver() {\n        const { savedState } = this.#ctx.$state;\n        savedState.set({\n            paused: this.#player.isPaused,\n            currentTime: this.#player.currentTime\n        });\n        this.#endSession();\n    }\n    #onAnimationFrame() {\n        this.#onCurrentTimeChange();\n    }\n    #onRemotePlayerEvent(event) {\n        this.#playerEventHandlers[event.type].call(this, event);\n    }\n    #onCastStateChange(data) {\n        const castState = this.cast.getCastState(), state = castState === cast.framework.CastState.CONNECTED ? \"connected\" : castState === cast.framework.CastState.CONNECTING ? \"connecting\" : \"disconnected\";\n        if (this.#state === state) return;\n        const detail = {\n            type: \"google-cast\",\n            state\n        }, trigger = this.#createEvent(data);\n        this.#state = state;\n        this.#ctx.notify(\"remote-playback-change\", detail, trigger);\n        if (state === \"disconnected\") {\n            this.#disconnectFromReceiver();\n        }\n    }\n    #onMediaLoadedChange(event) {\n        const hasLoaded = !!this.#player.isMediaLoaded;\n        if (!hasLoaded) return;\n        const src = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#ctx.$state.source);\n        Promise.resolve().then(()=>{\n            if (src !== (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#ctx.$state.source) || !this.#player.isMediaLoaded) return;\n            this.#reset();\n            const duration = this.#player.duration;\n            this.#seekableRange = new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, duration);\n            const detail = {\n                provider: this,\n                duration,\n                buffered: new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, 0),\n                seekable: this.#getSeekableRange()\n            }, trigger = this.#createEvent(event);\n            this.#ctx.notify(\"loaded-metadata\", void 0, trigger);\n            this.#ctx.notify(\"loaded-data\", void 0, trigger);\n            this.#ctx.notify(\"can-play\", detail, trigger);\n            this.#onCanControlVolumeChange();\n            this.#onCanSeekChange(event);\n            const { volume, muted } = this.#ctx.$state;\n            this.setVolume(volume());\n            this.setMuted(muted());\n            this.#timeRAF.start();\n            this.#tracks.syncRemoteTracks(trigger);\n            this.#tracks.syncRemoteActiveIds(trigger);\n        });\n    }\n    #onCanControlVolumeChange() {\n        this.#ctx.$state.canSetVolume.set(this.#player.canControlVolume);\n    }\n    #onCanSeekChange(event) {\n        const trigger = this.#createEvent(event);\n        this.#ctx.notify(\"stream-type-change\", this.#getStreamType(), trigger);\n    }\n    #getStreamType() {\n        const streamType = this.#player.mediaInfo?.streamType;\n        return streamType === chrome.cast.media.StreamType.LIVE ? this.#player.canSeek ? \"live:dvr\" : \"live\" : \"on-demand\";\n    }\n    #onCurrentTimeChange() {\n        if (this.#reloadInfo) return;\n        const currentTime = this.#player.currentTime;\n        if (currentTime === this.#currentTime) return;\n        this.#ctx.notify(\"time-change\", currentTime);\n        if (currentTime > this.#played) {\n            this.#played = currentTime;\n            this.#onProgress();\n        }\n        if (this.#ctx.$state.seeking()) {\n            this.#ctx.notify(\"seeked\", currentTime);\n        }\n        this.#currentTime = currentTime;\n    }\n    #onDurationChange(event) {\n        if (!this.#player.isMediaLoaded || this.#reloadInfo) return;\n        const duration = this.#player.duration, trigger = this.#createEvent(event);\n        this.#seekableRange = new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, duration);\n        this.#ctx.notify(\"duration-change\", duration, trigger);\n    }\n    #onVolumeChange(event) {\n        if (!this.#player.isMediaLoaded) return;\n        const detail = {\n            muted: this.#player.isMuted,\n            volume: this.#player.volumeLevel\n        }, trigger = this.#createEvent(event);\n        this.#ctx.notify(\"volume-change\", detail, trigger);\n    }\n    #onPausedChange(event) {\n        const trigger = this.#createEvent(event);\n        if (this.#player.isPaused) {\n            this.#ctx.notify(\"pause\", void 0, trigger);\n        } else {\n            this.#ctx.notify(\"play\", void 0, trigger);\n        }\n    }\n    #onProgress(event) {\n        const detail = {\n            seekable: this.#getSeekableRange(),\n            buffered: new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(0, this.#played)\n        }, trigger = event ? this.#createEvent(event) : void 0;\n        this.#ctx.notify(\"progress\", detail, trigger);\n    }\n    #onPlayerStateChange(event) {\n        const state = this.#player.playerState, PlayerState = chrome.cast.media.PlayerState;\n        this.#isIdle = state === PlayerState.IDLE;\n        if (state === PlayerState.PAUSED) return;\n        const trigger = this.#createEvent(event);\n        switch(state){\n            case PlayerState.PLAYING:\n                this.#ctx.notify(\"playing\", void 0, trigger);\n                break;\n            case PlayerState.BUFFERING:\n                this.#ctx.notify(\"waiting\", void 0, trigger);\n                break;\n            case PlayerState.IDLE:\n                this.#timeRAF.stop();\n                this.#ctx.notify(\"pause\");\n                this.#ctx.notify(\"end\");\n                break;\n        }\n    }\n    #getSeekableRange() {\n        return this.#player.liveSeekableRange ? new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.TimeRange(this.#player.liveSeekableRange.start, this.#player.liveSeekableRange.end) : this.#seekableRange;\n    }\n    #createEvent(detail) {\n        return detail instanceof Event ? detail : new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(detail.type, {\n            detail\n        });\n    }\n    #buildMediaInfo(src) {\n        const { streamType, title, poster } = this.#ctx.$state;\n        return new GoogleCastMediaInfoBuilder(src).setMetadata(title(), poster()).setStreamType(streamType()).setTracks(this.#tracks.getLocalTextTracks()).build();\n    }\n    #buildLoadRequest(src) {\n        const mediaInfo = this.#buildMediaInfo(src), request = new chrome.cast.media.LoadRequest(mediaInfo), savedState = this.#ctx.$state.savedState();\n        request.autoplay = (this.#reloadInfo?.paused ?? savedState?.paused) === false;\n        request.currentTime = this.#reloadInfo?.time ?? savedState?.currentTime ?? 0;\n        return request;\n    }\n    async #reload(paused, time) {\n        const src = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#ctx.$state.source);\n        this.#reloadInfo = {\n            src,\n            paused,\n            time\n        };\n        await this.loadSource(src);\n    }\n    #onNewLocalTracks() {\n        this.#reload(this.#player.isPaused, this.#player.currentTime).catch((error)=>{\n            {\n                this.#ctx.logger?.errorGroup(\"[vidstack] cast failed to load new local tracks\").labelledLog(\"Error\", error).dispatch();\n            }\n        });\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CBaoV8XT.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CIHGgWPC.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-CIHGgWPC.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_PLAYBACK_RATES: () => (/* binding */ DEFAULT_PLAYBACK_RATES),\n/* harmony export */   useMediaRemote: () => (/* binding */ useMediaRemote),\n/* harmony export */   usePlaybackRateOptions: () => (/* binding */ usePlaybackRateOptions),\n/* harmony export */   useVideoQualityOptions: () => (/* binding */ useVideoQualityOptions)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-DUlCophs.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-DUlCophs.js\");\n/* harmony import */ var _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack--AIGOV5A.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack--AIGOV5A.js\");\n/* harmony import */ var _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-D_bWd66h.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js\");\n/* __next_internal_client_entry_do_not_use__ DEFAULT_PLAYBACK_RATES,useMediaRemote,usePlaybackRateOptions,useVideoQualityOptions auto */ \n\n\n\nconst DEFAULT_PLAYBACK_RATES = [\n    0.25,\n    0.5,\n    0.75,\n    1,\n    1.25,\n    1.5,\n    1.75,\n    2\n];\nclass SpeedRadioGroup extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            normalLabel: \"Normal\",\n            rates: DEFAULT_PLAYBACK_RATES\n        };\n    }\n    #media;\n    #menu;\n    #controller;\n    get value() {\n        return this.#controller.value;\n    }\n    get disabled() {\n        const { rates } = this.$props, { canSetPlaybackRate } = this.#media.$state;\n        return !canSetPlaybackRate() || rates().length === 0;\n    }\n    constructor(){\n        super();\n        this.#controller = new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.RadioGroupController();\n        this.#controller.onValueChange = this.#onValueChange.bind(this);\n    }\n    onSetup() {\n        this.#media = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.useMediaContext)();\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.menuContext)) {\n            this.#menu = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.menuContext);\n        }\n    }\n    onConnect(el) {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchValue.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchHintText.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchControllerDisabled.bind(this));\n    }\n    getOptions() {\n        const { rates, normalLabel } = this.$props;\n        return rates().map((rate)=>({\n                label: rate === 1 ? normalLabel : rate + \"\\xD7\",\n                value: rate.toString()\n            }));\n    }\n    #watchValue() {\n        this.#controller.value = this.#getValue();\n    }\n    #watchHintText() {\n        const { normalLabel } = this.$props, { playbackRate } = this.#media.$state, rate = playbackRate();\n        this.#menu?.hint.set(rate === 1 ? normalLabel() : rate + \"\\xD7\");\n    }\n    #watchControllerDisabled() {\n        this.#menu?.disable(this.disabled);\n    }\n    #getValue() {\n        const { playbackRate } = this.#media.$state;\n        return playbackRate().toString();\n    }\n    #onValueChange(value, trigger) {\n        if (this.disabled) return;\n        const rate = +value;\n        this.#media.remote.changePlaybackRate(rate, trigger);\n        this.dispatch(\"change\", {\n            detail: rate,\n            trigger\n        });\n    }\n}\nconst speedradiogroup__proto = SpeedRadioGroup.prototype;\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(speedradiogroup__proto, \"value\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(speedradiogroup__proto, \"disabled\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.method)(speedradiogroup__proto, \"getOptions\");\nfunction useMediaRemote(target) {\n    const media = (0,_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.useMediaContext)(), remote = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    if (!remote.current) {\n        remote.current = new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.MediaRemoteControl();\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useMediaRemote.useEffect\": ()=>{\n            const ref = target && \"current\" in target ? target.current : target, isPlayerRef = ref instanceof _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.MediaPlayerInstance, player = isPlayerRef ? ref : media?.player;\n            remote.current.setPlayer(player ?? null);\n            remote.current.setTarget(ref ?? null);\n        }\n    }[\"useMediaRemote.useEffect\"], [\n        media,\n        target && \"current\" in target ? target.current : target\n    ]);\n    return remote.current;\n}\nfunction useVideoQualityOptions({ auto = true, sort = \"descending\" } = {}) {\n    const media = (0,_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.useMediaContext)(), { qualities, quality, autoQuality, canSetQuality } = media.$state, $qualities = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(qualities);\n    (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(quality);\n    (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(autoQuality);\n    (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(canSetQuality);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"useVideoQualityOptions.useMemo\": ()=>{\n            const sortedQualities = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.sortVideoQualities)($qualities, sort === \"descending\"), options = sortedQualities.map({\n                \"useVideoQualityOptions.useMemo.options\": (q)=>{\n                    return {\n                        quality: q,\n                        label: q.height + \"p\",\n                        value: getQualityValue(q),\n                        bitrateText: q.bitrate && q.bitrate > 0 ? `${(q.bitrate / 1e6).toFixed(2)} Mbps` : null,\n                        get selected () {\n                            return q === quality();\n                        },\n                        get autoSelected () {\n                            return autoQuality();\n                        },\n                        select (trigger) {\n                            const index = qualities().indexOf(q);\n                            if (index >= 0) media.remote.changeQuality(index, trigger);\n                        }\n                    };\n                }\n            }[\"useVideoQualityOptions.useMemo.options\"]);\n            if (auto) {\n                options.unshift({\n                    quality: null,\n                    label: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(auto) ? auto : \"Auto\",\n                    value: \"auto\",\n                    bitrateText: null,\n                    get selected () {\n                        return autoQuality();\n                    },\n                    get autoSelected () {\n                        return autoQuality();\n                    },\n                    select (trigger) {\n                        media.remote.requestAutoQuality(trigger);\n                    }\n                });\n            }\n            Object.defineProperty(options, \"disabled\", {\n                get () {\n                    return !canSetQuality() || $qualities.length <= 1;\n                }\n            });\n            Object.defineProperty(options, \"selectedQuality\", {\n                get () {\n                    return quality();\n                }\n            });\n            Object.defineProperty(options, \"selectedValue\", {\n                get () {\n                    const $quality = quality();\n                    return !autoQuality() && $quality ? getQualityValue($quality) : \"auto\";\n                }\n            });\n            return options;\n        }\n    }[\"useVideoQualityOptions.useMemo\"], [\n        $qualities,\n        sort\n    ]);\n}\nfunction getQualityValue(quality) {\n    return quality.height + \"_\" + quality.bitrate;\n}\nfunction usePlaybackRateOptions({ rates = DEFAULT_PLAYBACK_RATES, normalLabel = \"Normal\" } = {}) {\n    const media = (0,_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.useMediaContext)(), { playbackRate, canSetPlaybackRate } = media.$state;\n    (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(playbackRate);\n    (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(canSetPlaybackRate);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"usePlaybackRateOptions.useMemo\": ()=>{\n            const options = rates.map({\n                \"usePlaybackRateOptions.useMemo.options\": (opt)=>{\n                    const label = typeof opt === \"number\" ? opt === 1 && normalLabel ? normalLabel : opt + \"x\" : opt.label, rate = typeof opt === \"number\" ? opt : opt.rate;\n                    return {\n                        label,\n                        value: rate.toString(),\n                        rate,\n                        get selected () {\n                            return playbackRate() === rate;\n                        },\n                        select (trigger) {\n                            media.remote.changePlaybackRate(rate, trigger);\n                        }\n                    };\n                }\n            }[\"usePlaybackRateOptions.useMemo.options\"]);\n            Object.defineProperty(options, \"disabled\", {\n                get () {\n                    return !canSetPlaybackRate() || !options.length;\n                }\n            });\n            Object.defineProperty(options, \"selectedValue\", {\n                get () {\n                    return playbackRate().toString();\n                }\n            });\n            return options;\n        }\n    }[\"usePlaybackRateOptions.useMemo\"], [\n        rates\n    ]);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CIHGgWPC.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CnCZVzrO.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-CnCZVzrO.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioProvider: () => (/* binding */ AudioProvider)\n/* harmony export */ });\n/* harmony import */ var _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-D_bWd66h.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js\");\n/* harmony import */ var _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-DUlCophs.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-DUlCophs.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ AudioProvider auto */ \n\n\n\nclass AudioProvider extends _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_1__.HTMLMediaProvider {\n    get type() {\n        return \"audio\";\n    }\n    constructor(audio, ctx){\n        super(audio, ctx), this.$$PROVIDER_TYPE = \"AUDIO\";\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.scoped)(()=>{\n            this.airPlay = new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_1__.HTMLAirPlayAdapter(this.media, ctx);\n        }, this.scope);\n    }\n    setup() {\n        super.setup();\n        if (this.type === \"audio\") this.ctx.notify(\"provider-setup\", this);\n    }\n    /**\n   * The native HTML `<audio>` element.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement}\n   */ get audio() {\n        return this.media;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9jaHVua3Mvdmlkc3RhY2stQ25DWlZ6ck8uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OzttRUFFZ0Q7QUFDK0I7QUFDaEU7QUFDVztBQUUxQixNQUFNRyxzQkFBc0JGLG9FQUFpQkE7SUFFM0MsSUFBSUcsT0FBTztRQUNULE9BQU87SUFDVDtJQUVBQyxZQUFZQyxLQUFLLEVBQUVDLEdBQUcsQ0FBRTtRQUN0QixLQUFLLENBQUNELE9BQU9DLFdBTmZDLGtCQUFrQjtRQU9oQlIsNkRBQU1BLENBQUM7WUFDTCxJQUFJLENBQUNTLE9BQU8sR0FBRyxJQUFJUCxxRUFBa0JBLENBQUMsSUFBSSxDQUFDUSxLQUFLLEVBQUVIO1FBQ3BELEdBQUcsSUFBSSxDQUFDSSxLQUFLO0lBQ2Y7SUFDQUMsUUFBUTtRQUNOLEtBQUssQ0FBQ0E7UUFDTixJQUFJLElBQUksQ0FBQ1IsSUFBSSxLQUFLLFNBQVMsSUFBSSxDQUFDRyxHQUFHLENBQUNNLE1BQU0sQ0FBQyxrQkFBa0IsSUFBSTtJQUNuRTtJQUNBOzs7O0dBSUMsR0FDRCxJQUFJUCxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUNJLEtBQUs7SUFDbkI7QUFDRjtBQUV5QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxsb3JkclxcRG93bmxvYWRzXFxBbmlUZWFtcy1tYWluXFxub2RlX21vZHVsZXNcXEB2aWRzdGFja1xccmVhY3RcXGRldlxcY2h1bmtzXFx2aWRzdGFjay1DbkNaVnpyTy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIlxuXG5pbXBvcnQgeyBzY29wZWQgfSBmcm9tICcuL3ZpZHN0YWNrLURfYldkNjZoLmpzJztcbmltcG9ydCB7IEhUTUxNZWRpYVByb3ZpZGVyLCBIVE1MQWlyUGxheUFkYXB0ZXIgfSBmcm9tICcuL3ZpZHN0YWNrLURVbENvcGhzLmpzJztcbmltcG9ydCAncmVhY3QnO1xuaW1wb3J0ICdAZmxvYXRpbmctdWkvZG9tJztcblxuY2xhc3MgQXVkaW9Qcm92aWRlciBleHRlbmRzIEhUTUxNZWRpYVByb3ZpZGVyIHtcbiAgJCRQUk9WSURFUl9UWVBFID0gXCJBVURJT1wiO1xuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gXCJhdWRpb1wiO1xuICB9XG4gIGFpclBsYXk7XG4gIGNvbnN0cnVjdG9yKGF1ZGlvLCBjdHgpIHtcbiAgICBzdXBlcihhdWRpbywgY3R4KTtcbiAgICBzY29wZWQoKCkgPT4ge1xuICAgICAgdGhpcy5haXJQbGF5ID0gbmV3IEhUTUxBaXJQbGF5QWRhcHRlcih0aGlzLm1lZGlhLCBjdHgpO1xuICAgIH0sIHRoaXMuc2NvcGUpO1xuICB9XG4gIHNldHVwKCkge1xuICAgIHN1cGVyLnNldHVwKCk7XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gXCJhdWRpb1wiKSB0aGlzLmN0eC5ub3RpZnkoXCJwcm92aWRlci1zZXR1cFwiLCB0aGlzKTtcbiAgfVxuICAvKipcbiAgICogVGhlIG5hdGl2ZSBIVE1MIGA8YXVkaW8+YCBlbGVtZW50LlxuICAgKlxuICAgKiBAc2VlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTEF1ZGlvRWxlbWVudH1cbiAgICovXG4gIGdldCBhdWRpbygpIHtcbiAgICByZXR1cm4gdGhpcy5tZWRpYTtcbiAgfVxufVxuXG5leHBvcnQgeyBBdWRpb1Byb3ZpZGVyIH07XG4iXSwibmFtZXMiOlsic2NvcGVkIiwiSFRNTE1lZGlhUHJvdmlkZXIiLCJIVE1MQWlyUGxheUFkYXB0ZXIiLCJBdWRpb1Byb3ZpZGVyIiwidHlwZSIsImNvbnN0cnVjdG9yIiwiYXVkaW8iLCJjdHgiLCIkJFBST1ZJREVSX1RZUEUiLCJhaXJQbGF5IiwibWVkaWEiLCJzY29wZSIsInNldHVwIiwibm90aWZ5Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CnCZVzrO.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CoE5RD0i.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-CoE5RD0i.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   YouTubeProvider: () => (/* binding */ YouTubeProvider)\n/* harmony export */ });\n/* harmony import */ var _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-D_bWd66h.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js\");\n/* harmony import */ var _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack-DUlCophs.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-DUlCophs.js\");\n/* harmony import */ var _vidstack_D8t5kEKd_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-D8t5kEKd.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D8t5kEKd.js\");\n/* harmony import */ var _vidstack_Dm1xEU9Q_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./vidstack-Dm1xEU9Q.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Dm1xEU9Q.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ YouTubeProvider auto */ \n\n\n\n\n\nconst YouTubePlayerState = {\n    Ended: 0,\n    Playing: 1,\n    Paused: 2,\n    Buffering: 3,\n    Cued: 5\n};\nclass YouTubeProvider extends _vidstack_D8t5kEKd_js__WEBPACK_IMPORTED_MODULE_1__.EmbedProvider {\n    #ctx;\n    #videoId;\n    #state;\n    #currentSrc;\n    #seekingTimer;\n    #invalidPlay;\n    #promises;\n    constructor(iframe, ctx){\n        super(iframe), this.$$PROVIDER_TYPE = \"YOUTUBE\", this.scope = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createScope)(), this.#videoId = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.signal)(\"\"), this.#state = -1, this.#currentSrc = null, this.#seekingTimer = -1, this.#invalidPlay = false, this.#promises = /* @__PURE__ */ new Map(), /**\n   * Sets the player's interface language. The parameter value is an ISO 639-1 two-letter\n   * language code or a fully specified locale. For example, fr and fr-ca are both valid values.\n   * Other language input codes, such as IETF language tags (BCP 47) might also be handled properly.\n   *\n   * The interface language is used for tooltips in the player and also affects the default caption\n   * track. Note that YouTube might select a different caption track language for a particular\n   * user based on the user's individual language preferences and the availability of caption tracks.\n   *\n   * @defaultValue 'en'\n   */ this.language = \"en\", this.color = \"red\", /**\n   * Whether cookies should be enabled on the embed. This is turned off by default to be\n   * GDPR-compliant.\n   *\n   * @defaultValue `false`\n   */ this.cookies = false;\n        this.#ctx = ctx;\n    }\n    get currentSrc() {\n        return this.#currentSrc;\n    }\n    get type() {\n        return \"youtube\";\n    }\n    get videoId() {\n        return this.#videoId();\n    }\n    preconnect() {\n        (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.preconnect)(this.getOrigin());\n    }\n    setup() {\n        super.setup();\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.effect)(this.#watchVideoId.bind(this));\n        this.#ctx.notify(\"provider-setup\", this);\n    }\n    destroy() {\n        this.#reset();\n        const message = \"provider destroyed\";\n        for (const promises of this.#promises.values()){\n            for (const { reject } of promises)reject(message);\n        }\n        this.#promises.clear();\n    }\n    async play() {\n        return this.#remote(\"playVideo\");\n    }\n    #playFail(message) {\n        this.#getPromise(\"playVideo\")?.reject(message);\n    }\n    async pause() {\n        return this.#remote(\"pauseVideo\");\n    }\n    #pauseFail(message) {\n        this.#getPromise(\"pauseVideo\")?.reject(message);\n    }\n    setMuted(muted) {\n        if (muted) this.#remote(\"mute\");\n        else this.#remote(\"unMute\");\n    }\n    setCurrentTime(time) {\n        this.#remote(\"seekTo\", time);\n        this.#ctx.notify(\"seeking\", time);\n    }\n    setVolume(volume) {\n        this.#remote(\"setVolume\", volume * 100);\n    }\n    setPlaybackRate(rate) {\n        this.#remote(\"setPlaybackRate\", rate);\n    }\n    async loadSource(src) {\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.isString)(src.src)) {\n            this.#currentSrc = null;\n            this.#videoId.set(\"\");\n            return;\n        }\n        const videoId = (0,_vidstack_Dm1xEU9Q_js__WEBPACK_IMPORTED_MODULE_4__.resolveYouTubeVideoId)(src.src);\n        this.#videoId.set(videoId ?? \"\");\n        this.#currentSrc = src;\n    }\n    getOrigin() {\n        return !this.cookies ? \"https://www.youtube-nocookie.com\" : \"https://www.youtube.com\";\n    }\n    #watchVideoId() {\n        this.#reset();\n        const videoId = this.#videoId();\n        if (!videoId) {\n            this.src.set(\"\");\n            return;\n        }\n        this.src.set(`${this.getOrigin()}/embed/${videoId}`);\n        this.#ctx.notify(\"load-start\");\n    }\n    buildParams() {\n        const { keyDisabled } = this.#ctx.$props, { muted, playsInline, nativeControls } = this.#ctx.$state, showControls = nativeControls();\n        return {\n            rel: 0,\n            autoplay: 0,\n            cc_lang_pref: this.language,\n            cc_load_policy: showControls ? 1 : void 0,\n            color: this.color,\n            controls: showControls ? 1 : 0,\n            disablekb: !showControls || keyDisabled() ? 1 : 0,\n            enablejsapi: 1,\n            fs: 1,\n            hl: this.language,\n            iv_load_policy: showControls ? 1 : 3,\n            mute: muted() ? 1 : 0,\n            playsinline: playsInline() ? 1 : 0\n        };\n    }\n    #remote(command, arg) {\n        let promise = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.deferredPromise)(), promises = this.#promises.get(command);\n        if (!promises) this.#promises.set(command, promises = []);\n        promises.push(promise);\n        this.postMessage({\n            event: \"command\",\n            func: command,\n            args: arg ? [\n                arg\n            ] : void 0\n        });\n        return promise.promise;\n    }\n    onLoad() {\n        window.setTimeout(()=>this.postMessage({\n                event: \"listening\"\n            }), 100);\n    }\n    #onReady(trigger) {\n        this.#ctx.notify(\"loaded-metadata\");\n        this.#ctx.notify(\"loaded-data\");\n        this.#ctx.delegate.ready(void 0, trigger);\n    }\n    #onPause(trigger) {\n        this.#getPromise(\"pauseVideo\")?.resolve();\n        this.#ctx.notify(\"pause\", void 0, trigger);\n    }\n    #onTimeUpdate(time, trigger) {\n        const { duration, realCurrentTime } = this.#ctx.$state, hasEnded = this.#state === YouTubePlayerState.Ended, boundTime = hasEnded ? duration() : time;\n        this.#ctx.notify(\"time-change\", boundTime, trigger);\n        if (!hasEnded && Math.abs(boundTime - realCurrentTime()) > 1) {\n            this.#ctx.notify(\"seeking\", boundTime, trigger);\n        }\n    }\n    #onProgress(buffered, seekable, trigger) {\n        const detail = {\n            buffered: new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.TimeRange(0, buffered),\n            seekable\n        };\n        this.#ctx.notify(\"progress\", detail, trigger);\n        const { seeking, realCurrentTime } = this.#ctx.$state;\n        if (seeking() && buffered > realCurrentTime()) {\n            this.#onSeeked(trigger);\n        }\n    }\n    #onSeeked(trigger) {\n        const { paused, realCurrentTime } = this.#ctx.$state;\n        window.clearTimeout(this.#seekingTimer);\n        this.#seekingTimer = window.setTimeout(()=>{\n            this.#ctx.notify(\"seeked\", realCurrentTime(), trigger);\n            this.#seekingTimer = -1;\n        }, paused() ? 100 : 0);\n    }\n    #onEnded(trigger) {\n        const { seeking } = this.#ctx.$state;\n        if (seeking()) this.#onSeeked(trigger);\n        this.#ctx.notify(\"pause\", void 0, trigger);\n        this.#ctx.notify(\"end\", void 0, trigger);\n    }\n    #onStateChange(state, trigger) {\n        const { paused, seeking } = this.#ctx.$state, isPlaying = state === YouTubePlayerState.Playing, isBuffering = state === YouTubePlayerState.Buffering, isPendingPlay = this.#isPending(\"playVideo\"), isPlay = paused() && (isBuffering || isPlaying);\n        if (isBuffering) this.#ctx.notify(\"waiting\", void 0, trigger);\n        if (seeking() && isPlaying) {\n            this.#onSeeked(trigger);\n        }\n        if (this.#invalidPlay && isPlaying) {\n            this.pause();\n            this.#invalidPlay = false;\n            this.setMuted(this.#ctx.$state.muted());\n            return;\n        }\n        if (!isPendingPlay && isPlay) {\n            this.#invalidPlay = true;\n            this.setMuted(true);\n            return;\n        }\n        if (isPlay) {\n            this.#getPromise(\"playVideo\")?.resolve();\n            this.#ctx.notify(\"play\", void 0, trigger);\n        }\n        switch(state){\n            case YouTubePlayerState.Cued:\n                this.#onReady(trigger);\n                break;\n            case YouTubePlayerState.Playing:\n                this.#ctx.notify(\"playing\", void 0, trigger);\n                break;\n            case YouTubePlayerState.Paused:\n                this.#onPause(trigger);\n                break;\n            case YouTubePlayerState.Ended:\n                this.#onEnded(trigger);\n                break;\n        }\n        this.#state = state;\n    }\n    onMessage({ info }, event) {\n        if (!info) return;\n        const { title, intrinsicDuration, playbackRate } = this.#ctx.$state;\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(info.videoData) && info.videoData.title !== title()) {\n            this.#ctx.notify(\"title-change\", info.videoData.title, event);\n        }\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(info.duration) && info.duration !== intrinsicDuration()) {\n            if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(info.videoLoadedFraction)) {\n                const buffered = info.progressState?.loaded ?? info.videoLoadedFraction * info.duration, seekable = new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.TimeRange(0, info.duration);\n                this.#onProgress(buffered, seekable, event);\n            }\n            this.#ctx.notify(\"duration-change\", info.duration, event);\n        }\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(info.playbackRate) && info.playbackRate !== playbackRate()) {\n            this.#ctx.notify(\"rate-change\", info.playbackRate, event);\n        }\n        if (info.progressState) {\n            const { current, seekableStart, seekableEnd, loaded, duration } = info.progressState;\n            this.#onTimeUpdate(current, event);\n            this.#onProgress(loaded, new _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_3__.TimeRange(seekableStart, seekableEnd), event);\n            if (duration !== intrinsicDuration()) {\n                this.#ctx.notify(\"duration-change\", duration, event);\n            }\n        }\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(info.volume) && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.isBoolean)(info.muted) && !this.#invalidPlay) {\n            const detail = {\n                muted: info.muted,\n                volume: info.volume / 100\n            };\n            this.#ctx.notify(\"volume-change\", detail, event);\n        }\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(info.playerState) && info.playerState !== this.#state) {\n            this.#onStateChange(info.playerState, event);\n        }\n    }\n    #reset() {\n        this.#state = -1;\n        this.#seekingTimer = -1;\n        this.#invalidPlay = false;\n    }\n    #getPromise(command) {\n        return this.#promises.get(command)?.shift();\n    }\n    #isPending(command) {\n        return Boolean(this.#promises.get(command)?.length);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9jaHVua3Mvdmlkc3RhY2stQ29FNVJEMGkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O3FFQUUrSDtBQUNoRTtBQUNSO0FBQ1E7QUFDaEQ7QUFDVztBQUUxQixNQUFNWSxxQkFBcUI7SUFDekJDLE9BQU87SUFDUEMsU0FBUztJQUNUQyxRQUFRO0lBQ1JDLFdBQVc7SUFDWEMsTUFBTTtBQUNSO0FBRUEsTUFBTUMsd0JBQXdCUixnRUFBYUE7SUFHekMsSUFBSSxDQUFDO0lBQ0wsUUFBUSxDQUFjO0lBQ3RCLE1BQU0sQ0FBTTtJQUNaLFdBQVcsQ0FBUTtJQUNuQixhQUFhLENBQU07SUFDbkIsWUFBWSxDQUFTO0lBQ3JCLFNBQVMsQ0FBNkI7SUFDdENTLFlBQVlDLE1BQU0sRUFBRUMsR0FBRyxDQUFFO1FBQ3ZCLEtBQUssQ0FBQ0QsY0FWUkUsa0JBQWtCLGdCQUNsQkMsUUFBUXZCLGtFQUFXQSxTQUVuQixRQUFRLEdBQUdDLDZEQUFNQSxDQUFDLFVBQ2xCLE1BQU0sR0FBRyxDQUFDLFFBQ1YsV0FBVyxHQUFHLFdBQ2QsYUFBYSxHQUFHLENBQUMsUUFDakIsWUFBWSxHQUFHLFlBQ2YsU0FBUyxHQUFHLGFBQWEsR0FBRyxJQUFJdUIsT0FLaEM7Ozs7Ozs7Ozs7R0FVQyxRQUNEQyxXQUFXLFdBQ1hDLFFBQVEsT0FDUjs7Ozs7R0FLQyxRQUNEQyxVQUFVO1FBckJSLElBQUksQ0FBQyxJQUFJLEdBQUdOO0lBQ2Q7SUFxQkEsSUFBSU8sYUFBYTtRQUNmLE9BQU8sSUFBSSxDQUFDLFdBQVc7SUFDekI7SUFDQSxJQUFJQyxPQUFPO1FBQ1QsT0FBTztJQUNUO0lBQ0EsSUFBSUMsVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFFBQVE7SUFDdEI7SUFDQXRCLGFBQWE7UUFDWEEsaUVBQVVBLENBQUMsSUFBSSxDQUFDdUIsU0FBUztJQUMzQjtJQUNBQyxRQUFRO1FBQ04sS0FBSyxDQUFDQTtRQUNOOUIsNkRBQU1BLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQytCLElBQUksQ0FBQyxJQUFJO1FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUNDLE1BQU0sQ0FBQyxrQkFBa0IsSUFBSTtJQUN6QztJQUNBQyxVQUFVO1FBQ1IsSUFBSSxDQUFDLE1BQU07UUFDWCxNQUFNQyxVQUFVO1FBQ2hCLEtBQUssTUFBTUMsWUFBWSxJQUFJLENBQUMsU0FBUyxDQUFDQyxNQUFNLEdBQUk7WUFDOUMsS0FBSyxNQUFNLEVBQUVDLE1BQU0sRUFBRSxJQUFJRixTQUFVRSxPQUFPSDtRQUM1QztRQUNBLElBQUksQ0FBQyxTQUFTLENBQUNJLEtBQUs7SUFDdEI7SUFDQSxNQUFNQyxPQUFPO1FBQ1gsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCO0lBQ0EsU0FBUyxDQUFDTCxPQUFPO1FBQ2YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjRyxPQUFPSDtJQUN4QztJQUNBLE1BQU1NLFFBQVE7UUFDWixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEI7SUFDQSxVQUFVLENBQUNOLE9BQU87UUFDaEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlRyxPQUFPSDtJQUN6QztJQUNBTyxTQUFTQyxLQUFLLEVBQUU7UUFDZCxJQUFJQSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7YUFDbkIsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUNwQjtJQUNBQyxlQUFlQyxJQUFJLEVBQUU7UUFDbkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVQTtRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDWixNQUFNLENBQUMsV0FBV1k7SUFDOUI7SUFDQUMsVUFBVUMsTUFBTSxFQUFFO1FBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYUEsU0FBUztJQUNyQztJQUNBQyxnQkFBZ0JDLElBQUksRUFBRTtRQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQkE7SUFDbEM7SUFDQSxNQUFNQyxXQUFXQyxHQUFHLEVBQUU7UUFDcEIsSUFBSSxDQUFDakQsK0RBQVFBLENBQUNpRCxJQUFJQSxHQUFHLEdBQUc7WUFDdEIsSUFBSSxDQUFDLFdBQVcsR0FBRztZQUNuQixJQUFJLENBQUMsUUFBUSxDQUFDQyxHQUFHLENBQUM7WUFDbEI7UUFDRjtRQUNBLE1BQU12QixVQUFVbkIsNEVBQXFCQSxDQUFDeUMsSUFBSUEsR0FBRztRQUM3QyxJQUFJLENBQUMsUUFBUSxDQUFDQyxHQUFHLENBQUN2QixXQUFXO1FBQzdCLElBQUksQ0FBQyxXQUFXLEdBQUdzQjtJQUNyQjtJQUNBckIsWUFBWTtRQUNWLE9BQU8sQ0FBQyxJQUFJLENBQUNKLE9BQU8sR0FBRyxxQ0FBcUM7SUFDOUQ7SUFDQSxhQUFhO1FBQ1gsSUFBSSxDQUFDLE1BQU07UUFDWCxNQUFNRyxVQUFVLElBQUksQ0FBQyxRQUFRO1FBQzdCLElBQUksQ0FBQ0EsU0FBUztZQUNaLElBQUksQ0FBQ3NCLEdBQUcsQ0FBQ0MsR0FBRyxDQUFDO1lBQ2I7UUFDRjtRQUNBLElBQUksQ0FBQ0QsR0FBRyxDQUFDQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUN0QixTQUFTLEdBQUcsT0FBTyxFQUFFRCxTQUFTO1FBQ25ELElBQUksQ0FBQyxJQUFJLENBQUNJLE1BQU0sQ0FBQztJQUNuQjtJQUNBb0IsY0FBYztRQUNaLE1BQU0sRUFBRUMsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQ0MsTUFBTSxFQUFFLEVBQUVaLEtBQUssRUFBRWEsV0FBVyxFQUFFQyxjQUFjLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDQyxNQUFNLEVBQUVDLGVBQWVGO1FBQ3BILE9BQU87WUFDTEcsS0FBSztZQUNMQyxVQUFVO1lBQ1ZDLGNBQWMsSUFBSSxDQUFDdEMsUUFBUTtZQUMzQnVDLGdCQUFnQkosZUFBZSxJQUFJLEtBQUs7WUFDeENsQyxPQUFPLElBQUksQ0FBQ0EsS0FBSztZQUNqQnVDLFVBQVVMLGVBQWUsSUFBSTtZQUM3Qk0sV0FBVyxDQUFDTixnQkFBZ0JMLGdCQUFnQixJQUFJO1lBQ2hEWSxhQUFhO1lBQ2JDLElBQUk7WUFDSkMsSUFBSSxJQUFJLENBQUM1QyxRQUFRO1lBQ2pCNkMsZ0JBQWdCVixlQUFlLElBQUk7WUFDbkNXLE1BQU0zQixVQUFVLElBQUk7WUFDcEI0QixhQUFhZixnQkFBZ0IsSUFBSTtRQUNuQztJQUNGO0lBQ0EsT0FBTyxDQUFDZ0IsT0FBTyxFQUFFQyxHQUFHO1FBQ2xCLElBQUlDLFVBQVV2RSxzRUFBZUEsSUFBSWlDLFdBQVcsSUFBSSxDQUFDLFNBQVMsQ0FBQ3VDLEdBQUcsQ0FBQ0g7UUFDL0QsSUFBSSxDQUFDcEMsVUFBVSxJQUFJLENBQUMsU0FBUyxDQUFDZ0IsR0FBRyxDQUFDb0IsU0FBU3BDLFdBQVcsRUFBRTtRQUN4REEsU0FBU3dDLElBQUksQ0FBQ0Y7UUFDZCxJQUFJLENBQUNHLFdBQVcsQ0FBQztZQUNmQyxPQUFPO1lBQ1BDLE1BQU1QO1lBQ05RLE1BQU1QLE1BQU07Z0JBQUNBO2FBQUksR0FBRyxLQUFLO1FBQzNCO1FBQ0EsT0FBT0MsUUFBUUEsT0FBTztJQUN4QjtJQUNBTyxTQUFTO1FBQ1BDLE9BQU9DLFVBQVUsQ0FBQyxJQUFNLElBQUksQ0FBQ04sV0FBVyxDQUFDO2dCQUFFQyxPQUFPO1lBQVksSUFBSTtJQUNwRTtJQUNBLFFBQVEsQ0FBQ00sT0FBTztRQUNkLElBQUksQ0FBQyxJQUFJLENBQUNuRCxNQUFNLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQ0EsTUFBTSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUNvRCxRQUFRLENBQUNDLEtBQUssQ0FBQyxLQUFLLEdBQUdGO0lBQ25DO0lBQ0EsUUFBUSxDQUFDQSxPQUFPO1FBQ2QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlRztRQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDdEQsTUFBTSxDQUFDLFNBQVMsS0FBSyxHQUFHbUQ7SUFDcEM7SUFDQSxhQUFhLENBQUN2QyxJQUFJLEVBQUV1QyxPQUFPO1FBQ3pCLE1BQU0sRUFBRUksUUFBUSxFQUFFQyxlQUFlLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDL0IsTUFBTSxFQUFFZ0MsV0FBVyxJQUFJLENBQUMsTUFBTSxLQUFLL0UsbUJBQW1CQyxLQUFLLEVBQUUrRSxZQUFZRCxXQUFXRixhQUFhM0M7UUFDakosSUFBSSxDQUFDLElBQUksQ0FBQ1osTUFBTSxDQUFDLGVBQWUwRCxXQUFXUDtRQUMzQyxJQUFJLENBQUNNLFlBQVlFLEtBQUtDLEdBQUcsQ0FBQ0YsWUFBWUYscUJBQXFCLEdBQUc7WUFDNUQsSUFBSSxDQUFDLElBQUksQ0FBQ3hELE1BQU0sQ0FBQyxXQUFXMEQsV0FBV1A7UUFDekM7SUFDRjtJQUNBLFdBQVcsQ0FBQ1UsUUFBUSxFQUFFQyxRQUFRLEVBQUVYLE9BQU87UUFDckMsTUFBTVksU0FBUztZQUNiRixVQUFVLElBQUl0Riw0REFBU0EsQ0FBQyxHQUFHc0Y7WUFDM0JDO1FBQ0Y7UUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDOUQsTUFBTSxDQUFDLFlBQVkrRCxRQUFRWjtRQUNyQyxNQUFNLEVBQUVhLE9BQU8sRUFBRVIsZUFBZSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQy9CLE1BQU07UUFDckQsSUFBSXVDLGFBQWFILFdBQVdMLG1CQUFtQjtZQUM3QyxJQUFJLENBQUMsU0FBUyxDQUFDTDtRQUNqQjtJQUNGO0lBQ0EsU0FBUyxDQUFDQSxPQUFPO1FBQ2YsTUFBTSxFQUFFYyxNQUFNLEVBQUVULGVBQWUsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMvQixNQUFNO1FBQ3BEd0IsT0FBT2lCLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYTtRQUN0QyxJQUFJLENBQUMsYUFBYSxHQUFHakIsT0FBT0MsVUFBVSxDQUNwQztZQUNFLElBQUksQ0FBQyxJQUFJLENBQUNsRCxNQUFNLENBQUMsVUFBVXdELG1CQUFtQkw7WUFDOUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDO1FBQ3hCLEdBQ0FjLFdBQVcsTUFBTTtJQUVyQjtJQUNBLFFBQVEsQ0FBQ2QsT0FBTztRQUNkLE1BQU0sRUFBRWEsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQ3ZDLE1BQU07UUFDcEMsSUFBSXVDLFdBQVcsSUFBSSxDQUFDLFNBQVMsQ0FBQ2I7UUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQ25ELE1BQU0sQ0FBQyxTQUFTLEtBQUssR0FBR21EO1FBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUNuRCxNQUFNLENBQUMsT0FBTyxLQUFLLEdBQUdtRDtJQUNsQztJQUNBLGNBQWMsQ0FBQ2dCLEtBQUssRUFBRWhCLE9BQU87UUFDM0IsTUFBTSxFQUFFYyxNQUFNLEVBQUVELE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUN2QyxNQUFNLEVBQUUyQyxZQUFZRCxVQUFVekYsbUJBQW1CRSxPQUFPLEVBQUV5RixjQUFjRixVQUFVekYsbUJBQW1CSSxTQUFTLEVBQUV3RixnQkFBZ0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjQyxTQUFTTixZQUFhSSxDQUFBQSxlQUFlRCxTQUFRO1FBQ2pQLElBQUlDLGFBQWEsSUFBSSxDQUFDLElBQUksQ0FBQ3JFLE1BQU0sQ0FBQyxXQUFXLEtBQUssR0FBR21EO1FBQ3JELElBQUlhLGFBQWFJLFdBQVc7WUFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQ2pCO1FBQ2pCO1FBQ0EsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJaUIsV0FBVztZQUNsQyxJQUFJLENBQUM1RCxLQUFLO1lBQ1YsSUFBSSxDQUFDLFlBQVksR0FBRztZQUNwQixJQUFJLENBQUNDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDZ0IsTUFBTSxDQUFDZixLQUFLO1lBQ3BDO1FBQ0Y7UUFDQSxJQUFJLENBQUM0RCxpQkFBaUJDLFFBQVE7WUFDNUIsSUFBSSxDQUFDLFlBQVksR0FBRztZQUNwQixJQUFJLENBQUM5RCxRQUFRLENBQUM7WUFDZDtRQUNGO1FBQ0EsSUFBSThELFFBQVE7WUFDVixJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWNqQjtZQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDdEQsTUFBTSxDQUFDLFFBQVEsS0FBSyxHQUFHbUQ7UUFDbkM7UUFDQSxPQUFRZ0I7WUFDTixLQUFLekYsbUJBQW1CSyxJQUFJO2dCQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDb0U7Z0JBQ2Q7WUFDRixLQUFLekUsbUJBQW1CRSxPQUFPO2dCQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDb0IsTUFBTSxDQUFDLFdBQVcsS0FBSyxHQUFHbUQ7Z0JBQ3BDO1lBQ0YsS0FBS3pFLG1CQUFtQkcsTUFBTTtnQkFDNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQ3NFO2dCQUNkO1lBQ0YsS0FBS3pFLG1CQUFtQkMsS0FBSztnQkFDM0IsSUFBSSxDQUFDLFFBQVEsQ0FBQ3dFO2dCQUNkO1FBQ0o7UUFDQSxJQUFJLENBQUMsTUFBTSxHQUFHZ0I7SUFDaEI7SUFDQUssVUFBVSxFQUFFQyxJQUFJLEVBQUUsRUFBRTVCLEtBQUssRUFBRTtRQUN6QixJQUFJLENBQUM0QixNQUFNO1FBQ1gsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLGlCQUFpQixFQUFFQyxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDbkQsTUFBTTtRQUNuRSxJQUFJdEQsK0RBQVFBLENBQUNzRyxLQUFLSSxTQUFTLEtBQUtKLEtBQUtJLFNBQVMsQ0FBQ0gsS0FBSyxLQUFLQSxTQUFTO1lBQ2hFLElBQUksQ0FBQyxJQUFJLENBQUMxRSxNQUFNLENBQUMsZ0JBQWdCeUUsS0FBS0ksU0FBUyxDQUFDSCxLQUFLLEVBQUU3QjtRQUN6RDtRQUNBLElBQUl6RSwrREFBUUEsQ0FBQ3FHLEtBQUtsQixRQUFRLEtBQUtrQixLQUFLbEIsUUFBUSxLQUFLb0IscUJBQXFCO1lBQ3BFLElBQUl2RywrREFBUUEsQ0FBQ3FHLEtBQUtLLG1CQUFtQixHQUFHO2dCQUN0QyxNQUFNakIsV0FBV1ksS0FBS00sYUFBYSxFQUFFQyxVQUFVUCxLQUFLSyxtQkFBbUIsR0FBR0wsS0FBS2xCLFFBQVEsRUFBRU8sV0FBVyxJQUFJdkYsNERBQVNBLENBQUMsR0FBR2tHLEtBQUtsQixRQUFRO2dCQUNsSSxJQUFJLENBQUMsV0FBVyxDQUFDTSxVQUFVQyxVQUFVakI7WUFDdkM7WUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDN0MsTUFBTSxDQUFDLG1CQUFtQnlFLEtBQUtsQixRQUFRLEVBQUVWO1FBQ3JEO1FBQ0EsSUFBSXpFLCtEQUFRQSxDQUFDcUcsS0FBS0csWUFBWSxLQUFLSCxLQUFLRyxZQUFZLEtBQUtBLGdCQUFnQjtZQUN2RSxJQUFJLENBQUMsSUFBSSxDQUFDNUUsTUFBTSxDQUFDLGVBQWV5RSxLQUFLRyxZQUFZLEVBQUUvQjtRQUNyRDtRQUNBLElBQUk0QixLQUFLTSxhQUFhLEVBQUU7WUFDdEIsTUFBTSxFQUFFRSxPQUFPLEVBQUVDLGFBQWEsRUFBRUMsV0FBVyxFQUFFSCxNQUFNLEVBQUV6QixRQUFRLEVBQUUsR0FBR2tCLEtBQUtNLGFBQWE7WUFDcEYsSUFBSSxDQUFDLGFBQWEsQ0FBQ0UsU0FBU3BDO1lBQzVCLElBQUksQ0FBQyxXQUFXLENBQUNtQyxRQUFRLElBQUl6Ryw0REFBU0EsQ0FBQzJHLGVBQWVDLGNBQWN0QztZQUNwRSxJQUFJVSxhQUFhb0IscUJBQXFCO2dCQUNwQyxJQUFJLENBQUMsSUFBSSxDQUFDM0UsTUFBTSxDQUFDLG1CQUFtQnVELFVBQVVWO1lBQ2hEO1FBQ0Y7UUFDQSxJQUFJekUsK0RBQVFBLENBQUNxRyxLQUFLM0QsTUFBTSxLQUFLekMsZ0VBQVNBLENBQUNvRyxLQUFLL0QsS0FBSyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUN4RSxNQUFNcUQsU0FBUztnQkFDYnJELE9BQU8rRCxLQUFLL0QsS0FBSztnQkFDakJJLFFBQVEyRCxLQUFLM0QsTUFBTSxHQUFHO1lBQ3hCO1lBQ0EsSUFBSSxDQUFDLElBQUksQ0FBQ2QsTUFBTSxDQUFDLGlCQUFpQitELFFBQVFsQjtRQUM1QztRQUNBLElBQUl6RSwrREFBUUEsQ0FBQ3FHLEtBQUtXLFdBQVcsS0FBS1gsS0FBS1csV0FBVyxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDbEUsSUFBSSxDQUFDLGNBQWMsQ0FBQ1gsS0FBS1csV0FBVyxFQUFFdkM7UUFDeEM7SUFDRjtJQUNBLE1BQU07UUFDSixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsYUFBYSxHQUFHLENBQUM7UUFDdEIsSUFBSSxDQUFDLFlBQVksR0FBRztJQUN0QjtJQUNBLFdBQVcsQ0FBQ04sT0FBTztRQUNqQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUNHLEdBQUcsQ0FBQ0gsVUFBVThDO0lBQ3RDO0lBQ0EsVUFBVSxDQUFDOUMsT0FBTztRQUNoQixPQUFPK0MsUUFBUSxJQUFJLENBQUMsU0FBUyxDQUFDNUMsR0FBRyxDQUFDSCxVQUFVZ0Q7SUFDOUM7QUFDRjtBQUUyQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxsb3JkclxcRG93bmxvYWRzXFxBbmlUZWFtcy1tYWluXFxub2RlX21vZHVsZXNcXEB2aWRzdGFja1xccmVhY3RcXGRldlxcY2h1bmtzXFx2aWRzdGFjay1Db0U1UkQwaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIlxuXG5pbXBvcnQgeyBjcmVhdGVTY29wZSwgc2lnbmFsLCBlZmZlY3QsIGlzU3RyaW5nLCBkZWZlcnJlZFByb21pc2UsIGlzT2JqZWN0LCBpc051bWJlciwgaXNCb29sZWFuIH0gZnJvbSAnLi92aWRzdGFjay1EX2JXZDY2aC5qcyc7XG5pbXBvcnQgeyBwcmVjb25uZWN0LCBUaW1lUmFuZ2UgfSBmcm9tICcuL3ZpZHN0YWNrLURVbENvcGhzLmpzJztcbmltcG9ydCB7IEVtYmVkUHJvdmlkZXIgfSBmcm9tICcuL3ZpZHN0YWNrLUQ4dDVrRUtkLmpzJztcbmltcG9ydCB7IHJlc29sdmVZb3VUdWJlVmlkZW9JZCB9IGZyb20gJy4vdmlkc3RhY2stRG0xeEVVOVEuanMnO1xuaW1wb3J0ICdyZWFjdCc7XG5pbXBvcnQgJ0BmbG9hdGluZy11aS9kb20nO1xuXG5jb25zdCBZb3VUdWJlUGxheWVyU3RhdGUgPSB7XG4gIEVuZGVkOiAwLFxuICBQbGF5aW5nOiAxLFxuICBQYXVzZWQ6IDIsXG4gIEJ1ZmZlcmluZzogMyxcbiAgQ3VlZDogNVxufTtcblxuY2xhc3MgWW91VHViZVByb3ZpZGVyIGV4dGVuZHMgRW1iZWRQcm92aWRlciB7XG4gICQkUFJPVklERVJfVFlQRSA9IFwiWU9VVFVCRVwiO1xuICBzY29wZSA9IGNyZWF0ZVNjb3BlKCk7XG4gICNjdHg7XG4gICN2aWRlb0lkID0gc2lnbmFsKFwiXCIpO1xuICAjc3RhdGUgPSAtMTtcbiAgI2N1cnJlbnRTcmMgPSBudWxsO1xuICAjc2Vla2luZ1RpbWVyID0gLTE7XG4gICNpbnZhbGlkUGxheSA9IGZhbHNlO1xuICAjcHJvbWlzZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBjb25zdHJ1Y3RvcihpZnJhbWUsIGN0eCkge1xuICAgIHN1cGVyKGlmcmFtZSk7XG4gICAgdGhpcy4jY3R4ID0gY3R4O1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwbGF5ZXIncyBpbnRlcmZhY2UgbGFuZ3VhZ2UuIFRoZSBwYXJhbWV0ZXIgdmFsdWUgaXMgYW4gSVNPIDYzOS0xIHR3by1sZXR0ZXJcbiAgICogbGFuZ3VhZ2UgY29kZSBvciBhIGZ1bGx5IHNwZWNpZmllZCBsb2NhbGUuIEZvciBleGFtcGxlLCBmciBhbmQgZnItY2EgYXJlIGJvdGggdmFsaWQgdmFsdWVzLlxuICAgKiBPdGhlciBsYW5ndWFnZSBpbnB1dCBjb2Rlcywgc3VjaCBhcyBJRVRGIGxhbmd1YWdlIHRhZ3MgKEJDUCA0NykgbWlnaHQgYWxzbyBiZSBoYW5kbGVkIHByb3Blcmx5LlxuICAgKlxuICAgKiBUaGUgaW50ZXJmYWNlIGxhbmd1YWdlIGlzIHVzZWQgZm9yIHRvb2x0aXBzIGluIHRoZSBwbGF5ZXIgYW5kIGFsc28gYWZmZWN0cyB0aGUgZGVmYXVsdCBjYXB0aW9uXG4gICAqIHRyYWNrLiBOb3RlIHRoYXQgWW91VHViZSBtaWdodCBzZWxlY3QgYSBkaWZmZXJlbnQgY2FwdGlvbiB0cmFjayBsYW5ndWFnZSBmb3IgYSBwYXJ0aWN1bGFyXG4gICAqIHVzZXIgYmFzZWQgb24gdGhlIHVzZXIncyBpbmRpdmlkdWFsIGxhbmd1YWdlIHByZWZlcmVuY2VzIGFuZCB0aGUgYXZhaWxhYmlsaXR5IG9mIGNhcHRpb24gdHJhY2tzLlxuICAgKlxuICAgKiBAZGVmYXVsdFZhbHVlICdlbidcbiAgICovXG4gIGxhbmd1YWdlID0gXCJlblwiO1xuICBjb2xvciA9IFwicmVkXCI7XG4gIC8qKlxuICAgKiBXaGV0aGVyIGNvb2tpZXMgc2hvdWxkIGJlIGVuYWJsZWQgb24gdGhlIGVtYmVkLiBUaGlzIGlzIHR1cm5lZCBvZmYgYnkgZGVmYXVsdCB0byBiZVxuICAgKiBHRFBSLWNvbXBsaWFudC5cbiAgICpcbiAgICogQGRlZmF1bHRWYWx1ZSBgZmFsc2VgXG4gICAqL1xuICBjb29raWVzID0gZmFsc2U7XG4gIGdldCBjdXJyZW50U3JjKCkge1xuICAgIHJldHVybiB0aGlzLiNjdXJyZW50U3JjO1xuICB9XG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiBcInlvdXR1YmVcIjtcbiAgfVxuICBnZXQgdmlkZW9JZCgpIHtcbiAgICByZXR1cm4gdGhpcy4jdmlkZW9JZCgpO1xuICB9XG4gIHByZWNvbm5lY3QoKSB7XG4gICAgcHJlY29ubmVjdCh0aGlzLmdldE9yaWdpbigpKTtcbiAgfVxuICBzZXR1cCgpIHtcbiAgICBzdXBlci5zZXR1cCgpO1xuICAgIGVmZmVjdCh0aGlzLiN3YXRjaFZpZGVvSWQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy4jY3R4Lm5vdGlmeShcInByb3ZpZGVyLXNldHVwXCIsIHRoaXMpO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4jcmVzZXQoKTtcbiAgICBjb25zdCBtZXNzYWdlID0gXCJwcm92aWRlciBkZXN0cm95ZWRcIjtcbiAgICBmb3IgKGNvbnN0IHByb21pc2VzIG9mIHRoaXMuI3Byb21pc2VzLnZhbHVlcygpKSB7XG4gICAgICBmb3IgKGNvbnN0IHsgcmVqZWN0IH0gb2YgcHJvbWlzZXMpIHJlamVjdChtZXNzYWdlKTtcbiAgICB9XG4gICAgdGhpcy4jcHJvbWlzZXMuY2xlYXIoKTtcbiAgfVxuICBhc3luYyBwbGF5KCkge1xuICAgIHJldHVybiB0aGlzLiNyZW1vdGUoXCJwbGF5VmlkZW9cIik7XG4gIH1cbiAgI3BsYXlGYWlsKG1lc3NhZ2UpIHtcbiAgICB0aGlzLiNnZXRQcm9taXNlKFwicGxheVZpZGVvXCIpPy5yZWplY3QobWVzc2FnZSk7XG4gIH1cbiAgYXN5bmMgcGF1c2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3JlbW90ZShcInBhdXNlVmlkZW9cIik7XG4gIH1cbiAgI3BhdXNlRmFpbChtZXNzYWdlKSB7XG4gICAgdGhpcy4jZ2V0UHJvbWlzZShcInBhdXNlVmlkZW9cIik/LnJlamVjdChtZXNzYWdlKTtcbiAgfVxuICBzZXRNdXRlZChtdXRlZCkge1xuICAgIGlmIChtdXRlZCkgdGhpcy4jcmVtb3RlKFwibXV0ZVwiKTtcbiAgICBlbHNlIHRoaXMuI3JlbW90ZShcInVuTXV0ZVwiKTtcbiAgfVxuICBzZXRDdXJyZW50VGltZSh0aW1lKSB7XG4gICAgdGhpcy4jcmVtb3RlKFwic2Vla1RvXCIsIHRpbWUpO1xuICAgIHRoaXMuI2N0eC5ub3RpZnkoXCJzZWVraW5nXCIsIHRpbWUpO1xuICB9XG4gIHNldFZvbHVtZSh2b2x1bWUpIHtcbiAgICB0aGlzLiNyZW1vdGUoXCJzZXRWb2x1bWVcIiwgdm9sdW1lICogMTAwKTtcbiAgfVxuICBzZXRQbGF5YmFja1JhdGUocmF0ZSkge1xuICAgIHRoaXMuI3JlbW90ZShcInNldFBsYXliYWNrUmF0ZVwiLCByYXRlKTtcbiAgfVxuICBhc3luYyBsb2FkU291cmNlKHNyYykge1xuICAgIGlmICghaXNTdHJpbmcoc3JjLnNyYykpIHtcbiAgICAgIHRoaXMuI2N1cnJlbnRTcmMgPSBudWxsO1xuICAgICAgdGhpcy4jdmlkZW9JZC5zZXQoXCJcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHZpZGVvSWQgPSByZXNvbHZlWW91VHViZVZpZGVvSWQoc3JjLnNyYyk7XG4gICAgdGhpcy4jdmlkZW9JZC5zZXQodmlkZW9JZCA/PyBcIlwiKTtcbiAgICB0aGlzLiNjdXJyZW50U3JjID0gc3JjO1xuICB9XG4gIGdldE9yaWdpbigpIHtcbiAgICByZXR1cm4gIXRoaXMuY29va2llcyA/IFwiaHR0cHM6Ly93d3cueW91dHViZS1ub2Nvb2tpZS5jb21cIiA6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb21cIjtcbiAgfVxuICAjd2F0Y2hWaWRlb0lkKCkge1xuICAgIHRoaXMuI3Jlc2V0KCk7XG4gICAgY29uc3QgdmlkZW9JZCA9IHRoaXMuI3ZpZGVvSWQoKTtcbiAgICBpZiAoIXZpZGVvSWQpIHtcbiAgICAgIHRoaXMuc3JjLnNldChcIlwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zcmMuc2V0KGAke3RoaXMuZ2V0T3JpZ2luKCl9L2VtYmVkLyR7dmlkZW9JZH1gKTtcbiAgICB0aGlzLiNjdHgubm90aWZ5KFwibG9hZC1zdGFydFwiKTtcbiAgfVxuICBidWlsZFBhcmFtcygpIHtcbiAgICBjb25zdCB7IGtleURpc2FibGVkIH0gPSB0aGlzLiNjdHguJHByb3BzLCB7IG11dGVkLCBwbGF5c0lubGluZSwgbmF0aXZlQ29udHJvbHMgfSA9IHRoaXMuI2N0eC4kc3RhdGUsIHNob3dDb250cm9scyA9IG5hdGl2ZUNvbnRyb2xzKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlbDogMCxcbiAgICAgIGF1dG9wbGF5OiAwLFxuICAgICAgY2NfbGFuZ19wcmVmOiB0aGlzLmxhbmd1YWdlLFxuICAgICAgY2NfbG9hZF9wb2xpY3k6IHNob3dDb250cm9scyA/IDEgOiB2b2lkIDAsXG4gICAgICBjb2xvcjogdGhpcy5jb2xvcixcbiAgICAgIGNvbnRyb2xzOiBzaG93Q29udHJvbHMgPyAxIDogMCxcbiAgICAgIGRpc2FibGVrYjogIXNob3dDb250cm9scyB8fCBrZXlEaXNhYmxlZCgpID8gMSA6IDAsXG4gICAgICBlbmFibGVqc2FwaTogMSxcbiAgICAgIGZzOiAxLFxuICAgICAgaGw6IHRoaXMubGFuZ3VhZ2UsXG4gICAgICBpdl9sb2FkX3BvbGljeTogc2hvd0NvbnRyb2xzID8gMSA6IDMsXG4gICAgICBtdXRlOiBtdXRlZCgpID8gMSA6IDAsXG4gICAgICBwbGF5c2lubGluZTogcGxheXNJbmxpbmUoKSA/IDEgOiAwXG4gICAgfTtcbiAgfVxuICAjcmVtb3RlKGNvbW1hbmQsIGFyZykge1xuICAgIGxldCBwcm9taXNlID0gZGVmZXJyZWRQcm9taXNlKCksIHByb21pc2VzID0gdGhpcy4jcHJvbWlzZXMuZ2V0KGNvbW1hbmQpO1xuICAgIGlmICghcHJvbWlzZXMpIHRoaXMuI3Byb21pc2VzLnNldChjb21tYW5kLCBwcm9taXNlcyA9IFtdKTtcbiAgICBwcm9taXNlcy5wdXNoKHByb21pc2UpO1xuICAgIHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgZXZlbnQ6IFwiY29tbWFuZFwiLFxuICAgICAgZnVuYzogY29tbWFuZCxcbiAgICAgIGFyZ3M6IGFyZyA/IFthcmddIDogdm9pZCAwXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb21pc2UucHJvbWlzZTtcbiAgfVxuICBvbkxvYWQoKSB7XG4gICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdGhpcy5wb3N0TWVzc2FnZSh7IGV2ZW50OiBcImxpc3RlbmluZ1wiIH0pLCAxMDApO1xuICB9XG4gICNvblJlYWR5KHRyaWdnZXIpIHtcbiAgICB0aGlzLiNjdHgubm90aWZ5KFwibG9hZGVkLW1ldGFkYXRhXCIpO1xuICAgIHRoaXMuI2N0eC5ub3RpZnkoXCJsb2FkZWQtZGF0YVwiKTtcbiAgICB0aGlzLiNjdHguZGVsZWdhdGUucmVhZHkodm9pZCAwLCB0cmlnZ2VyKTtcbiAgfVxuICAjb25QYXVzZSh0cmlnZ2VyKSB7XG4gICAgdGhpcy4jZ2V0UHJvbWlzZShcInBhdXNlVmlkZW9cIik/LnJlc29sdmUoKTtcbiAgICB0aGlzLiNjdHgubm90aWZ5KFwicGF1c2VcIiwgdm9pZCAwLCB0cmlnZ2VyKTtcbiAgfVxuICAjb25UaW1lVXBkYXRlKHRpbWUsIHRyaWdnZXIpIHtcbiAgICBjb25zdCB7IGR1cmF0aW9uLCByZWFsQ3VycmVudFRpbWUgfSA9IHRoaXMuI2N0eC4kc3RhdGUsIGhhc0VuZGVkID0gdGhpcy4jc3RhdGUgPT09IFlvdVR1YmVQbGF5ZXJTdGF0ZS5FbmRlZCwgYm91bmRUaW1lID0gaGFzRW5kZWQgPyBkdXJhdGlvbigpIDogdGltZTtcbiAgICB0aGlzLiNjdHgubm90aWZ5KFwidGltZS1jaGFuZ2VcIiwgYm91bmRUaW1lLCB0cmlnZ2VyKTtcbiAgICBpZiAoIWhhc0VuZGVkICYmIE1hdGguYWJzKGJvdW5kVGltZSAtIHJlYWxDdXJyZW50VGltZSgpKSA+IDEpIHtcbiAgICAgIHRoaXMuI2N0eC5ub3RpZnkoXCJzZWVraW5nXCIsIGJvdW5kVGltZSwgdHJpZ2dlcik7XG4gICAgfVxuICB9XG4gICNvblByb2dyZXNzKGJ1ZmZlcmVkLCBzZWVrYWJsZSwgdHJpZ2dlcikge1xuICAgIGNvbnN0IGRldGFpbCA9IHtcbiAgICAgIGJ1ZmZlcmVkOiBuZXcgVGltZVJhbmdlKDAsIGJ1ZmZlcmVkKSxcbiAgICAgIHNlZWthYmxlXG4gICAgfTtcbiAgICB0aGlzLiNjdHgubm90aWZ5KFwicHJvZ3Jlc3NcIiwgZGV0YWlsLCB0cmlnZ2VyKTtcbiAgICBjb25zdCB7IHNlZWtpbmcsIHJlYWxDdXJyZW50VGltZSB9ID0gdGhpcy4jY3R4LiRzdGF0ZTtcbiAgICBpZiAoc2Vla2luZygpICYmIGJ1ZmZlcmVkID4gcmVhbEN1cnJlbnRUaW1lKCkpIHtcbiAgICAgIHRoaXMuI29uU2Vla2VkKHRyaWdnZXIpO1xuICAgIH1cbiAgfVxuICAjb25TZWVrZWQodHJpZ2dlcikge1xuICAgIGNvbnN0IHsgcGF1c2VkLCByZWFsQ3VycmVudFRpbWUgfSA9IHRoaXMuI2N0eC4kc3RhdGU7XG4gICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLiNzZWVraW5nVGltZXIpO1xuICAgIHRoaXMuI3NlZWtpbmdUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KFxuICAgICAgKCkgPT4ge1xuICAgICAgICB0aGlzLiNjdHgubm90aWZ5KFwic2Vla2VkXCIsIHJlYWxDdXJyZW50VGltZSgpLCB0cmlnZ2VyKTtcbiAgICAgICAgdGhpcy4jc2Vla2luZ1RpbWVyID0gLTE7XG4gICAgICB9LFxuICAgICAgcGF1c2VkKCkgPyAxMDAgOiAwXG4gICAgKTtcbiAgfVxuICAjb25FbmRlZCh0cmlnZ2VyKSB7XG4gICAgY29uc3QgeyBzZWVraW5nIH0gPSB0aGlzLiNjdHguJHN0YXRlO1xuICAgIGlmIChzZWVraW5nKCkpIHRoaXMuI29uU2Vla2VkKHRyaWdnZXIpO1xuICAgIHRoaXMuI2N0eC5ub3RpZnkoXCJwYXVzZVwiLCB2b2lkIDAsIHRyaWdnZXIpO1xuICAgIHRoaXMuI2N0eC5ub3RpZnkoXCJlbmRcIiwgdm9pZCAwLCB0cmlnZ2VyKTtcbiAgfVxuICAjb25TdGF0ZUNoYW5nZShzdGF0ZSwgdHJpZ2dlcikge1xuICAgIGNvbnN0IHsgcGF1c2VkLCBzZWVraW5nIH0gPSB0aGlzLiNjdHguJHN0YXRlLCBpc1BsYXlpbmcgPSBzdGF0ZSA9PT0gWW91VHViZVBsYXllclN0YXRlLlBsYXlpbmcsIGlzQnVmZmVyaW5nID0gc3RhdGUgPT09IFlvdVR1YmVQbGF5ZXJTdGF0ZS5CdWZmZXJpbmcsIGlzUGVuZGluZ1BsYXkgPSB0aGlzLiNpc1BlbmRpbmcoXCJwbGF5VmlkZW9cIiksIGlzUGxheSA9IHBhdXNlZCgpICYmIChpc0J1ZmZlcmluZyB8fCBpc1BsYXlpbmcpO1xuICAgIGlmIChpc0J1ZmZlcmluZykgdGhpcy4jY3R4Lm5vdGlmeShcIndhaXRpbmdcIiwgdm9pZCAwLCB0cmlnZ2VyKTtcbiAgICBpZiAoc2Vla2luZygpICYmIGlzUGxheWluZykge1xuICAgICAgdGhpcy4jb25TZWVrZWQodHJpZ2dlcik7XG4gICAgfVxuICAgIGlmICh0aGlzLiNpbnZhbGlkUGxheSAmJiBpc1BsYXlpbmcpIHtcbiAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgIHRoaXMuI2ludmFsaWRQbGF5ID0gZmFsc2U7XG4gICAgICB0aGlzLnNldE11dGVkKHRoaXMuI2N0eC4kc3RhdGUubXV0ZWQoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghaXNQZW5kaW5nUGxheSAmJiBpc1BsYXkpIHtcbiAgICAgIHRoaXMuI2ludmFsaWRQbGF5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuc2V0TXV0ZWQodHJ1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1BsYXkpIHtcbiAgICAgIHRoaXMuI2dldFByb21pc2UoXCJwbGF5VmlkZW9cIik/LnJlc29sdmUoKTtcbiAgICAgIHRoaXMuI2N0eC5ub3RpZnkoXCJwbGF5XCIsIHZvaWQgMCwgdHJpZ2dlcik7XG4gICAgfVxuICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgIGNhc2UgWW91VHViZVBsYXllclN0YXRlLkN1ZWQ6XG4gICAgICAgIHRoaXMuI29uUmVhZHkodHJpZ2dlcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBZb3VUdWJlUGxheWVyU3RhdGUuUGxheWluZzpcbiAgICAgICAgdGhpcy4jY3R4Lm5vdGlmeShcInBsYXlpbmdcIiwgdm9pZCAwLCB0cmlnZ2VyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFlvdVR1YmVQbGF5ZXJTdGF0ZS5QYXVzZWQ6XG4gICAgICAgIHRoaXMuI29uUGF1c2UodHJpZ2dlcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBZb3VUdWJlUGxheWVyU3RhdGUuRW5kZWQ6XG4gICAgICAgIHRoaXMuI29uRW5kZWQodHJpZ2dlcik7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLiNzdGF0ZSA9IHN0YXRlO1xuICB9XG4gIG9uTWVzc2FnZSh7IGluZm8gfSwgZXZlbnQpIHtcbiAgICBpZiAoIWluZm8pIHJldHVybjtcbiAgICBjb25zdCB7IHRpdGxlLCBpbnRyaW5zaWNEdXJhdGlvbiwgcGxheWJhY2tSYXRlIH0gPSB0aGlzLiNjdHguJHN0YXRlO1xuICAgIGlmIChpc09iamVjdChpbmZvLnZpZGVvRGF0YSkgJiYgaW5mby52aWRlb0RhdGEudGl0bGUgIT09IHRpdGxlKCkpIHtcbiAgICAgIHRoaXMuI2N0eC5ub3RpZnkoXCJ0aXRsZS1jaGFuZ2VcIiwgaW5mby52aWRlb0RhdGEudGl0bGUsIGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGlzTnVtYmVyKGluZm8uZHVyYXRpb24pICYmIGluZm8uZHVyYXRpb24gIT09IGludHJpbnNpY0R1cmF0aW9uKCkpIHtcbiAgICAgIGlmIChpc051bWJlcihpbmZvLnZpZGVvTG9hZGVkRnJhY3Rpb24pKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlcmVkID0gaW5mby5wcm9ncmVzc1N0YXRlPy5sb2FkZWQgPz8gaW5mby52aWRlb0xvYWRlZEZyYWN0aW9uICogaW5mby5kdXJhdGlvbiwgc2Vla2FibGUgPSBuZXcgVGltZVJhbmdlKDAsIGluZm8uZHVyYXRpb24pO1xuICAgICAgICB0aGlzLiNvblByb2dyZXNzKGJ1ZmZlcmVkLCBzZWVrYWJsZSwgZXZlbnQpO1xuICAgICAgfVxuICAgICAgdGhpcy4jY3R4Lm5vdGlmeShcImR1cmF0aW9uLWNoYW5nZVwiLCBpbmZvLmR1cmF0aW9uLCBldmVudCk7XG4gICAgfVxuICAgIGlmIChpc051bWJlcihpbmZvLnBsYXliYWNrUmF0ZSkgJiYgaW5mby5wbGF5YmFja1JhdGUgIT09IHBsYXliYWNrUmF0ZSgpKSB7XG4gICAgICB0aGlzLiNjdHgubm90aWZ5KFwicmF0ZS1jaGFuZ2VcIiwgaW5mby5wbGF5YmFja1JhdGUsIGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGluZm8ucHJvZ3Jlc3NTdGF0ZSkge1xuICAgICAgY29uc3QgeyBjdXJyZW50LCBzZWVrYWJsZVN0YXJ0LCBzZWVrYWJsZUVuZCwgbG9hZGVkLCBkdXJhdGlvbiB9ID0gaW5mby5wcm9ncmVzc1N0YXRlO1xuICAgICAgdGhpcy4jb25UaW1lVXBkYXRlKGN1cnJlbnQsIGV2ZW50KTtcbiAgICAgIHRoaXMuI29uUHJvZ3Jlc3MobG9hZGVkLCBuZXcgVGltZVJhbmdlKHNlZWthYmxlU3RhcnQsIHNlZWthYmxlRW5kKSwgZXZlbnQpO1xuICAgICAgaWYgKGR1cmF0aW9uICE9PSBpbnRyaW5zaWNEdXJhdGlvbigpKSB7XG4gICAgICAgIHRoaXMuI2N0eC5ub3RpZnkoXCJkdXJhdGlvbi1jaGFuZ2VcIiwgZHVyYXRpb24sIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzTnVtYmVyKGluZm8udm9sdW1lKSAmJiBpc0Jvb2xlYW4oaW5mby5tdXRlZCkgJiYgIXRoaXMuI2ludmFsaWRQbGF5KSB7XG4gICAgICBjb25zdCBkZXRhaWwgPSB7XG4gICAgICAgIG11dGVkOiBpbmZvLm11dGVkLFxuICAgICAgICB2b2x1bWU6IGluZm8udm9sdW1lIC8gMTAwXG4gICAgICB9O1xuICAgICAgdGhpcy4jY3R4Lm5vdGlmeShcInZvbHVtZS1jaGFuZ2VcIiwgZGV0YWlsLCBldmVudCk7XG4gICAgfVxuICAgIGlmIChpc051bWJlcihpbmZvLnBsYXllclN0YXRlKSAmJiBpbmZvLnBsYXllclN0YXRlICE9PSB0aGlzLiNzdGF0ZSkge1xuICAgICAgdGhpcy4jb25TdGF0ZUNoYW5nZShpbmZvLnBsYXllclN0YXRlLCBldmVudCk7XG4gICAgfVxuICB9XG4gICNyZXNldCgpIHtcbiAgICB0aGlzLiNzdGF0ZSA9IC0xO1xuICAgIHRoaXMuI3NlZWtpbmdUaW1lciA9IC0xO1xuICAgIHRoaXMuI2ludmFsaWRQbGF5ID0gZmFsc2U7XG4gIH1cbiAgI2dldFByb21pc2UoY29tbWFuZCkge1xuICAgIHJldHVybiB0aGlzLiNwcm9taXNlcy5nZXQoY29tbWFuZCk/LnNoaWZ0KCk7XG4gIH1cbiAgI2lzUGVuZGluZyhjb21tYW5kKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy4jcHJvbWlzZXMuZ2V0KGNvbW1hbmQpPy5sZW5ndGgpO1xuICB9XG59XG5cbmV4cG9ydCB7IFlvdVR1YmVQcm92aWRlciB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZVNjb3BlIiwic2lnbmFsIiwiZWZmZWN0IiwiaXNTdHJpbmciLCJkZWZlcnJlZFByb21pc2UiLCJpc09iamVjdCIsImlzTnVtYmVyIiwiaXNCb29sZWFuIiwicHJlY29ubmVjdCIsIlRpbWVSYW5nZSIsIkVtYmVkUHJvdmlkZXIiLCJyZXNvbHZlWW91VHViZVZpZGVvSWQiLCJZb3VUdWJlUGxheWVyU3RhdGUiLCJFbmRlZCIsIlBsYXlpbmciLCJQYXVzZWQiLCJCdWZmZXJpbmciLCJDdWVkIiwiWW91VHViZVByb3ZpZGVyIiwiY29uc3RydWN0b3IiLCJpZnJhbWUiLCJjdHgiLCIkJFBST1ZJREVSX1RZUEUiLCJzY29wZSIsIk1hcCIsImxhbmd1YWdlIiwiY29sb3IiLCJjb29raWVzIiwiY3VycmVudFNyYyIsInR5cGUiLCJ2aWRlb0lkIiwiZ2V0T3JpZ2luIiwic2V0dXAiLCJiaW5kIiwibm90aWZ5IiwiZGVzdHJveSIsIm1lc3NhZ2UiLCJwcm9taXNlcyIsInZhbHVlcyIsInJlamVjdCIsImNsZWFyIiwicGxheSIsInBhdXNlIiwic2V0TXV0ZWQiLCJtdXRlZCIsInNldEN1cnJlbnRUaW1lIiwidGltZSIsInNldFZvbHVtZSIsInZvbHVtZSIsInNldFBsYXliYWNrUmF0ZSIsInJhdGUiLCJsb2FkU291cmNlIiwic3JjIiwic2V0IiwiYnVpbGRQYXJhbXMiLCJrZXlEaXNhYmxlZCIsIiRwcm9wcyIsInBsYXlzSW5saW5lIiwibmF0aXZlQ29udHJvbHMiLCIkc3RhdGUiLCJzaG93Q29udHJvbHMiLCJyZWwiLCJhdXRvcGxheSIsImNjX2xhbmdfcHJlZiIsImNjX2xvYWRfcG9saWN5IiwiY29udHJvbHMiLCJkaXNhYmxla2IiLCJlbmFibGVqc2FwaSIsImZzIiwiaGwiLCJpdl9sb2FkX3BvbGljeSIsIm11dGUiLCJwbGF5c2lubGluZSIsImNvbW1hbmQiLCJhcmciLCJwcm9taXNlIiwiZ2V0IiwicHVzaCIsInBvc3RNZXNzYWdlIiwiZXZlbnQiLCJmdW5jIiwiYXJncyIsIm9uTG9hZCIsIndpbmRvdyIsInNldFRpbWVvdXQiLCJ0cmlnZ2VyIiwiZGVsZWdhdGUiLCJyZWFkeSIsInJlc29sdmUiLCJkdXJhdGlvbiIsInJlYWxDdXJyZW50VGltZSIsImhhc0VuZGVkIiwiYm91bmRUaW1lIiwiTWF0aCIsImFicyIsImJ1ZmZlcmVkIiwic2Vla2FibGUiLCJkZXRhaWwiLCJzZWVraW5nIiwicGF1c2VkIiwiY2xlYXJUaW1lb3V0Iiwic3RhdGUiLCJpc1BsYXlpbmciLCJpc0J1ZmZlcmluZyIsImlzUGVuZGluZ1BsYXkiLCJpc1BsYXkiLCJvbk1lc3NhZ2UiLCJpbmZvIiwidGl0bGUiLCJpbnRyaW5zaWNEdXJhdGlvbiIsInBsYXliYWNrUmF0ZSIsInZpZGVvRGF0YSIsInZpZGVvTG9hZGVkRnJhY3Rpb24iLCJwcm9ncmVzc1N0YXRlIiwibG9hZGVkIiwiY3VycmVudCIsInNlZWthYmxlU3RhcnQiLCJzZWVrYWJsZUVuZCIsInBsYXllclN0YXRlIiwic2hpZnQiLCJCb29sZWFuIiwibGVuZ3RoIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CoE5RD0i.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D-hQD1eE.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-D-hQD1eE.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RemotionPoster: () => (/* binding */ RemotionPoster),\n/* harmony export */   RemotionSliderThumbnail: () => (/* binding */ RemotionSliderThumbnail),\n/* harmony export */   RemotionThumbnail: () => (/* binding */ RemotionThumbnail)\n/* harmony export */ });\n/* harmony import */ var _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-D_bWd66h.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js\");\n/* __next_internal_client_entry_do_not_use__ RemotionPoster,RemotionSliderThumbnail,RemotionThumbnail auto */ \nconst RemotionThumbnail = /* @__PURE__ */ (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_0__.signal)(null);\nconst RemotionSliderThumbnail = /* @__PURE__ */ (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_0__.signal)(null);\nconst RemotionPoster = /* @__PURE__ */ (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_0__.signal)(null);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9jaHVua3Mvdmlkc3RhY2stRC1oUUQxZUUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs4R0FFZ0Q7QUFFaEQsTUFBTUMsb0JBQW9CLGFBQWEsR0FBR0QsNkRBQU1BLENBQUM7QUFDakQsTUFBTUUsMEJBQTBCLGFBQWEsR0FBR0YsNkRBQU1BLENBQUM7QUFDdkQsTUFBTUcsaUJBQWlCLGFBQWEsR0FBR0gsNkRBQU1BLENBQUM7QUFFd0IiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbG9yZHJcXERvd25sb2Fkc1xcQW5pVGVhbXMtbWFpblxcbm9kZV9tb2R1bGVzXFxAdmlkc3RhY2tcXHJlYWN0XFxkZXZcXGNodW5rc1xcdmlkc3RhY2stRC1oUUQxZUUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCJcblxuaW1wb3J0IHsgc2lnbmFsIH0gZnJvbSAnLi92aWRzdGFjay1EX2JXZDY2aC5qcyc7XG5cbmNvbnN0IFJlbW90aW9uVGh1bWJuYWlsID0gLyogQF9fUFVSRV9fICovIHNpZ25hbChudWxsKTtcbmNvbnN0IFJlbW90aW9uU2xpZGVyVGh1bWJuYWlsID0gLyogQF9fUFVSRV9fICovIHNpZ25hbChudWxsKTtcbmNvbnN0IFJlbW90aW9uUG9zdGVyID0gLyogQF9fUFVSRV9fICovIHNpZ25hbChudWxsKTtcblxuZXhwb3J0IHsgUmVtb3Rpb25Qb3N0ZXIsIFJlbW90aW9uU2xpZGVyVGh1bWJuYWlsLCBSZW1vdGlvblRodW1ibmFpbCB9O1xuIl0sIm5hbWVzIjpbInNpZ25hbCIsIlJlbW90aW9uVGh1bWJuYWlsIiwiUmVtb3Rpb25TbGlkZXJUaHVtYm5haWwiLCJSZW1vdGlvblBvc3RlciJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D-hQD1eE.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D8t5kEKd.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-D8t5kEKd.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmbedProvider: () => (/* binding */ EmbedProvider)\n/* harmony export */ });\n/* harmony import */ var _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-DUlCophs.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-DUlCophs.js\");\n/* harmony import */ var _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-D_bWd66h.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js\");\n/* __next_internal_client_entry_do_not_use__ EmbedProvider auto */ \n\nclass EmbedProvider {\n    #iframe;\n    get iframe() {\n        return this.#iframe;\n    }\n    constructor(iframe){\n        this.src = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_0__.signal)(\"\");\n        /**\n   * Defines which referrer is sent when fetching the resource.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/referrerPolicy}\n   */ this.referrerPolicy = null;\n        this.#iframe = iframe;\n        iframe.setAttribute(\"frameBorder\", \"0\");\n        iframe.setAttribute(\"aria-hidden\", \"true\");\n        iframe.setAttribute(\"allow\", \"autoplay; fullscreen; encrypted-media; picture-in-picture; accelerometer; gyroscope\");\n        if (this.referrerPolicy !== null) {\n            iframe.setAttribute(\"referrerpolicy\", this.referrerPolicy);\n        }\n    }\n    setup() {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_0__.listenEvent)(window, \"message\", this.#onWindowMessage.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_0__.listenEvent)(this.#iframe, \"load\", this.onLoad.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_0__.effect)(this.#watchSrc.bind(this));\n    }\n    #watchSrc() {\n        const src = this.src();\n        if (!src.length) {\n            this.#iframe.setAttribute(\"src\", \"\");\n            return;\n        }\n        const params = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_0__.peek)(()=>this.buildParams());\n        this.#iframe.setAttribute(\"src\", (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_1__.appendParamsToURL)(src, params));\n    }\n    postMessage(message, target) {\n        if (_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_1__.IS_SERVER) return;\n        this.#iframe.contentWindow?.postMessage(JSON.stringify(message), target ?? \"*\");\n    }\n    #onWindowMessage(event) {\n        const origin = this.getOrigin(), isOriginMatch = (event.source === null || event.source === this.#iframe?.contentWindow) && (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_0__.isString)(origin) || origin === event.origin);\n        if (!isOriginMatch) return;\n        try {\n            const message = JSON.parse(event.data);\n            if (message) this.onMessage(message, event);\n            return;\n        } catch (e) {}\n        if (event.data) this.onMessage(event.data, event);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9jaHVua3Mvdmlkc3RhY2stRDh0NWtFS2QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O21FQUVzRTtBQUNlO0FBRXJGLE1BQU1PO0lBQ0osT0FBTyxDQUFDO0lBUVIsSUFBSUMsU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLE9BQU87SUFDckI7SUFDQUMsWUFBWUQsTUFBTSxDQUFFO2FBVnBCRSxNQUFNUiw2REFBTUEsQ0FBQztRQUNiOzs7O0dBSUMsUUFDRFMsaUJBQWlCO1FBS2YsSUFBSSxDQUFDLE9BQU8sR0FBR0g7UUFDZkEsT0FBT0ksWUFBWSxDQUFDLGVBQWU7UUFDbkNKLE9BQU9JLFlBQVksQ0FBQyxlQUFlO1FBQ25DSixPQUFPSSxZQUFZLENBQ2pCLFNBQ0E7UUFFRixJQUFJLElBQUksQ0FBQ0QsY0FBYyxLQUFLLE1BQU07WUFDaENILE9BQU9JLFlBQVksQ0FBQyxrQkFBa0IsSUFBSSxDQUFDRCxjQUFjO1FBQzNEO0lBQ0Y7SUFDQUUsUUFBUTtRQUNOVixrRUFBV0EsQ0FBQ1csUUFBUSxXQUFXLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQ0MsSUFBSSxDQUFDLElBQUk7UUFDOURaLGtFQUFXQSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxJQUFJLENBQUNhLE1BQU0sQ0FBQ0QsSUFBSSxDQUFDLElBQUk7UUFDdkRYLDZEQUFNQSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUNXLElBQUksQ0FBQyxJQUFJO0lBQ2pDO0lBQ0EsU0FBUztRQUNQLE1BQU1MLE1BQU0sSUFBSSxDQUFDQSxHQUFHO1FBQ3BCLElBQUksQ0FBQ0EsSUFBSU8sTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLE9BQU8sQ0FBQ0wsWUFBWSxDQUFDLE9BQU87WUFDakM7UUFDRjtRQUNBLE1BQU1NLFNBQVNiLDJEQUFJQSxDQUFDLElBQU0sSUFBSSxDQUFDYyxXQUFXO1FBQzFDLElBQUksQ0FBQyxPQUFPLENBQUNQLFlBQVksQ0FBQyxPQUFPWix3RUFBaUJBLENBQUNVLEtBQUtRO0lBQzFEO0lBQ0FFLFlBQVlDLE9BQU8sRUFBRUMsTUFBTSxFQUFFO1FBQzNCLElBQUlyQiw0REFBU0EsRUFBRTtRQUNmLElBQUksQ0FBQyxPQUFPLENBQUNzQixhQUFhLEVBQUVILFlBQVlJLEtBQUtDLFNBQVMsQ0FBQ0osVUFBVUMsVUFBVTtJQUM3RTtJQUNBLGdCQUFnQixDQUFDSSxLQUFLO1FBQ3BCLE1BQU1DLFNBQVMsSUFBSSxDQUFDQyxTQUFTLElBQUlDLGdCQUFnQixDQUFDSCxNQUFNSSxNQUFNLEtBQUssUUFBUUosTUFBTUksTUFBTSxLQUFLLElBQUksQ0FBQyxPQUFPLEVBQUVQLGFBQVksS0FBTyxFQUFDakIsK0RBQVFBLENBQUNxQixXQUFXQSxXQUFXRCxNQUFNQyxNQUFNO1FBQ3pLLElBQUksQ0FBQ0UsZUFBZTtRQUNwQixJQUFJO1lBQ0YsTUFBTVIsVUFBVUcsS0FBS08sS0FBSyxDQUFDTCxNQUFNTSxJQUFJO1lBQ3JDLElBQUlYLFNBQVMsSUFBSSxDQUFDWSxTQUFTLENBQUNaLFNBQVNLO1lBQ3JDO1FBQ0YsRUFBRSxPQUFPUSxHQUFHLENBQ1o7UUFDQSxJQUFJUixNQUFNTSxJQUFJLEVBQUUsSUFBSSxDQUFDQyxTQUFTLENBQUNQLE1BQU1NLElBQUksRUFBRU47SUFDN0M7QUFDRjtBQUV5QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxsb3JkclxcRG93bmxvYWRzXFxBbmlUZWFtcy1tYWluXFxub2RlX21vZHVsZXNcXEB2aWRzdGFja1xccmVhY3RcXGRldlxcY2h1bmtzXFx2aWRzdGFjay1EOHQ1a0VLZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIlxuXG5pbXBvcnQgeyBhcHBlbmRQYXJhbXNUb1VSTCwgSVNfU0VSVkVSIH0gZnJvbSAnLi92aWRzdGFjay1EVWxDb3Bocy5qcyc7XG5pbXBvcnQgeyBzaWduYWwsIGxpc3RlbkV2ZW50LCBlZmZlY3QsIHBlZWssIGlzU3RyaW5nIH0gZnJvbSAnLi92aWRzdGFjay1EX2JXZDY2aC5qcyc7XG5cbmNsYXNzIEVtYmVkUHJvdmlkZXIge1xuICAjaWZyYW1lO1xuICBzcmMgPSBzaWduYWwoXCJcIik7XG4gIC8qKlxuICAgKiBEZWZpbmVzIHdoaWNoIHJlZmVycmVyIGlzIHNlbnQgd2hlbiBmZXRjaGluZyB0aGUgcmVzb3VyY2UuXG4gICAqXG4gICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MSUZyYW1lRWxlbWVudC9yZWZlcnJlclBvbGljeX1cbiAgICovXG4gIHJlZmVycmVyUG9saWN5ID0gbnVsbDtcbiAgZ2V0IGlmcmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy4jaWZyYW1lO1xuICB9XG4gIGNvbnN0cnVjdG9yKGlmcmFtZSkge1xuICAgIHRoaXMuI2lmcmFtZSA9IGlmcmFtZTtcbiAgICBpZnJhbWUuc2V0QXR0cmlidXRlKFwiZnJhbWVCb3JkZXJcIiwgXCIwXCIpO1xuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7XG4gICAgaWZyYW1lLnNldEF0dHJpYnV0ZShcbiAgICAgIFwiYWxsb3dcIixcbiAgICAgIFwiYXV0b3BsYXk7IGZ1bGxzY3JlZW47IGVuY3J5cHRlZC1tZWRpYTsgcGljdHVyZS1pbi1waWN0dXJlOyBhY2NlbGVyb21ldGVyOyBneXJvc2NvcGVcIlxuICAgICk7XG4gICAgaWYgKHRoaXMucmVmZXJyZXJQb2xpY3kgIT09IG51bGwpIHtcbiAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoXCJyZWZlcnJlcnBvbGljeVwiLCB0aGlzLnJlZmVycmVyUG9saWN5KTtcbiAgICB9XG4gIH1cbiAgc2V0dXAoKSB7XG4gICAgbGlzdGVuRXZlbnQod2luZG93LCBcIm1lc3NhZ2VcIiwgdGhpcy4jb25XaW5kb3dNZXNzYWdlLmJpbmQodGhpcykpO1xuICAgIGxpc3RlbkV2ZW50KHRoaXMuI2lmcmFtZSwgXCJsb2FkXCIsIHRoaXMub25Mb2FkLmJpbmQodGhpcykpO1xuICAgIGVmZmVjdCh0aGlzLiN3YXRjaFNyYy5iaW5kKHRoaXMpKTtcbiAgfVxuICAjd2F0Y2hTcmMoKSB7XG4gICAgY29uc3Qgc3JjID0gdGhpcy5zcmMoKTtcbiAgICBpZiAoIXNyYy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuI2lmcmFtZS5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgXCJcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHBhcmFtcyA9IHBlZWsoKCkgPT4gdGhpcy5idWlsZFBhcmFtcygpKTtcbiAgICB0aGlzLiNpZnJhbWUuc2V0QXR0cmlidXRlKFwic3JjXCIsIGFwcGVuZFBhcmFtc1RvVVJMKHNyYywgcGFyYW1zKSk7XG4gIH1cbiAgcG9zdE1lc3NhZ2UobWVzc2FnZSwgdGFyZ2V0KSB7XG4gICAgaWYgKElTX1NFUlZFUikgcmV0dXJuO1xuICAgIHRoaXMuI2lmcmFtZS5jb250ZW50V2luZG93Py5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeShtZXNzYWdlKSwgdGFyZ2V0ID8/IFwiKlwiKTtcbiAgfVxuICAjb25XaW5kb3dNZXNzYWdlKGV2ZW50KSB7XG4gICAgY29uc3Qgb3JpZ2luID0gdGhpcy5nZXRPcmlnaW4oKSwgaXNPcmlnaW5NYXRjaCA9IChldmVudC5zb3VyY2UgPT09IG51bGwgfHwgZXZlbnQuc291cmNlID09PSB0aGlzLiNpZnJhbWU/LmNvbnRlbnRXaW5kb3cpICYmICghaXNTdHJpbmcob3JpZ2luKSB8fCBvcmlnaW4gPT09IGV2ZW50Lm9yaWdpbik7XG4gICAgaWYgKCFpc09yaWdpbk1hdGNoKSByZXR1cm47XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgaWYgKG1lc3NhZ2UpIHRoaXMub25NZXNzYWdlKG1lc3NhZ2UsIGV2ZW50KTtcbiAgICAgIHJldHVybjtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgfVxuICAgIGlmIChldmVudC5kYXRhKSB0aGlzLm9uTWVzc2FnZShldmVudC5kYXRhLCBldmVudCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgRW1iZWRQcm92aWRlciB9O1xuIl0sIm5hbWVzIjpbImFwcGVuZFBhcmFtc1RvVVJMIiwiSVNfU0VSVkVSIiwic2lnbmFsIiwibGlzdGVuRXZlbnQiLCJlZmZlY3QiLCJwZWVrIiwiaXNTdHJpbmciLCJFbWJlZFByb3ZpZGVyIiwiaWZyYW1lIiwiY29uc3RydWN0b3IiLCJzcmMiLCJyZWZlcnJlclBvbGljeSIsInNldEF0dHJpYnV0ZSIsInNldHVwIiwid2luZG93IiwiYmluZCIsIm9uTG9hZCIsImxlbmd0aCIsInBhcmFtcyIsImJ1aWxkUGFyYW1zIiwicG9zdE1lc3NhZ2UiLCJtZXNzYWdlIiwidGFyZ2V0IiwiY29udGVudFdpbmRvdyIsIkpTT04iLCJzdHJpbmdpZnkiLCJldmVudCIsIm9yaWdpbiIsImdldE9yaWdpbiIsImlzT3JpZ2luTWF0Y2giLCJzb3VyY2UiLCJwYXJzZSIsImRhdGEiLCJvbk1lc3NhZ2UiLCJlIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D8t5kEKd.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-DUlCophs.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-DUlCophs.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARIAKeyShortcuts: () => (/* binding */ ARIAKeyShortcuts),\n/* harmony export */   AUDIO_EXTENSIONS: () => (/* binding */ AUDIO_EXTENSIONS),\n/* harmony export */   AUDIO_TYPES: () => (/* binding */ AUDIO_TYPES),\n/* harmony export */   AirPlayButtonInstance: () => (/* binding */ AirPlayButtonInstance),\n/* harmony export */   AudioGainSliderInstance: () => (/* binding */ AudioGainSliderInstance),\n/* harmony export */   AudioProviderLoader: () => (/* binding */ AudioProviderLoader),\n/* harmony export */   AudioTrackList: () => (/* binding */ AudioTrackList),\n/* harmony export */   CaptionButtonInstance: () => (/* binding */ CaptionButtonInstance),\n/* harmony export */   CaptionsInstance: () => (/* binding */ CaptionsInstance),\n/* harmony export */   ControlsGroupInstance: () => (/* binding */ ControlsGroupInstance),\n/* harmony export */   ControlsInstance: () => (/* binding */ ControlsInstance),\n/* harmony export */   DASHProviderLoader: () => (/* binding */ DASHProviderLoader),\n/* harmony export */   DASH_VIDEO_EXTENSIONS: () => (/* binding */ DASH_VIDEO_EXTENSIONS),\n/* harmony export */   DASH_VIDEO_TYPES: () => (/* binding */ DASH_VIDEO_TYPES),\n/* harmony export */   FullscreenButtonInstance: () => (/* binding */ FullscreenButtonInstance),\n/* harmony export */   FullscreenController: () => (/* binding */ FullscreenController),\n/* harmony export */   GestureInstance: () => (/* binding */ GestureInstance),\n/* harmony export */   GoogleCastButtonInstance: () => (/* binding */ GoogleCastButtonInstance),\n/* harmony export */   HLSProviderLoader: () => (/* binding */ HLSProviderLoader),\n/* harmony export */   HLS_VIDEO_EXTENSIONS: () => (/* binding */ HLS_VIDEO_EXTENSIONS),\n/* harmony export */   HLS_VIDEO_TYPES: () => (/* binding */ HLS_VIDEO_TYPES),\n/* harmony export */   HTMLAirPlayAdapter: () => (/* binding */ HTMLAirPlayAdapter),\n/* harmony export */   HTMLMediaProvider: () => (/* binding */ HTMLMediaProvider),\n/* harmony export */   IS_CHROME: () => (/* binding */ IS_CHROME),\n/* harmony export */   IS_IOS: () => (/* binding */ IS_IOS),\n/* harmony export */   IS_SERVER: () => (/* binding */ IS_SERVER),\n/* harmony export */   List: () => (/* binding */ List),\n/* harmony export */   ListSymbol: () => (/* binding */ ListSymbol),\n/* harmony export */   LiveButtonInstance: () => (/* binding */ LiveButtonInstance),\n/* harmony export */   LocalMediaStorage: () => (/* binding */ LocalMediaStorage),\n/* harmony export */   Logger: () => (/* binding */ Logger),\n/* harmony export */   MEDIA_KEY_SHORTCUTS: () => (/* binding */ MEDIA_KEY_SHORTCUTS),\n/* harmony export */   MediaAnnouncerInstance: () => (/* binding */ MediaAnnouncerInstance),\n/* harmony export */   MediaControls: () => (/* binding */ MediaControls),\n/* harmony export */   MediaPlayerInstance: () => (/* binding */ MediaPlayerInstance),\n/* harmony export */   MediaProviderInstance: () => (/* binding */ MediaProviderInstance),\n/* harmony export */   MediaRemoteControl: () => (/* binding */ MediaRemoteControl),\n/* harmony export */   MenuButtonInstance: () => (/* binding */ MenuButtonInstance),\n/* harmony export */   MenuInstance: () => (/* binding */ MenuInstance),\n/* harmony export */   MenuItemInstance: () => (/* binding */ MenuItemInstance),\n/* harmony export */   MenuItemsInstance: () => (/* binding */ MenuItemsInstance),\n/* harmony export */   MenuPortalInstance: () => (/* binding */ MenuPortalInstance),\n/* harmony export */   MuteButtonInstance: () => (/* binding */ MuteButtonInstance),\n/* harmony export */   PIPButtonInstance: () => (/* binding */ PIPButtonInstance),\n/* harmony export */   PlayButtonInstance: () => (/* binding */ PlayButtonInstance),\n/* harmony export */   PosterInstance: () => (/* binding */ PosterInstance),\n/* harmony export */   Primitive: () => (/* binding */ Primitive),\n/* harmony export */   QualitySliderInstance: () => (/* binding */ QualitySliderInstance),\n/* harmony export */   QualitySymbol: () => (/* binding */ QualitySymbol),\n/* harmony export */   RAFLoop: () => (/* binding */ RAFLoop),\n/* harmony export */   RadioGroupController: () => (/* binding */ RadioGroupController),\n/* harmony export */   RadioGroupInstance: () => (/* binding */ RadioGroupInstance),\n/* harmony export */   RadioInstance: () => (/* binding */ RadioInstance),\n/* harmony export */   ScreenOrientationController: () => (/* binding */ ScreenOrientationController),\n/* harmony export */   SeekButtonInstance: () => (/* binding */ SeekButtonInstance),\n/* harmony export */   SliderChaptersInstance: () => (/* binding */ SliderChaptersInstance),\n/* harmony export */   SliderInstance: () => (/* binding */ SliderInstance),\n/* harmony export */   SliderPreviewInstance: () => (/* binding */ SliderPreviewInstance),\n/* harmony export */   SliderThumbnailInstance: () => (/* binding */ SliderThumbnailInstance),\n/* harmony export */   SliderValueInstance: () => (/* binding */ SliderValueInstance),\n/* harmony export */   SliderVideoInstance: () => (/* binding */ SliderVideoInstance),\n/* harmony export */   SpeedSliderInstance: () => (/* binding */ SpeedSliderInstance),\n/* harmony export */   TextRenderers: () => (/* binding */ TextRenderers),\n/* harmony export */   TextTrack: () => (/* binding */ TextTrack),\n/* harmony export */   TextTrackList: () => (/* binding */ TextTrackList),\n/* harmony export */   TextTrackSymbol: () => (/* binding */ TextTrackSymbol),\n/* harmony export */   ThumbnailInstance: () => (/* binding */ ThumbnailInstance),\n/* harmony export */   ThumbnailsLoader: () => (/* binding */ ThumbnailsLoader),\n/* harmony export */   TimeInstance: () => (/* binding */ TimeInstance),\n/* harmony export */   TimeRange: () => (/* binding */ TimeRange),\n/* harmony export */   TimeSliderInstance: () => (/* binding */ TimeSliderInstance),\n/* harmony export */   ToggleButtonInstance: () => (/* binding */ ToggleButtonInstance),\n/* harmony export */   TooltipContentInstance: () => (/* binding */ TooltipContentInstance),\n/* harmony export */   TooltipInstance: () => (/* binding */ TooltipInstance),\n/* harmony export */   TooltipTriggerInstance: () => (/* binding */ TooltipTriggerInstance),\n/* harmony export */   VIDEO_EXTENSIONS: () => (/* binding */ VIDEO_EXTENSIONS),\n/* harmony export */   VIDEO_TYPES: () => (/* binding */ VIDEO_TYPES),\n/* harmony export */   VideoProvider: () => (/* binding */ VideoProvider),\n/* harmony export */   VideoProviderLoader: () => (/* binding */ VideoProviderLoader),\n/* harmony export */   VideoQualityList: () => (/* binding */ VideoQualityList),\n/* harmony export */   VimeoProviderLoader: () => (/* binding */ VimeoProviderLoader),\n/* harmony export */   VolumeSliderInstance: () => (/* binding */ VolumeSliderInstance),\n/* harmony export */   YouTubeProviderLoader: () => (/* binding */ YouTubeProviderLoader),\n/* harmony export */   appendParamsToURL: () => (/* binding */ appendParamsToURL),\n/* harmony export */   boundTime: () => (/* binding */ boundTime),\n/* harmony export */   canChangeVolume: () => (/* binding */ canChangeVolume),\n/* harmony export */   canFullscreen: () => (/* binding */ canFullscreen),\n/* harmony export */   canGoogleCastSrc: () => (/* binding */ canGoogleCastSrc),\n/* harmony export */   canOrientScreen: () => (/* binding */ canOrientScreen),\n/* harmony export */   canPlayHLSNatively: () => (/* binding */ canPlayHLSNatively),\n/* harmony export */   canRotateScreen: () => (/* binding */ canRotateScreen),\n/* harmony export */   canUsePictureInPicture: () => (/* binding */ canUsePictureInPicture),\n/* harmony export */   canUseVideoPresentation: () => (/* binding */ canUseVideoPresentation),\n/* harmony export */   coerceToError: () => (/* binding */ coerceToError),\n/* harmony export */   findActiveCue: () => (/* binding */ findActiveCue),\n/* harmony export */   formatSpokenTime: () => (/* binding */ formatSpokenTime),\n/* harmony export */   formatTime: () => (/* binding */ formatTime),\n/* harmony export */   getDownloadFile: () => (/* binding */ getDownloadFile),\n/* harmony export */   getTimeRangesEnd: () => (/* binding */ getTimeRangesEnd),\n/* harmony export */   getTimeRangesStart: () => (/* binding */ getTimeRangesStart),\n/* harmony export */   isAudioProvider: () => (/* binding */ isAudioProvider),\n/* harmony export */   isAudioSrc: () => (/* binding */ isAudioSrc),\n/* harmony export */   isCueActive: () => (/* binding */ isCueActive),\n/* harmony export */   isDASHProvider: () => (/* binding */ isDASHProvider),\n/* harmony export */   isDASHSrc: () => (/* binding */ isDASHSrc),\n/* harmony export */   isGoogleCastProvider: () => (/* binding */ isGoogleCastProvider),\n/* harmony export */   isHLSProvider: () => (/* binding */ isHLSProvider),\n/* harmony export */   isHLSSrc: () => (/* binding */ isHLSSrc),\n/* harmony export */   isHLSSupported: () => (/* binding */ isHLSSupported),\n/* harmony export */   isHTMLAudioElement: () => (/* binding */ isHTMLAudioElement),\n/* harmony export */   isHTMLIFrameElement: () => (/* binding */ isHTMLIFrameElement),\n/* harmony export */   isHTMLMediaElement: () => (/* binding */ isHTMLMediaElement),\n/* harmony export */   isHTMLVideoElement: () => (/* binding */ isHTMLVideoElement),\n/* harmony export */   isMediaStream: () => (/* binding */ isMediaStream),\n/* harmony export */   isRemotionProvider: () => (/* binding */ isRemotionProvider),\n/* harmony export */   isRemotionSrc: () => (/* binding */ isRemotionSrc),\n/* harmony export */   isTrackCaptionKind: () => (/* binding */ isTrackCaptionKind),\n/* harmony export */   isVideoProvider: () => (/* binding */ isVideoProvider),\n/* harmony export */   isVideoQualitySrc: () => (/* binding */ isVideoQualitySrc),\n/* harmony export */   isVideoSrc: () => (/* binding */ isVideoSrc),\n/* harmony export */   isVimeoProvider: () => (/* binding */ isVimeoProvider),\n/* harmony export */   isYouTubeProvider: () => (/* binding */ isYouTubeProvider),\n/* harmony export */   loadScript: () => (/* binding */ loadScript),\n/* harmony export */   mediaContext: () => (/* binding */ mediaContext),\n/* harmony export */   mediaState: () => (/* binding */ mediaState),\n/* harmony export */   menuContext: () => (/* binding */ menuContext),\n/* harmony export */   normalizeTimeIntervals: () => (/* binding */ normalizeTimeIntervals),\n/* harmony export */   parseJSONCaptionsFile: () => (/* binding */ parseJSONCaptionsFile),\n/* harmony export */   preconnect: () => (/* binding */ preconnect),\n/* harmony export */   sliderState: () => (/* binding */ sliderState),\n/* harmony export */   softResetMediaState: () => (/* binding */ softResetMediaState),\n/* harmony export */   sortVideoQualities: () => (/* binding */ sortVideoQualities),\n/* harmony export */   updateSliderPreviewPlacement: () => (/* binding */ updateSliderPreviewPlacement),\n/* harmony export */   updateTimeIntervals: () => (/* binding */ updateTimeIntervals),\n/* harmony export */   useMediaContext: () => (/* binding */ useMediaContext),\n/* harmony export */   useMediaState: () => (/* binding */ useMediaState),\n/* harmony export */   useMediaStore: () => (/* binding */ useMediaStore),\n/* harmony export */   useSliderState: () => (/* binding */ useSliderState),\n/* harmony export */   useSliderStore: () => (/* binding */ useSliderStore),\n/* harmony export */   watchActiveTextTrack: () => (/* binding */ watchActiveTextTrack),\n/* harmony export */   watchCueTextChange: () => (/* binding */ watchCueTextChange)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-D_bWd66h.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js\");\n/* harmony import */ var _floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @floating-ui/dom */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* __next_internal_client_entry_do_not_use__ ARIAKeyShortcuts,AUDIO_EXTENSIONS,AUDIO_TYPES,AirPlayButtonInstance,AudioGainSliderInstance,AudioProviderLoader,AudioTrackList,CaptionButtonInstance,CaptionsInstance,ControlsGroupInstance,ControlsInstance,DASHProviderLoader,DASH_VIDEO_EXTENSIONS,DASH_VIDEO_TYPES,FullscreenButtonInstance,FullscreenController,GestureInstance,GoogleCastButtonInstance,HLSProviderLoader,HLS_VIDEO_EXTENSIONS,HLS_VIDEO_TYPES,HTMLAirPlayAdapter,HTMLMediaProvider,IS_CHROME,IS_IOS,IS_SERVER,List,ListSymbol,LiveButtonInstance,LocalMediaStorage,Logger,MEDIA_KEY_SHORTCUTS,MediaAnnouncerInstance,MediaControls,MediaPlayerInstance,MediaProviderInstance,MediaRemoteControl,MenuButtonInstance,MenuInstance,MenuItemInstance,MenuItemsInstance,MenuPortalInstance,MuteButtonInstance,PIPButtonInstance,PlayButtonInstance,PosterInstance,Primitive,QualitySliderInstance,QualitySymbol,RAFLoop,RadioGroupController,RadioGroupInstance,RadioInstance,ScreenOrientationController,SeekButtonInstance,SliderChaptersInstance,SliderInstance,SliderPreviewInstance,SliderThumbnailInstance,SliderValueInstance,SliderVideoInstance,SpeedSliderInstance,TextRenderers,TextTrack,TextTrackList,TextTrackSymbol,ThumbnailInstance,ThumbnailsLoader,TimeInstance,TimeRange,TimeSliderInstance,ToggleButtonInstance,TooltipContentInstance,TooltipInstance,TooltipTriggerInstance,VIDEO_EXTENSIONS,VIDEO_TYPES,VideoProvider,VideoProviderLoader,VideoQualityList,VimeoProviderLoader,VolumeSliderInstance,YouTubeProviderLoader,appendParamsToURL,boundTime,canChangeVolume,canFullscreen,canGoogleCastSrc,canOrientScreen,canPlayHLSNatively,canRotateScreen,canUsePictureInPicture,canUseVideoPresentation,coerceToError,findActiveCue,formatSpokenTime,formatTime,getDownloadFile,getTimeRangesEnd,getTimeRangesStart,isAudioProvider,isAudioSrc,isCueActive,isDASHProvider,isDASHSrc,isGoogleCastProvider,isHLSProvider,isHLSSrc,isHLSSupported,isHTMLAudioElement,isHTMLIFrameElement,isHTMLMediaElement,isHTMLVideoElement,isMediaStream,isRemotionProvider,isRemotionSrc,isTrackCaptionKind,isVideoProvider,isVideoQualitySrc,isVideoSrc,isVimeoProvider,isYouTubeProvider,loadScript,mediaContext,mediaState,menuContext,normalizeTimeIntervals,parseJSONCaptionsFile,preconnect,sliderState,softResetMediaState,sortVideoQualities,updateSliderPreviewPlacement,updateTimeIntervals,useMediaContext,useMediaState,useMediaStore,useSliderState,useSliderStore,watchActiveTextTrack,watchCueTextChange auto */ \n\n\nfunction isVideoQualitySrc(src) {\n    return !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src) && \"width\" in src && \"height\" in src && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(src.width) && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(src.height);\n}\nconst IS_SERVER = typeof document === \"undefined\";\nconst UA = IS_SERVER ? \"\" : navigator?.userAgent.toLowerCase() || \"\";\nconst IS_IOS = !IS_SERVER && /iphone|ipad|ipod|ios|crios|fxios/i.test(UA);\nconst IS_IPHONE = !IS_SERVER && /(iphone|ipod)/gi.test(navigator?.platform || \"\");\nconst IS_CHROME = !IS_SERVER && !!window.chrome;\nconst IS_SAFARI = !IS_SERVER && (!!window.safari || IS_IOS);\nfunction canOrientScreen() {\n    return canRotateScreen() && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(screen.orientation.unlock);\n}\nfunction canRotateScreen() {\n    return !IS_SERVER && !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(window.screen.orientation) && !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(window.screen.orientation.lock);\n}\nfunction canPlayAudioType(audio, type) {\n    if (IS_SERVER) return false;\n    if (!audio) audio = document.createElement(\"audio\");\n    return audio.canPlayType(type).length > 0;\n}\nfunction canPlayVideoType(video, type) {\n    if (IS_SERVER) return false;\n    if (!video) video = document.createElement(\"video\");\n    return video.canPlayType(type).length > 0;\n}\nfunction canPlayHLSNatively(video) {\n    if (IS_SERVER) return false;\n    if (!video) video = document.createElement(\"video\");\n    return video.canPlayType(\"application/vnd.apple.mpegurl\").length > 0;\n}\nfunction canUsePictureInPicture(video) {\n    if (IS_SERVER) return false;\n    return !!document.pictureInPictureEnabled && !video?.disablePictureInPicture;\n}\nfunction canUseVideoPresentation(video) {\n    if (IS_SERVER) return false;\n    return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(video?.webkitSupportsPresentationMode) && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(video?.webkitSetPresentationMode);\n}\nasync function canChangeVolume() {\n    const video = document.createElement(\"video\");\n    video.volume = 0.5;\n    await (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.waitTimeout)(0);\n    return video.volume === 0.5;\n}\nfunction getMediaSource() {\n    return IS_SERVER ? void 0 : window?.ManagedMediaSource ?? window?.MediaSource ?? window?.WebKitMediaSource;\n}\nfunction getSourceBuffer() {\n    return IS_SERVER ? void 0 : window?.SourceBuffer ?? window?.WebKitSourceBuffer;\n}\nfunction isHLSSupported() {\n    if (IS_SERVER) return false;\n    const MediaSource = getMediaSource();\n    if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(MediaSource)) return false;\n    const isTypeSupported = MediaSource && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(MediaSource.isTypeSupported) && MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\n    const SourceBuffer = getSourceBuffer();\n    const isSourceBufferValid = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(SourceBuffer) || !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(SourceBuffer.prototype) && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(SourceBuffer.prototype.appendBuffer) && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(SourceBuffer.prototype.remove);\n    return !!isTypeSupported && !!isSourceBufferValid;\n}\nfunction isDASHSupported() {\n    return isHLSSupported();\n}\nclass TimeRange {\n    #ranges;\n    get length() {\n        return this.#ranges.length;\n    }\n    constructor(start, end){\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(start)) {\n            this.#ranges = start;\n        } else if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(start) && !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(end)) {\n            this.#ranges = [\n                [\n                    start,\n                    end\n                ]\n            ];\n        } else {\n            this.#ranges = [];\n        }\n    }\n    start(index) {\n        throwIfEmpty(this.#ranges.length);\n        throwIfOutOfRange(\"start\", index, this.#ranges.length - 1);\n        return this.#ranges[index][0] ?? Infinity;\n    }\n    end(index) {\n        throwIfEmpty(this.#ranges.length);\n        throwIfOutOfRange(\"end\", index, this.#ranges.length - 1);\n        return this.#ranges[index][1] ?? Infinity;\n    }\n}\nfunction getTimeRangesStart(range) {\n    if (!range.length) return null;\n    let min = range.start(0);\n    for(let i = 1; i < range.length; i++){\n        const value = range.start(i);\n        if (value < min) min = value;\n    }\n    return min;\n}\nfunction getTimeRangesEnd(range) {\n    if (!range.length) return null;\n    let max = range.end(0);\n    for(let i = 1; i < range.length; i++){\n        const value = range.end(i);\n        if (value > max) max = value;\n    }\n    return max;\n}\nfunction throwIfEmpty(length) {\n    if (!length) throw new Error(\"`TimeRanges` object is empty.\");\n}\nfunction throwIfOutOfRange(fnName, index, end) {\n    if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(index) || index < 0 || index > end) {\n        throw new Error(`Failed to execute '${fnName}' on 'TimeRanges': The index provided (${index}) is non-numeric or out of bounds (0-${end}).`);\n    }\n}\nfunction normalizeTimeIntervals(intervals) {\n    if (intervals.length <= 1) {\n        return intervals;\n    }\n    intervals.sort((a, b)=>a[0] - b[0]);\n    let normalized = [], current = intervals[0];\n    for(let i = 1; i < intervals.length; i++){\n        const next = intervals[i];\n        if (current[1] >= next[0] - 1) {\n            current = [\n                current[0],\n                Math.max(current[1], next[1])\n            ];\n        } else {\n            normalized.push(current);\n            current = next;\n        }\n    }\n    normalized.push(current);\n    return normalized;\n}\nfunction updateTimeIntervals(intervals, interval, value) {\n    let start = interval[0], end = interval[1];\n    if (value < start) {\n        return [\n            value,\n            -1\n        ];\n    } else if (value === start) {\n        return interval;\n    } else if (start === -1) {\n        interval[0] = value;\n        return interval;\n    } else if (value > start) {\n        interval[1] = value;\n        if (end === -1) intervals.push(interval);\n    }\n    normalizeTimeIntervals(intervals);\n    return interval;\n}\nconst AUDIO_EXTENSIONS = /\\.(m4a|m4b|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx|flac)($|\\?)/i;\nconst AUDIO_TYPES = /* @__PURE__ */ new Set([\n    \"audio/mpeg\",\n    \"audio/ogg\",\n    \"audio/3gp\",\n    \"audio/mp3\",\n    \"audio/webm\",\n    \"audio/flac\",\n    \"audio/m4a\",\n    \"audio/m4b\",\n    \"audio/mp4a\",\n    \"audio/mp4\"\n]);\nconst VIDEO_EXTENSIONS = /\\.(mp4|og[gv]|webm|mov|m4v)(#t=[,\\d+]+)?($|\\?)/i;\nconst VIDEO_TYPES = /* @__PURE__ */ new Set([\n    \"video/mp4\",\n    \"video/webm\",\n    \"video/3gp\",\n    \"video/ogg\",\n    \"video/avi\",\n    \"video/mpeg\"\n]);\nconst HLS_VIDEO_EXTENSIONS = /\\.(m3u8)($|\\?)/i;\nconst DASH_VIDEO_EXTENSIONS = /\\.(mpd)($|\\?)/i;\nconst HLS_VIDEO_TYPES = /* @__PURE__ */ new Set([\n    // Apple sanctioned\n    \"application/vnd.apple.mpegurl\",\n    // Apple sanctioned for backwards compatibility\n    \"audio/mpegurl\",\n    // Very common\n    \"audio/x-mpegurl\",\n    // Very common\n    \"application/x-mpegurl\",\n    // Included for completeness\n    \"video/x-mpegurl\",\n    \"video/mpegurl\",\n    \"application/mpegurl\"\n]);\nconst DASH_VIDEO_TYPES = /* @__PURE__ */ new Set([\n    \"application/dash+xml\"\n]);\nfunction isAudioSrc({ src, type }) {\n    return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src) ? AUDIO_EXTENSIONS.test(src) || AUDIO_TYPES.has(type) || src.startsWith(\"blob:\") && type === \"audio/object\" : type === \"audio/object\";\n}\nfunction isVideoSrc(src) {\n    return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src) ? VIDEO_EXTENSIONS.test(src.src) || VIDEO_TYPES.has(src.type) || src.src.startsWith(\"blob:\") && src.type === \"video/object\" || isHLSSrc(src) && (IS_SERVER || canPlayHLSNatively()) : src.type === \"video/object\";\n}\nfunction isHLSSrc({ src, type }) {\n    return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src) && HLS_VIDEO_EXTENSIONS.test(src) || HLS_VIDEO_TYPES.has(type);\n}\nfunction isDASHSrc({ src, type }) {\n    return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src) && DASH_VIDEO_EXTENSIONS.test(src) || DASH_VIDEO_TYPES.has(type);\n}\nfunction canGoogleCastSrc(src) {\n    return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src) && (isAudioSrc(src) || isVideoSrc(src) || isHLSSrc(src));\n}\nfunction isMediaStream(src) {\n    return !IS_SERVER && typeof window.MediaStream !== \"undefined\" && src instanceof window.MediaStream;\n}\nfunction appendParamsToURL(baseUrl, params) {\n    const url = new URL(baseUrl);\n    for (const key of Object.keys(params)){\n        url.searchParams.set(key, params[key] + \"\");\n    }\n    return url.toString();\n}\nfunction preconnect(url, rel = \"preconnect\") {\n    if (IS_SERVER) return false;\n    const exists = document.querySelector(`link[href=\"${url}\"]`);\n    if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNull)(exists)) return true;\n    const link = document.createElement(\"link\");\n    link.rel = rel;\n    link.href = url;\n    link.crossOrigin = \"true\";\n    document.head.append(link);\n    return true;\n}\nconst pendingRequests = {};\nfunction loadScript(src) {\n    if (pendingRequests[src]) return pendingRequests[src].promise;\n    const promise = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.deferredPromise)(), exists = document.querySelector(`script[src=\"${src}\"]`);\n    if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNull)(exists)) {\n        promise.resolve();\n        return promise.promise;\n    }\n    pendingRequests[src] = promise;\n    const script = document.createElement(\"script\");\n    script.src = src;\n    script.onload = ()=>{\n        promise.resolve();\n        delete pendingRequests[src];\n    };\n    script.onerror = ()=>{\n        promise.reject();\n        delete pendingRequests[src];\n    };\n    setTimeout(()=>document.head.append(script), 0);\n    return promise.promise;\n}\nfunction getRequestCredentials(crossOrigin) {\n    return crossOrigin === \"use-credentials\" ? \"include\" : (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(crossOrigin) ? \"same-origin\" : void 0;\n}\nfunction getDownloadFile({ title, src, download }) {\n    const url = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isBoolean)(download) || download === \"\" ? src.src : (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(download) ? download : download?.url;\n    if (!isValidFileDownload({\n        url,\n        src,\n        download\n    })) return null;\n    return {\n        url,\n        name: !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isBoolean)(download) && !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(download) && download?.filename || title.toLowerCase() || \"media\"\n    };\n}\nfunction isValidFileDownload({ url, src, download }) {\n    return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(url) && (download && download !== true || isAudioSrc(src) || isVideoSrc(src));\n}\nconst CROSS_ORIGIN = Symbol(\"TEXT_TRACK_CROSS_ORIGIN\"), READY_STATE = Symbol(\"TEXT_TRACK_READY_STATE\"), UPDATE_ACTIVE_CUES = Symbol(\"TEXT_TRACK_UPDATE_ACTIVE_CUES\"), CAN_LOAD = Symbol(\"TEXT_TRACK_CAN_LOAD\"), ON_MODE_CHANGE = Symbol(\"TEXT_TRACK_ON_MODE_CHANGE\"), NATIVE = Symbol(\"TEXT_TRACK_NATIVE\"), NATIVE_HLS = Symbol(\"TEXT_TRACK_NATIVE_HLS\");\nconst TextTrackSymbol = {\n    crossOrigin: CROSS_ORIGIN,\n    readyState: READY_STATE,\n    updateActiveCues: UPDATE_ACTIVE_CUES,\n    canLoad: CAN_LOAD,\n    onModeChange: ON_MODE_CHANGE,\n    native: NATIVE,\n    nativeHLS: NATIVE_HLS\n};\nfunction findActiveCue(cues, time) {\n    for(let i = 0, len = cues.length; i < len; i++){\n        if (isCueActive(cues[i], time)) return cues[i];\n    }\n    return null;\n}\nfunction isCueActive(cue, time) {\n    return time >= cue.startTime && time < cue.endTime;\n}\nfunction watchActiveTextTrack(tracks, kind, onChange) {\n    let currentTrack = null, scope = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.getScope)();\n    function onModeChange() {\n        const kinds = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(kind) ? [\n            kind\n        ] : kind, track = tracks.toArray().find((track2)=>kinds.includes(track2.kind) && track2.mode === \"showing\");\n        if (track === currentTrack) return;\n        if (!track) {\n            onChange(null);\n            currentTrack = null;\n            return;\n        }\n        if (track.readyState == 2) {\n            onChange(track);\n        } else {\n            onChange(null);\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.scoped)(()=>{\n                const off = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(track, \"load\", ()=>{\n                    onChange(track);\n                    off();\n                }, {\n                    once: true\n                });\n            }, scope);\n        }\n        currentTrack = track;\n    }\n    onModeChange();\n    return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(tracks, \"mode-change\", onModeChange);\n}\nfunction watchCueTextChange(tracks, kind, callback) {\n    watchActiveTextTrack(tracks, kind, (track)=>{\n        if (!track) {\n            callback(\"\");\n            return;\n        }\n        const onCueChange = ()=>{\n            const activeCue = track?.activeCues[0];\n            callback(activeCue?.text || \"\");\n        };\n        onCueChange();\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(track, \"cue-change\", onCueChange);\n    });\n}\nlet prop1, prop2, prop3, prop4;\nclass TextTrack extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsTarget {\n    static{\n        prop1 = TextTrackSymbol.readyState;\n        prop2 = TextTrackSymbol.crossOrigin;\n        prop3 = TextTrackSymbol.onModeChange;\n        prop4 = TextTrackSymbol.native;\n    }\n    static createId(track) {\n        return `vds-${track.type}-${track.kind}-${track.src ?? track.label ?? \"?\"}`;\n    }\n    #canLoad;\n    #currentTime;\n    #mode;\n    #metadata;\n    #regions;\n    #cues;\n    #activeCues;\n    get metadata() {\n        return this.#metadata;\n    }\n    get regions() {\n        return this.#regions;\n    }\n    get cues() {\n        return this.#cues;\n    }\n    get activeCues() {\n        return this.#activeCues;\n    }\n    /**\n   * - 0: Not Loading\n   * - 1: Loading\n   * - 2: Ready\n   * - 3: Error\n   */ get readyState() {\n        return this[TextTrackSymbol.readyState];\n    }\n    get mode() {\n        return this.#mode;\n    }\n    set mode(mode) {\n        this.setMode(mode);\n    }\n    constructor(init){\n        super(), this.id = \"\", this.label = \"\", this.language = \"\", this.default = false, this.#canLoad = false, this.#currentTime = 0, this.#mode = \"disabled\", this.#metadata = {}, this.#regions = [], this.#cues = [], this.#activeCues = [], /** @internal */ this[prop1] = 0, /** @internal */ this[prop3] = null, /** @internal */ this[prop4] = null;\n        for (const prop of Object.keys(init))this[prop] = init[prop];\n        if (!this.type) this.type = \"vtt\";\n        if (!IS_SERVER && init.content) {\n            this.#parseContent(init);\n        } else if (!init.src) {\n            this[TextTrackSymbol.readyState] = 2;\n        }\n        if (isTrackCaptionKind(this) && !this.label) {\n            console.warn(`[vidstack] captions text track created without label: \\`${this.src}\\``);\n        }\n    }\n    addCue(cue, trigger) {\n        let i = 0, length = this.#cues.length;\n        for(i = 0; i < length; i++)if (cue.endTime <= this.#cues[i].startTime) break;\n        if (i === length) this.#cues.push(cue);\n        else this.#cues.splice(i, 0, cue);\n        if (!(cue instanceof TextTrackCue)) {\n            this[TextTrackSymbol.native]?.track.addCue(cue);\n        }\n        this.dispatchEvent(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"add-cue\", {\n            detail: cue,\n            trigger\n        }));\n        if (isCueActive(cue, this.#currentTime)) {\n            this[TextTrackSymbol.updateActiveCues](this.#currentTime, trigger);\n        }\n    }\n    removeCue(cue, trigger) {\n        const index = this.#cues.indexOf(cue);\n        if (index >= 0) {\n            const isActive = this.#activeCues.includes(cue);\n            this.#cues.splice(index, 1);\n            this[TextTrackSymbol.native]?.track.removeCue(cue);\n            this.dispatchEvent(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"remove-cue\", {\n                detail: cue,\n                trigger\n            }));\n            if (isActive) {\n                this[TextTrackSymbol.updateActiveCues](this.#currentTime, trigger);\n            }\n        }\n    }\n    setMode(mode, trigger) {\n        if (this.#mode === mode) return;\n        this.#mode = mode;\n        if (mode === \"disabled\") {\n            this.#activeCues = [];\n            this.#activeCuesChanged();\n        } else if (this.readyState === 2) {\n            this[TextTrackSymbol.updateActiveCues](this.#currentTime, trigger);\n        } else {\n            this.#load();\n        }\n        this.dispatchEvent(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"mode-change\", {\n            detail: this,\n            trigger\n        }));\n        this[TextTrackSymbol.onModeChange]?.();\n    }\n    /** @internal */ [TextTrackSymbol.updateActiveCues](currentTime, trigger) {\n        this.#currentTime = currentTime;\n        if (this.mode === \"disabled\" || !this.#cues.length) return;\n        const activeCues = [];\n        for(let i = 0, length = this.#cues.length; i < length; i++){\n            const cue = this.#cues[i];\n            if (isCueActive(cue, currentTime)) activeCues.push(cue);\n        }\n        let changed = activeCues.length !== this.#activeCues.length;\n        if (!changed) {\n            for(let i = 0; i < activeCues.length; i++){\n                if (!this.#activeCues.includes(activeCues[i])) {\n                    changed = true;\n                    break;\n                }\n            }\n        }\n        this.#activeCues = activeCues;\n        if (changed) this.#activeCuesChanged(trigger);\n    }\n    /** @internal */ [TextTrackSymbol.canLoad]() {\n        this.#canLoad = true;\n        if (this.#mode !== \"disabled\") this.#load();\n    }\n    #parseContent(init) {\n        __webpack_require__.e(/*! import() */ \"vendor-chunks/media-captions\").then(__webpack_require__.bind(__webpack_require__, /*! media-captions */ \"(ssr)/./node_modules/media-captions/dist/dev.js\")).then(({ parseText, VTTCue, VTTRegion })=>{\n            if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(init.content) || init.type === \"json\") {\n                this.#parseJSON(init.content, VTTCue, VTTRegion);\n                if (this.readyState !== 3) this.#ready();\n            } else {\n                parseText(init.content, {\n                    type: init.type\n                }).then(({ cues, regions })=>{\n                    this.#cues = cues;\n                    this.#regions = regions;\n                    this.#ready();\n                });\n            }\n        });\n    }\n    async #load() {\n        if (!this.#canLoad || this[TextTrackSymbol.readyState] > 0) return;\n        this[TextTrackSymbol.readyState] = 1;\n        this.dispatchEvent(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"load-start\"));\n        if (!this.src) {\n            this.#ready();\n            return;\n        }\n        try {\n            const { parseResponse, VTTCue, VTTRegion } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/media-captions\").then(__webpack_require__.bind(__webpack_require__, /*! media-captions */ \"(ssr)/./node_modules/media-captions/dist/dev.js\")), crossOrigin = this[TextTrackSymbol.crossOrigin]?.();\n            const response = fetch(this.src, {\n                headers: this.type === \"json\" ? {\n                    \"Content-Type\": \"application/json\"\n                } : void 0,\n                credentials: getRequestCredentials(crossOrigin)\n            });\n            if (this.type === \"json\") {\n                this.#parseJSON(await (await response).text(), VTTCue, VTTRegion);\n            } else {\n                const { errors, metadata, regions, cues } = await parseResponse(response, {\n                    type: this.type,\n                    encoding: this.encoding\n                });\n                if (errors[0]?.code === 0) {\n                    throw errors[0];\n                } else {\n                    this.#metadata = metadata;\n                    this.#regions = regions;\n                    this.#cues = cues;\n                }\n            }\n            this.#ready();\n        } catch (error) {\n            this.#error(error);\n        }\n    }\n    #ready() {\n        this[TextTrackSymbol.readyState] = 2;\n        if (!this.src || this.type !== \"vtt\") {\n            const native = this[TextTrackSymbol.native];\n            if (native && !native.managed) {\n                for (const cue of this.#cues)native.track.addCue(cue);\n            }\n        }\n        const loadEvent = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"load\");\n        this[TextTrackSymbol.updateActiveCues](this.#currentTime, loadEvent);\n        this.dispatchEvent(loadEvent);\n    }\n    #error(error) {\n        this[TextTrackSymbol.readyState] = 3;\n        this.dispatchEvent(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"error\", {\n            detail: error\n        }));\n    }\n    #parseJSON(json, VTTCue, VTTRegion) {\n        try {\n            const { regions, cues } = parseJSONCaptionsFile(json, VTTCue, VTTRegion);\n            this.#regions = regions;\n            this.#cues = cues;\n        } catch (error) {\n            {\n                console.error(`[vidstack] failed to parse JSON captions at: \\`${this.src}\\`\n\n`, error);\n            }\n            this.#error(error);\n        }\n    }\n    #activeCuesChanged(trigger) {\n        this.dispatchEvent(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"cue-change\", {\n            trigger\n        }));\n    }\n}\nconst captionRE = /captions|subtitles/;\nfunction isTrackCaptionKind(track) {\n    return captionRE.test(track.kind);\n}\nfunction parseJSONCaptionsFile(json, Cue, Region) {\n    const content = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(json) ? JSON.parse(json) : json;\n    let regions = [], cues = [];\n    if (content.regions && Region) {\n        regions = content.regions.map((region)=>Object.assign(new Region(), region));\n    }\n    if (content.cues || (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(content)) {\n        cues = ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(content) ? content : content.cues).filter((content2)=>(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(content2.startTime) && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(content2.endTime)).map((cue)=>Object.assign(new Cue(0, 0, \"\"), cue));\n    }\n    return {\n        regions,\n        cues\n    };\n}\nconst mediaState = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.State({\n    artist: \"\",\n    artwork: null,\n    audioTrack: null,\n    audioTracks: [],\n    autoPlay: false,\n    autoPlayError: null,\n    audioGain: null,\n    buffered: new TimeRange(),\n    canLoad: false,\n    canLoadPoster: false,\n    canFullscreen: false,\n    canOrientScreen: canOrientScreen(),\n    canPictureInPicture: false,\n    canPlay: false,\n    clipStartTime: 0,\n    clipEndTime: 0,\n    controls: false,\n    get iOSControls () {\n        return IS_IPHONE && this.mediaType === \"video\" && (!this.playsInline || !_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.fscreen.fullscreenEnabled && this.fullscreen);\n    },\n    get nativeControls () {\n        return this.controls || this.iOSControls;\n    },\n    controlsVisible: false,\n    get controlsHidden () {\n        return !this.controlsVisible;\n    },\n    crossOrigin: null,\n    ended: false,\n    error: null,\n    fullscreen: false,\n    get loop () {\n        return this.providedLoop || this.userPrefersLoop;\n    },\n    logLevel: \"warn\",\n    mediaType: \"unknown\",\n    muted: false,\n    paused: true,\n    played: new TimeRange(),\n    playing: false,\n    playsInline: false,\n    pictureInPicture: false,\n    preload: \"metadata\",\n    playbackRate: 1,\n    qualities: [],\n    quality: null,\n    autoQuality: false,\n    canSetQuality: true,\n    canSetPlaybackRate: true,\n    canSetVolume: false,\n    canSetAudioGain: false,\n    seekable: new TimeRange(),\n    seeking: false,\n    source: {\n        src: \"\",\n        type: \"\"\n    },\n    sources: [],\n    started: false,\n    textTracks: [],\n    textTrack: null,\n    get hasCaptions () {\n        return this.textTracks.filter(isTrackCaptionKind).length > 0;\n    },\n    volume: 1,\n    waiting: false,\n    realCurrentTime: 0,\n    get currentTime () {\n        return this.ended ? this.duration : this.clipStartTime > 0 ? Math.max(0, Math.min(this.realCurrentTime - this.clipStartTime, this.duration)) : this.realCurrentTime;\n    },\n    providedDuration: -1,\n    intrinsicDuration: 0,\n    get duration () {\n        return this.seekableWindow;\n    },\n    get title () {\n        return this.providedTitle || this.inferredTitle;\n    },\n    get poster () {\n        return this.providedPoster || this.inferredPoster;\n    },\n    get viewType () {\n        return this.providedViewType !== \"unknown\" ? this.providedViewType : this.inferredViewType;\n    },\n    get streamType () {\n        return this.providedStreamType !== \"unknown\" ? this.providedStreamType : this.inferredStreamType;\n    },\n    get currentSrc () {\n        return this.source;\n    },\n    get bufferedStart () {\n        const start = getTimeRangesStart(this.buffered) ?? 0;\n        return Math.max(start, this.clipStartTime);\n    },\n    get bufferedEnd () {\n        const end = getTimeRangesEnd(this.buffered) ?? 0;\n        return Math.min(this.seekableEnd, Math.max(0, end - this.clipStartTime));\n    },\n    get bufferedWindow () {\n        return Math.max(0, this.bufferedEnd - this.bufferedStart);\n    },\n    get seekableStart () {\n        if (this.isLiveDVR && this.liveDVRWindow > 0) {\n            return Math.max(0, this.seekableEnd - this.liveDVRWindow);\n        }\n        const start = getTimeRangesStart(this.seekable) ?? 0;\n        return Math.max(start, this.clipStartTime);\n    },\n    get seekableEnd () {\n        if (this.providedDuration > 0) return this.providedDuration;\n        const end = this.liveSyncPosition > 0 ? this.liveSyncPosition : this.canPlay ? getTimeRangesEnd(this.seekable) ?? Infinity : 0;\n        return this.clipEndTime > 0 ? Math.min(this.clipEndTime, end) : end;\n    },\n    get seekableWindow () {\n        const window1 = this.seekableEnd - this.seekableStart;\n        return !isNaN(window1) ? Math.max(0, window1) : Infinity;\n    },\n    // ~~ remote playback ~~\n    canAirPlay: false,\n    canGoogleCast: false,\n    remotePlaybackState: \"disconnected\",\n    remotePlaybackType: \"none\",\n    remotePlaybackLoader: null,\n    remotePlaybackInfo: null,\n    get isAirPlayConnected () {\n        return this.remotePlaybackType === \"airplay\" && this.remotePlaybackState === \"connected\";\n    },\n    get isGoogleCastConnected () {\n        return this.remotePlaybackType === \"google-cast\" && this.remotePlaybackState === \"connected\";\n    },\n    // ~~ responsive design ~~\n    pointer: \"fine\",\n    orientation: \"landscape\",\n    width: 0,\n    height: 0,\n    mediaWidth: 0,\n    mediaHeight: 0,\n    lastKeyboardAction: null,\n    // ~~ user props ~~\n    userBehindLiveEdge: false,\n    // ~~ live props ~~\n    liveEdgeTolerance: 10,\n    minLiveDVRWindow: 60,\n    get canSeek () {\n        return /unknown|on-demand|:dvr/.test(this.streamType) && Number.isFinite(this.duration) && (!this.isLiveDVR || this.duration >= this.liveDVRWindow);\n    },\n    get live () {\n        return this.streamType.includes(\"live\") || !Number.isFinite(this.duration);\n    },\n    get liveEdgeStart () {\n        return this.live && Number.isFinite(this.seekableEnd) ? Math.max(0, this.seekableEnd - this.liveEdgeTolerance) : 0;\n    },\n    get liveEdge () {\n        return this.live && (!this.canSeek || !this.userBehindLiveEdge && this.currentTime >= this.liveEdgeStart);\n    },\n    get liveEdgeWindow () {\n        return this.live && Number.isFinite(this.seekableEnd) ? this.seekableEnd - this.liveEdgeStart : 0;\n    },\n    get isLiveDVR () {\n        return /:dvr/.test(this.streamType);\n    },\n    get liveDVRWindow () {\n        return Math.max(this.inferredLiveDVRWindow, this.minLiveDVRWindow);\n    },\n    // ~~ internal props ~~\n    autoPlaying: false,\n    providedTitle: \"\",\n    inferredTitle: \"\",\n    providedLoop: false,\n    userPrefersLoop: false,\n    providedPoster: \"\",\n    inferredPoster: \"\",\n    inferredViewType: \"unknown\",\n    providedViewType: \"unknown\",\n    providedStreamType: \"unknown\",\n    inferredStreamType: \"unknown\",\n    liveSyncPosition: null,\n    inferredLiveDVRWindow: 0,\n    savedState: null\n});\nconst RESET_ON_SRC_QUALITY_CHANGE = /* @__PURE__ */ new Set([\n    \"autoPlayError\",\n    \"autoPlaying\",\n    \"buffered\",\n    \"canPlay\",\n    \"error\",\n    \"paused\",\n    \"played\",\n    \"playing\",\n    \"seekable\",\n    \"seeking\",\n    \"waiting\"\n]);\nconst RESET_ON_SRC_CHANGE = /* @__PURE__ */ new Set([\n    ...RESET_ON_SRC_QUALITY_CHANGE,\n    \"ended\",\n    \"inferredPoster\",\n    \"inferredStreamType\",\n    \"inferredTitle\",\n    \"intrinsicDuration\",\n    \"inferredLiveDVRWindow\",\n    \"liveSyncPosition\",\n    \"realCurrentTime\",\n    \"savedState\",\n    \"started\",\n    \"userBehindLiveEdge\"\n]);\nfunction softResetMediaState($media, isSourceQualityChange = false) {\n    const filter = isSourceQualityChange ? RESET_ON_SRC_QUALITY_CHANGE : RESET_ON_SRC_CHANGE;\n    mediaState.reset($media, (prop)=>filter.has(prop));\n    (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.tick)();\n}\nfunction boundTime(time, store) {\n    const clippedTime = time + store.clipStartTime(), isStart = Math.floor(time) === Math.floor(store.seekableStart()), isEnd = Math.floor(clippedTime) === Math.floor(store.seekableEnd());\n    if (isStart) {\n        return store.seekableStart();\n    }\n    if (isEnd) {\n        return store.seekableEnd();\n    }\n    if (store.isLiveDVR() && store.liveDVRWindow() > 0 && clippedTime < store.seekableEnd() - store.liveDVRWindow()) {\n        return store.bufferedStart();\n    }\n    return Math.min(Math.max(store.seekableStart() + 0.1, clippedTime), store.seekableEnd() - 0.1);\n}\nconst mediaContext = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nfunction useMediaContext() {\n    return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(mediaContext);\n}\nconst GROUPED_LOG = Symbol(\"GROUPED_LOG\");\nclass GroupedLog {\n    constructor(logger, level, title, root, parent){\n        this[GROUPED_LOG] = true;\n        this.logs = [];\n        this.logger = logger;\n        this.level = level;\n        this.title = title;\n        this.root = root;\n        this.parent = parent;\n    }\n    log(...data) {\n        this.logs.push({\n            data\n        });\n        return this;\n    }\n    labelledLog(label, ...data) {\n        this.logs.push({\n            label,\n            data\n        });\n        return this;\n    }\n    groupStart(title) {\n        return new GroupedLog(this.logger, this.level, title, this.root ?? this, this);\n    }\n    groupEnd() {\n        this.parent?.logs.push(this);\n        return this.parent ?? this;\n    }\n    dispatch() {\n        return this.logger.dispatch(this.level, this.root ?? this);\n    }\n}\nfunction isGroupedLog(data) {\n    return !!data?.[GROUPED_LOG];\n}\nclass Logger {\n    #target;\n    error(...data) {\n        return this.dispatch(\"error\", ...data);\n    }\n    warn(...data) {\n        return this.dispatch(\"warn\", ...data);\n    }\n    info(...data) {\n        return this.dispatch(\"info\", ...data);\n    }\n    debug(...data) {\n        return this.dispatch(\"debug\", ...data);\n    }\n    errorGroup(title) {\n        return new GroupedLog(this, \"error\", title);\n    }\n    warnGroup(title) {\n        return new GroupedLog(this, \"warn\", title);\n    }\n    infoGroup(title) {\n        return new GroupedLog(this, \"info\", title);\n    }\n    debugGroup(title) {\n        return new GroupedLog(this, \"debug\", title);\n    }\n    setTarget(newTarget) {\n        this.#target = newTarget;\n    }\n    dispatch(level, ...data) {\n        return this.#target?.dispatchEvent(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"vds-log\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n                level,\n                data\n            }\n        })) || false;\n    }\n    constructor(){\n        this.#target = null;\n    }\n}\nclass MediaRemoteControl {\n    #target;\n    #player;\n    #prevTrackIndex;\n    #logger;\n    constructor(logger = new Logger()){\n        this.#target = null;\n        this.#player = null;\n        this.#prevTrackIndex = -1;\n        this.#logger = logger;\n    }\n    /**\n   * Set the target from which to dispatch media requests events from. The events should bubble\n   * up from this target to the player element.\n   *\n   * @example\n   * ```ts\n   * const button = document.querySelector('button');\n   * remote.setTarget(button);\n   * ```\n   */ setTarget(target) {\n        this.#target = target;\n        this.#logger?.setTarget(target);\n    }\n    /**\n   * Returns the current player element. This method will attempt to find the player by\n   * searching up from either the given `target` or default target set via `remote.setTarget`.\n   *\n   * @example\n   * ```ts\n   * const player = remote.getPlayer();\n   * ```\n   */ getPlayer(target) {\n        if (this.#player) return this.#player;\n        (target ?? this.#target)?.dispatchEvent(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"find-media-player\", {\n            detail: (player)=>void (this.#player = player),\n            bubbles: true,\n            composed: true\n        }));\n        return this.#player;\n    }\n    /**\n   * Set the current player element so the remote can support toggle methods such as\n   * `togglePaused` as they rely on the current media state.\n   */ setPlayer(player) {\n        this.#player = player;\n    }\n    /**\n   * Dispatch a request to start the media loading process. This will only work if the media\n   * player has been initialized with a custom loading strategy `load=\"custom\">`.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/loading#load-strategies}\n   */ startLoading(trigger) {\n        this.#dispatchRequest(\"media-start-loading\", trigger);\n    }\n    /**\n   * Dispatch a request to start the poster loading process. This will only work if the media\n   * player has been initialized with a custom poster loading strategy `posterLoad=\"custom\">`.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/loading#load-strategies}\n   */ startLoadingPoster(trigger) {\n        this.#dispatchRequest(\"media-poster-start-loading\", trigger);\n    }\n    /**\n   * Dispatch a request to connect to AirPlay.\n   *\n   * @see {@link https://www.apple.com/au/airplay}\n   */ requestAirPlay(trigger) {\n        this.#dispatchRequest(\"media-airplay-request\", trigger);\n    }\n    /**\n   * Dispatch a request to connect to Google Cast.\n   *\n   * @see {@link https://developers.google.com/cast/docs/overview}\n   */ requestGoogleCast(trigger) {\n        this.#dispatchRequest(\"media-google-cast-request\", trigger);\n    }\n    /**\n   * Dispatch a request to begin/resume media playback.\n   */ play(trigger) {\n        this.#dispatchRequest(\"media-play-request\", trigger);\n    }\n    /**\n   * Dispatch a request to pause media playback.\n   */ pause(trigger) {\n        this.#dispatchRequest(\"media-pause-request\", trigger);\n    }\n    /**\n   * Dispatch a request to set the media volume to mute (0).\n   */ mute(trigger) {\n        this.#dispatchRequest(\"media-mute-request\", trigger);\n    }\n    /**\n   * Dispatch a request to unmute the media volume and set it back to it's previous state.\n   */ unmute(trigger) {\n        this.#dispatchRequest(\"media-unmute-request\", trigger);\n    }\n    /**\n   * Dispatch a request to enter fullscreen.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/api/fullscreen#remote-control}\n   */ enterFullscreen(target, trigger) {\n        this.#dispatchRequest(\"media-enter-fullscreen-request\", trigger, target);\n    }\n    /**\n   * Dispatch a request to exit fullscreen.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/api/fullscreen#remote-control}\n   */ exitFullscreen(target, trigger) {\n        this.#dispatchRequest(\"media-exit-fullscreen-request\", trigger, target);\n    }\n    /**\n   * Dispatch a request to lock the screen orientation.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/screen-orientation#remote-control}\n   */ lockScreenOrientation(lockType, trigger) {\n        this.#dispatchRequest(\"media-orientation-lock-request\", trigger, lockType);\n    }\n    /**\n   * Dispatch a request to unlock the screen orientation.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/api/screen-orientation#remote-control}\n   */ unlockScreenOrientation(trigger) {\n        this.#dispatchRequest(\"media-orientation-unlock-request\", trigger);\n    }\n    /**\n   * Dispatch a request to enter picture-in-picture mode.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/api/picture-in-picture#remote-control}\n   */ enterPictureInPicture(trigger) {\n        this.#dispatchRequest(\"media-enter-pip-request\", trigger);\n    }\n    /**\n   * Dispatch a request to exit picture-in-picture mode.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/api/picture-in-picture#remote-control}\n   */ exitPictureInPicture(trigger) {\n        this.#dispatchRequest(\"media-exit-pip-request\", trigger);\n    }\n    /**\n   * Notify the media player that a seeking process is happening and to seek to the given `time`.\n   */ seeking(time, trigger) {\n        this.#dispatchRequest(\"media-seeking-request\", trigger, time);\n    }\n    /**\n   * Notify the media player that a seeking operation has completed and to seek to the given `time`.\n   * This is generally called after a series of `remote.seeking()` calls.\n   */ seek(time, trigger) {\n        this.#dispatchRequest(\"media-seek-request\", trigger, time);\n    }\n    seekToLiveEdge(trigger) {\n        this.#dispatchRequest(\"media-live-edge-request\", trigger);\n    }\n    /**\n   * Dispatch a request to update the length of the media in seconds.\n   *\n   * @example\n   * ```ts\n   * remote.changeDuration(100); // 100 seconds\n   * ```\n   */ changeDuration(duration, trigger) {\n        this.#dispatchRequest(\"media-duration-change-request\", trigger, duration);\n    }\n    /**\n   * Dispatch a request to update the clip start time. This is the time at which media playback\n   * should start at.\n   *\n   * @example\n   * ```ts\n   * remote.changeClipStart(100); // start at 100 seconds\n   * ```\n   */ changeClipStart(startTime, trigger) {\n        this.#dispatchRequest(\"media-clip-start-change-request\", trigger, startTime);\n    }\n    /**\n   * Dispatch a request to update the clip end time. This is the time at which media playback\n   * should end at.\n   *\n   * @example\n   * ```ts\n   * remote.changeClipEnd(100); // end at 100 seconds\n   * ```\n   */ changeClipEnd(endTime, trigger) {\n        this.#dispatchRequest(\"media-clip-end-change-request\", trigger, endTime);\n    }\n    /**\n   * Dispatch a request to update the media volume to the given `volume` level which is a value\n   * between 0 and 1.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/api/audio-gain#remote-control}\n   * @example\n   * ```ts\n   * remote.changeVolume(0); // 0%\n   * remote.changeVolume(0.05); // 5%\n   * remote.changeVolume(0.5); // 50%\n   * remote.changeVolume(0.75); // 70%\n   * remote.changeVolume(1); // 100%\n   * ```\n   */ changeVolume(volume, trigger) {\n        this.#dispatchRequest(\"media-volume-change-request\", trigger, Math.max(0, Math.min(1, volume)));\n    }\n    /**\n   * Dispatch a request to change the current audio track.\n   *\n   * @example\n   * ```ts\n   * remote.changeAudioTrack(1); // track at index 1\n   * ```\n   */ changeAudioTrack(index, trigger) {\n        this.#dispatchRequest(\"media-audio-track-change-request\", trigger, index);\n    }\n    /**\n   * Dispatch a request to change the video quality. The special value `-1` represents auto quality\n   * selection.\n   *\n   * @example\n   * ```ts\n   * remote.changeQuality(-1); // auto\n   * remote.changeQuality(1); // quality at index 1\n   * ```\n   */ changeQuality(index, trigger) {\n        this.#dispatchRequest(\"media-quality-change-request\", trigger, index);\n    }\n    /**\n   * Request auto quality selection.\n   */ requestAutoQuality(trigger) {\n        this.changeQuality(-1, trigger);\n    }\n    /**\n   * Dispatch a request to change the mode of the text track at the given index.\n   *\n   * @example\n   * ```ts\n   * remote.changeTextTrackMode(1, 'showing'); // track at index 1\n   * ```\n   */ changeTextTrackMode(index, mode, trigger) {\n        this.#dispatchRequest(\"media-text-track-change-request\", trigger, {\n            index,\n            mode\n        });\n    }\n    /**\n   * Dispatch a request to change the media playback rate.\n   *\n   * @example\n   * ```ts\n   * remote.changePlaybackRate(0.5); // Half the normal speed\n   * remote.changePlaybackRate(1); // Normal speed\n   * remote.changePlaybackRate(1.5); // 50% faster than normal\n   * remote.changePlaybackRate(2); // Double the normal speed\n   * ```\n   */ changePlaybackRate(rate, trigger) {\n        this.#dispatchRequest(\"media-rate-change-request\", trigger, rate);\n    }\n    /**\n   * Dispatch a request to change the media audio gain.\n   *\n   * @example\n   * ```ts\n   * remote.changeAudioGain(1); // Disable audio gain\n   * remote.changeAudioGain(1.5); // 50% louder\n   * remote.changeAudioGain(2); // 100% louder\n   * ```\n   */ changeAudioGain(gain, trigger) {\n        this.#dispatchRequest(\"media-audio-gain-change-request\", trigger, gain);\n    }\n    /**\n   * Dispatch a request to resume idle tracking on controls.\n   */ resumeControls(trigger) {\n        this.#dispatchRequest(\"media-resume-controls-request\", trigger);\n    }\n    /**\n   * Dispatch a request to pause controls idle tracking. Pausing tracking will result in the\n   * controls being visible until `remote.resumeControls()` is called. This method\n   * is generally used when building custom controls and you'd like to prevent the UI from\n   * disappearing.\n   *\n   * @example\n   * ```ts\n   * // Prevent controls hiding while menu is being interacted with.\n   * function onSettingsOpen() {\n   *   remote.pauseControls();\n   * }\n   *\n   * function onSettingsClose() {\n   *   remote.resumeControls();\n   * }\n   * ```\n   */ pauseControls(trigger) {\n        this.#dispatchRequest(\"media-pause-controls-request\", trigger);\n    }\n    /**\n   * Dispatch a request to toggle the media playback state.\n   */ togglePaused(trigger) {\n        const player = this.getPlayer(trigger?.target);\n        if (!player) {\n            this.#noPlayerWarning(this.togglePaused.name);\n            return;\n        }\n        if (player.state.paused) this.play(trigger);\n        else this.pause(trigger);\n    }\n    /**\n   * Dispatch a request to toggle the controls visibility.\n   */ toggleControls(trigger) {\n        const player = this.getPlayer(trigger?.target);\n        if (!player) {\n            this.#noPlayerWarning(this.toggleControls.name);\n            return;\n        }\n        if (!player.controls.showing) {\n            player.controls.show(0, trigger);\n        } else {\n            player.controls.hide(0, trigger);\n        }\n    }\n    /**\n   * Dispatch a request to toggle the media muted state.\n   */ toggleMuted(trigger) {\n        const player = this.getPlayer(trigger?.target);\n        if (!player) {\n            this.#noPlayerWarning(this.toggleMuted.name);\n            return;\n        }\n        if (player.state.muted) this.unmute(trigger);\n        else this.mute(trigger);\n    }\n    /**\n   * Dispatch a request to toggle the media fullscreen state.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/api/fullscreen#remote-control}\n   */ toggleFullscreen(target, trigger) {\n        const player = this.getPlayer(trigger?.target);\n        if (!player) {\n            this.#noPlayerWarning(this.toggleFullscreen.name);\n            return;\n        }\n        if (player.state.fullscreen) this.exitFullscreen(target, trigger);\n        else this.enterFullscreen(target, trigger);\n    }\n    /**\n   * Dispatch a request to toggle the media picture-in-picture mode.\n   *\n   * @docs {@link https://www.vidstack.io/docs/player/api/picture-in-picture#remote-control}\n   */ togglePictureInPicture(trigger) {\n        const player = this.getPlayer(trigger?.target);\n        if (!player) {\n            this.#noPlayerWarning(this.togglePictureInPicture.name);\n            return;\n        }\n        if (player.state.pictureInPicture) this.exitPictureInPicture(trigger);\n        else this.enterPictureInPicture(trigger);\n    }\n    /**\n   * Show captions.\n   */ showCaptions(trigger) {\n        const player = this.getPlayer(trigger?.target);\n        if (!player) {\n            this.#noPlayerWarning(this.showCaptions.name);\n            return;\n        }\n        let tracks = player.state.textTracks, index = this.#prevTrackIndex;\n        if (!tracks[index] || !isTrackCaptionKind(tracks[index])) {\n            index = -1;\n        }\n        if (index === -1) {\n            index = tracks.findIndex((track)=>isTrackCaptionKind(track) && track.default);\n        }\n        if (index === -1) {\n            index = tracks.findIndex((track)=>isTrackCaptionKind(track));\n        }\n        if (index >= 0) this.changeTextTrackMode(index, \"showing\", trigger);\n        this.#prevTrackIndex = -1;\n    }\n    /**\n   * Turn captions off.\n   */ disableCaptions(trigger) {\n        const player = this.getPlayer(trigger?.target);\n        if (!player) {\n            this.#noPlayerWarning(this.disableCaptions.name);\n            return;\n        }\n        const tracks = player.state.textTracks, track = player.state.textTrack;\n        if (track) {\n            const index = tracks.indexOf(track);\n            this.changeTextTrackMode(index, \"disabled\", trigger);\n            this.#prevTrackIndex = index;\n        }\n    }\n    /**\n   * Dispatch a request to toggle the current captions mode.\n   */ toggleCaptions(trigger) {\n        const player = this.getPlayer(trigger?.target);\n        if (!player) {\n            this.#noPlayerWarning(this.toggleCaptions.name);\n            return;\n        }\n        if (player.state.textTrack) {\n            this.disableCaptions();\n        } else {\n            this.showCaptions();\n        }\n    }\n    userPrefersLoopChange(prefersLoop, trigger) {\n        this.#dispatchRequest(\"media-user-loop-change-request\", trigger, prefersLoop);\n    }\n    #dispatchRequest(type, trigger, detail) {\n        const request = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(type, {\n            bubbles: true,\n            composed: true,\n            cancelable: true,\n            detail,\n            trigger\n        });\n        let target = trigger?.target || null;\n        if (target && target instanceof _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component) target = target.el;\n        const shouldUsePlayer = !target || target === document || target === window || target === document.body || this.#player?.el && target instanceof Node && !this.#player.el.contains(target);\n        target = shouldUsePlayer ? this.#target ?? this.getPlayer()?.el : target ?? this.#target;\n        {\n            this.#logger?.debugGroup(`\\u{1F4E8} dispatching \\`${type}\\``).labelledLog(\"Target\", target).labelledLog(\"Player\", this.#player).labelledLog(\"Request Event\", request).labelledLog(\"Trigger Event\", trigger).dispatch();\n        }\n        if (this.#player) {\n            if (type === \"media-play-request\" && !this.#player.state.canLoad) {\n                target?.dispatchEvent(request);\n            } else {\n                this.#player.canPlayQueue.enqueue(type, ()=>target?.dispatchEvent(request));\n            }\n        } else {\n            target?.dispatchEvent(request);\n        }\n    }\n    #noPlayerWarning(method) {\n        {\n            console.warn(`[vidstack] attempted to call \\`MediaRemoteControl.${method}\\`() that requires player but failed because remote could not find a parent player element from target`);\n        }\n    }\n}\nclass LocalMediaStorage {\n    #data;\n    async getVolume() {\n        return this.#data.volume;\n    }\n    async setVolume(volume) {\n        this.#data.volume = volume;\n        this.save();\n    }\n    async getMuted() {\n        return this.#data.muted;\n    }\n    async setMuted(muted) {\n        this.#data.muted = muted;\n        this.save();\n    }\n    async getTime() {\n        return this.#data.time;\n    }\n    async setTime(time, ended) {\n        const shouldClear = time < 0;\n        this.#data.time = !shouldClear ? time : null;\n        if (shouldClear || ended) this.saveTime();\n        else this.saveTimeThrottled();\n    }\n    async getLang() {\n        return this.#data.lang;\n    }\n    async setLang(lang) {\n        this.#data.lang = lang;\n        this.save();\n    }\n    async getCaptions() {\n        return this.#data.captions;\n    }\n    async setCaptions(enabled) {\n        this.#data.captions = enabled;\n        this.save();\n    }\n    async getPlaybackRate() {\n        return this.#data.rate;\n    }\n    async setPlaybackRate(rate) {\n        this.#data.rate = rate;\n        this.save();\n    }\n    async getAudioGain() {\n        return this.#data.audioGain;\n    }\n    async setAudioGain(gain) {\n        this.#data.audioGain = gain;\n        this.save();\n    }\n    async getVideoQuality() {\n        return this.#data.quality;\n    }\n    async setVideoQuality(quality) {\n        this.#data.quality = quality;\n        this.save();\n    }\n    onChange(src, mediaId, playerId = \"vds-player\") {\n        const savedData = playerId ? localStorage.getItem(playerId) : null, savedTime = mediaId ? localStorage.getItem(mediaId) : null;\n        this.playerId = playerId;\n        this.mediaId = mediaId;\n        this.#data = {\n            volume: null,\n            muted: null,\n            audioGain: null,\n            lang: null,\n            captions: null,\n            rate: null,\n            quality: null,\n            ...savedData ? JSON.parse(savedData) : {},\n            time: savedTime ? +savedTime : null\n        };\n    }\n    save() {\n        if (IS_SERVER || !this.playerId) return;\n        const data = JSON.stringify({\n            ...this.#data,\n            time: void 0\n        });\n        localStorage.setItem(this.playerId, data);\n    }\n    saveTime() {\n        if (IS_SERVER || !this.mediaId) return;\n        const data = (this.#data.time ?? 0).toString();\n        localStorage.setItem(this.mediaId, data);\n    }\n    constructor(){\n        this.playerId = \"vds-player\";\n        this.mediaId = null;\n        this.#data = {\n            volume: null,\n            muted: null,\n            audioGain: null,\n            time: null,\n            lang: null,\n            captions: null,\n            rate: null,\n            quality: null\n        };\n        this.saveTimeThrottled = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.functionThrottle)(this.saveTime.bind(this), 1e3);\n    }\n}\nconst ADD = Symbol(\"LIST_ADD\"), REMOVE = Symbol(\"LIST_REMOVE\"), RESET = Symbol(\"LIST_RESET\"), SELECT = Symbol(\"LIST_SELECT\"), READONLY = Symbol(\"LIST_READONLY\"), SET_READONLY = Symbol(\"LIST_SET_READONLY\"), ON_RESET = Symbol(\"LIST_ON_RESET\"), ON_REMOVE = Symbol(\"LIST_ON_REMOVE\"), ON_USER_SELECT = Symbol(\"LIST_ON_USER_SELECT\");\nconst ListSymbol = {\n    add: ADD,\n    remove: REMOVE,\n    reset: RESET,\n    select: SELECT,\n    readonly: READONLY,\n    setReadonly: SET_READONLY,\n    onReset: ON_RESET,\n    onRemove: ON_REMOVE,\n    onUserSelect: ON_USER_SELECT\n};\nlet prop5;\nclass List extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsTarget {\n    static{\n        prop5 = ListSymbol.readonly;\n    }\n    get length() {\n        return this.items.length;\n    }\n    get readonly() {\n        return this[ListSymbol.readonly];\n    }\n    /**\n   * Returns the index of the first occurrence of the given item, or -1 if it is not present.\n   */ indexOf(item) {\n        return this.items.indexOf(item);\n    }\n    /**\n   * Returns an item matching the given `id`, or `null` if not present.\n   */ getById(id) {\n        if (id === \"\") return null;\n        return this.items.find((item)=>item.id === id) ?? null;\n    }\n    /**\n   * Transform list to an array.\n   */ toArray() {\n        return [\n            ...this.items\n        ];\n    }\n    [Symbol.iterator]() {\n        return this.items.values();\n    }\n    /** @internal */ [ListSymbol.add](item, trigger) {\n        const index = this.items.length;\n        if (!(\"\" + index in this)) {\n            Object.defineProperty(this, index, {\n                get () {\n                    return this.items[index];\n                }\n            });\n        }\n        if (this.items.includes(item)) return;\n        this.items.push(item);\n        this.dispatchEvent(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"add\", {\n            detail: item,\n            trigger\n        }));\n    }\n    /** @internal */ [ListSymbol.remove](item, trigger) {\n        const index = this.items.indexOf(item);\n        if (index >= 0) {\n            this[ListSymbol.onRemove]?.(item, trigger);\n            this.items.splice(index, 1);\n            this.dispatchEvent(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"remove\", {\n                detail: item,\n                trigger\n            }));\n        }\n    }\n    /** @internal */ [ListSymbol.reset](trigger) {\n        for (const item of [\n            ...this.items\n        ])this[ListSymbol.remove](item, trigger);\n        this.items = [];\n        this[ListSymbol.setReadonly](false, trigger);\n        this[ListSymbol.onReset]?.();\n    }\n    /** @internal */ [ListSymbol.setReadonly](readonly, trigger) {\n        if (this[ListSymbol.readonly] === readonly) return;\n        this[ListSymbol.readonly] = readonly;\n        this.dispatchEvent(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"readonly-change\", {\n            detail: readonly,\n            trigger\n        }));\n    }\n    constructor(...args){\n        super(...args), this.items = [], /** @internal */ this[prop5] = false;\n    }\n}\nconst SELECTED = Symbol(\"SELECTED\");\nclass SelectList extends List {\n    get selected() {\n        return this.items.find((item)=>item.selected) ?? null;\n    }\n    get selectedIndex() {\n        return this.items.findIndex((item)=>item.selected);\n    }\n    /** @internal */ [ListSymbol.onRemove](item, trigger) {\n        this[ListSymbol.select](item, false, trigger);\n    }\n    /** @internal */ [ListSymbol.add](item, trigger) {\n        item[SELECTED] = false;\n        Object.defineProperty(item, \"selected\", {\n            get () {\n                return this[SELECTED];\n            },\n            set: (selected)=>{\n                if (this.readonly) return;\n                this[ListSymbol.onUserSelect]?.();\n                this[ListSymbol.select](item, selected);\n            }\n        });\n        super[ListSymbol.add](item, trigger);\n    }\n    /** @internal */ [ListSymbol.select](item, selected, trigger) {\n        if (selected === item?.[SELECTED]) return;\n        const prev = this.selected;\n        if (item) item[SELECTED] = selected;\n        const changed = !selected ? prev === item : prev !== item;\n        if (changed) {\n            if (prev) prev[SELECTED] = false;\n            this.dispatchEvent(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"change\", {\n                detail: {\n                    prev,\n                    current: this.selected\n                },\n                trigger\n            }));\n        }\n    }\n}\nclass AudioTrackList extends SelectList {\n}\nfunction round(num, decimalPlaces = 2) {\n    return Number(num.toFixed(decimalPlaces));\n}\nfunction getNumberOfDecimalPlaces(num) {\n    return String(num).split(\".\")[1]?.length ?? 0;\n}\nfunction clampNumber(min, value, max) {\n    return Math.max(min, Math.min(max, value));\n}\nfunction isEventInside(el, event1) {\n    const target = event1.composedPath()[0];\n    return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isDOMNode)(target) && el.contains(target);\n}\nconst rafJobs = /* @__PURE__ */ new Set();\nif (!IS_SERVER) {\n    let processJobs = function() {\n        for (const job of rafJobs){\n            try {\n                job();\n            } catch (e) {\n                console.error(`[vidstack] failed job:\n\n${e}`);\n            }\n        }\n        window.requestAnimationFrame(processJobs);\n    };\n    processJobs();\n}\nfunction scheduleRafJob(job) {\n    rafJobs.add(job);\n    return ()=>rafJobs.delete(job);\n}\nfunction setAttributeIfEmpty(target, name, value) {\n    if (!target.hasAttribute(name)) target.setAttribute(name, value);\n}\nfunction setARIALabel(target, $label) {\n    if (target.hasAttribute(\"aria-label\") || target.hasAttribute(\"data-no-label\")) return;\n    if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)($label)) {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(target, \"aria-label\", $label);\n        return;\n    }\n    function updateAriaDescription() {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(target, \"aria-label\", $label());\n    }\n    if (IS_SERVER) updateAriaDescription();\n    else (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(updateAriaDescription);\n}\nfunction isElementVisible(el) {\n    const style = getComputedStyle(el);\n    return style.display !== \"none\" && parseInt(style.opacity) > 0;\n}\nfunction checkVisibility(el) {\n    return !!el && (\"checkVisibility\" in el ? el.checkVisibility({\n        checkOpacity: true,\n        checkVisibilityCSS: true\n    }) : isElementVisible(el));\n}\nfunction observeVisibility(el, callback) {\n    return scheduleRafJob(()=>callback(checkVisibility(el)));\n}\nfunction isElementParent(owner, node, test) {\n    while(node){\n        if (node === owner) {\n            return true;\n        } else if (test?.(node)) {\n            break;\n        } else {\n            node = node.parentElement;\n        }\n    }\n    return false;\n}\nfunction onPress(target, handler) {\n    return new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(target).add(\"pointerup\", (event1)=>{\n        if (event1.button === 0 && !event1.defaultPrevented) handler(event1);\n    }).add(\"keydown\", (event1)=>{\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isKeyboardClick)(event1)) handler(event1);\n    });\n}\nfunction isTouchPinchEvent(event1) {\n    return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isTouchEvent)(event1) && (event1.touches.length > 1 || event1.changedTouches.length > 1);\n}\nfunction requestScopedAnimationFrame(callback) {\n    if (IS_SERVER) return callback();\n    let scope = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.getScope)(), id = window.requestAnimationFrame(()=>{\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.scoped)(callback, scope);\n        id = -1;\n    });\n    return ()=>void window.cancelAnimationFrame(id);\n}\nfunction autoPlacement(el, trigger, placement, { offsetVarName, xOffset, yOffset, ...options }) {\n    if (!el) return;\n    const floatingPlacement = placement.replace(\" \", \"-\").replace(\"-center\", \"\");\n    (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(el, \"visibility\", !trigger ? \"hidden\" : null);\n    if (!trigger) return;\n    let isTop = placement.includes(\"top\");\n    const negateX = (x)=>placement.includes(\"left\") ? `calc(-1 * ${x})` : x, negateY = (y)=>isTop ? `calc(-1 * ${y})` : y;\n    return (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.autoUpdate)(trigger, el, ()=>{\n        (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.computePosition)(trigger, el, {\n            placement: floatingPlacement,\n            middleware: [\n                ...options.middleware ?? [],\n                (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.flip)({\n                    fallbackAxisSideDirection: \"start\",\n                    crossAxis: false\n                }),\n                (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.shift)()\n            ],\n            ...options\n        }).then(({ x, y, middlewareData })=>{\n            const hasFlipped = !!middlewareData.flip?.index;\n            isTop = placement.includes(hasFlipped ? \"bottom\" : \"top\");\n            el.setAttribute(\"data-placement\", hasFlipped ? placement.startsWith(\"top\") ? placement.replace(\"top\", \"bottom\") : placement.replace(\"bottom\", \"top\") : placement);\n            Object.assign(el.style, {\n                top: `calc(${y + \"px\"} + ${negateY(yOffset ? yOffset + \"px\" : `var(--${offsetVarName}-y-offset, 0px)`)})`,\n                left: `calc(${x + \"px\"} + ${negateX(xOffset ? xOffset + \"px\" : `var(--${offsetVarName}-x-offset, 0px)`)})`\n            });\n        });\n    });\n}\nfunction hasAnimation(el) {\n    const styles = getComputedStyle(el);\n    return styles.animationName !== \"none\";\n}\nfunction isHTMLElement(el) {\n    return el instanceof HTMLElement;\n}\nclass NativeTextRenderer {\n    #display;\n    #video;\n    #track;\n    #tracks;\n    canRender(_, video) {\n        return !!video;\n    }\n    attach(video) {\n        this.#video = video;\n        if (video) video.textTracks.onchange = this.#onChange.bind(this);\n    }\n    addTrack(track) {\n        this.#tracks.add(track);\n        this.#attachTrack(track);\n    }\n    removeTrack(track) {\n        track[TextTrackSymbol.native]?.remove?.();\n        track[TextTrackSymbol.native] = null;\n        this.#tracks.delete(track);\n    }\n    changeTrack(track) {\n        const current = track?.[TextTrackSymbol.native];\n        if (current && current.track.mode !== \"showing\") {\n            current.track.mode = \"showing\";\n        }\n        this.#track = track;\n    }\n    setDisplay(display) {\n        this.#display = display;\n        this.#onChange();\n    }\n    detach() {\n        if (this.#video) this.#video.textTracks.onchange = null;\n        for (const track of this.#tracks)this.removeTrack(track);\n        this.#tracks.clear();\n        this.#video = null;\n        this.#track = null;\n    }\n    #attachTrack(track) {\n        if (!this.#video) return;\n        const el = track[TextTrackSymbol.native] ??= this.#createTrackElement(track);\n        if (isHTMLElement(el)) {\n            this.#video.append(el);\n            el.track.mode = el.default ? \"showing\" : \"disabled\";\n        }\n    }\n    #createTrackElement(track) {\n        const el = document.createElement(\"track\"), isDefault = track.default || track.mode === \"showing\", isSupported = track.src && track.type === \"vtt\";\n        el.id = track.id;\n        el.src = isSupported ? track.src : \"\";\n        el.label = track.label;\n        el.kind = track.kind;\n        el.default = isDefault;\n        track.language && (el.srclang = track.language);\n        if (isDefault && !isSupported) {\n            this.#copyCues(track, el.track);\n        }\n        return el;\n    }\n    #copyCues(track, native) {\n        if (track.src && track.type === \"vtt\" || native.cues?.length) return;\n        for (const cue of track.cues)native.addCue(cue);\n    }\n    #onChange(event1) {\n        for (const track of this.#tracks){\n            const native = track[TextTrackSymbol.native];\n            if (!native) continue;\n            if (!this.#display) {\n                native.track.mode = native.managed ? \"hidden\" : \"disabled\";\n                continue;\n            }\n            const isShowing = native.track.mode === \"showing\";\n            if (isShowing) this.#copyCues(track, native.track);\n            track.setMode(isShowing ? \"showing\" : \"disabled\", event1);\n        }\n    }\n    constructor(){\n        this.priority = 0;\n        this.#display = true;\n        this.#video = null;\n        this.#track = null;\n        this.#tracks = /* @__PURE__ */ new Set();\n    }\n}\nclass TextRenderers {\n    #video;\n    #textTracks;\n    #renderers;\n    #media;\n    #nativeDisplay;\n    #nativeRenderer;\n    #customRenderer;\n    constructor(media){\n        this.#video = null;\n        this.#renderers = [];\n        this.#nativeDisplay = false;\n        this.#nativeRenderer = null;\n        this.#customRenderer = null;\n        this.#media = media;\n        const textTracks = media.textTracks;\n        this.#textTracks = textTracks;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchControls.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this.#detach.bind(this));\n        new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(textTracks).add(\"add\", this.#onAddTrack.bind(this)).add(\"remove\", this.#onRemoveTrack.bind(this)).add(\"mode-change\", this.#update.bind(this));\n    }\n    #watchControls() {\n        const { nativeControls } = this.#media.$state;\n        this.#nativeDisplay = nativeControls();\n        this.#update();\n    }\n    add(renderer) {\n        this.#renderers.push(renderer);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.untrack)(this.#update.bind(this));\n    }\n    remove(renderer) {\n        renderer.detach();\n        this.#renderers.splice(this.#renderers.indexOf(renderer), 1);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.untrack)(this.#update.bind(this));\n    }\n    /** @internal */ attachVideo(video) {\n        requestAnimationFrame(()=>{\n            this.#video = video;\n            if (video) {\n                this.#nativeRenderer = new NativeTextRenderer();\n                this.#nativeRenderer.attach(video);\n                for (const track of this.#textTracks)this.#addNativeTrack(track);\n            }\n            this.#update();\n        });\n    }\n    #addNativeTrack(track) {\n        if (!isTrackCaptionKind(track)) return;\n        this.#nativeRenderer?.addTrack(track);\n    }\n    #removeNativeTrack(track) {\n        if (!isTrackCaptionKind(track)) return;\n        this.#nativeRenderer?.removeTrack(track);\n    }\n    #onAddTrack(event1) {\n        this.#addNativeTrack(event1.detail);\n    }\n    #onRemoveTrack(event1) {\n        this.#removeNativeTrack(event1.detail);\n    }\n    #update() {\n        const currentTrack = this.#textTracks.selected;\n        if (this.#video && (this.#nativeDisplay || currentTrack?.[TextTrackSymbol.nativeHLS])) {\n            this.#customRenderer?.changeTrack(null);\n            this.#nativeRenderer?.setDisplay(true);\n            this.#nativeRenderer?.changeTrack(currentTrack);\n            return;\n        }\n        this.#nativeRenderer?.setDisplay(false);\n        this.#nativeRenderer?.changeTrack(null);\n        if (!currentTrack) {\n            this.#customRenderer?.changeTrack(null);\n            return;\n        }\n        const customRenderer = this.#renderers.sort((a, b)=>a.priority - b.priority).find((renderer)=>renderer.canRender(currentTrack, this.#video));\n        if (this.#customRenderer !== customRenderer) {\n            this.#customRenderer?.detach();\n            customRenderer?.attach(this.#video);\n            this.#customRenderer = customRenderer ?? null;\n        }\n        customRenderer?.changeTrack(currentTrack);\n    }\n    #detach() {\n        this.#nativeRenderer?.detach();\n        this.#nativeRenderer = null;\n        this.#customRenderer?.detach();\n        this.#customRenderer = null;\n    }\n}\nlet prop6;\nclass TextTrackList extends List {\n    static{\n        prop6 = TextTrackSymbol.crossOrigin;\n    }\n    #canLoad;\n    #defaults;\n    #storage;\n    #preferredLang;\n    constructor(){\n        super(), this.#canLoad = false, this.#defaults = {}, this.#storage = null, this.#preferredLang = null, this.#selectTracks = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.functionDebounce)(async ()=>{\n            if (!this.#canLoad) return;\n            if (!this.#preferredLang && this.#storage) {\n                this.#preferredLang = await this.#storage.getLang();\n            }\n            const showCaptions = await this.#storage?.getCaptions(), kinds = [\n                [\n                    \"captions\",\n                    \"subtitles\"\n                ],\n                \"chapters\",\n                \"descriptions\",\n                \"metadata\"\n            ];\n            for (const kind of kinds){\n                const tracks = this.getByKind(kind);\n                if (tracks.find((t)=>t.mode === \"showing\")) continue;\n                const preferredTrack = this.#preferredLang ? tracks.find((track2)=>track2.language === this.#preferredLang) : null;\n                const defaultTrack = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(kind) ? this.#defaults[kind.find((kind2)=>this.#defaults[kind2]) || \"\"] : this.#defaults[kind];\n                const track = preferredTrack ?? defaultTrack, isCaptionsKind = track && isTrackCaptionKind(track);\n                if (track && (!isCaptionsKind || showCaptions !== false)) {\n                    track.mode = \"showing\";\n                    if (isCaptionsKind) this.#saveCaptionsTrack(track);\n                }\n            }\n        }, 300), this.#pendingRemoval = null, this.#onTrackModeChangeBind = this.#onTrackModeChange.bind(this);\n    }\n    get selected() {\n        const track = this.items.find((t)=>t.mode === \"showing\" && isTrackCaptionKind(t));\n        return track ?? null;\n    }\n    get selectedIndex() {\n        const selected = this.selected;\n        return selected ? this.indexOf(selected) : -1;\n    }\n    get preferredLang() {\n        return this.#preferredLang;\n    }\n    set preferredLang(lang) {\n        this.#preferredLang = lang;\n        this.#saveLang(lang);\n    }\n    add(init, trigger) {\n        const isTrack = init instanceof TextTrack, track = isTrack ? init : new TextTrack(init), kind = init.kind === \"captions\" || init.kind === \"subtitles\" ? \"captions\" : init.kind;\n        if (this.#defaults[kind] && init.default) delete init.default;\n        track.addEventListener(\"mode-change\", this.#onTrackModeChangeBind);\n        this[ListSymbol.add](track, trigger);\n        track[TextTrackSymbol.crossOrigin] = this[TextTrackSymbol.crossOrigin];\n        if (this.#canLoad) track[TextTrackSymbol.canLoad]();\n        if (init.default) this.#defaults[kind] = track;\n        this.#selectTracks();\n        return this;\n    }\n    remove(track, trigger) {\n        this.#pendingRemoval = track;\n        if (!this.items.includes(track)) return;\n        if (track === this.#defaults[track.kind]) delete this.#defaults[track.kind];\n        track.mode = \"disabled\";\n        track[TextTrackSymbol.onModeChange] = null;\n        track.removeEventListener(\"mode-change\", this.#onTrackModeChangeBind);\n        this[ListSymbol.remove](track, trigger);\n        this.#pendingRemoval = null;\n        return this;\n    }\n    clear(trigger) {\n        for (const track of [\n            ...this.items\n        ]){\n            this.remove(track, trigger);\n        }\n        return this;\n    }\n    getByKind(kind) {\n        const kinds = Array.isArray(kind) ? kind : [\n            kind\n        ];\n        return this.items.filter((track)=>kinds.includes(track.kind));\n    }\n    /** @internal */ [TextTrackSymbol.canLoad]() {\n        if (this.#canLoad) return;\n        for (const track of this.items)track[TextTrackSymbol.canLoad]();\n        this.#canLoad = true;\n        this.#selectTracks();\n    }\n    #selectTracks;\n    #pendingRemoval;\n    #onTrackModeChangeBind;\n    #onTrackModeChange(event1) {\n        const track = event1.detail;\n        if (this.#storage && isTrackCaptionKind(track) && track !== this.#pendingRemoval) {\n            this.#saveCaptionsTrack(track);\n        }\n        if (track.mode === \"showing\") {\n            const kinds = isTrackCaptionKind(track) ? [\n                \"captions\",\n                \"subtitles\"\n            ] : [\n                track.kind\n            ];\n            for (const t of this.items){\n                if (t.mode === \"showing\" && t != track && kinds.includes(t.kind)) {\n                    t.mode = \"disabled\";\n                }\n            }\n        }\n        this.dispatchEvent(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"mode-change\", {\n            detail: event1.detail,\n            trigger: event1\n        }));\n    }\n    #saveCaptionsTrack(track) {\n        if (track.mode !== \"disabled\") {\n            this.#saveLang(track.language);\n        }\n        this.#storage?.setCaptions?.(track.mode === \"showing\");\n    }\n    #saveLang(lang) {\n        this.#storage?.setLang?.(this.#preferredLang = lang);\n    }\n    setStorage(storage) {\n        this.#storage = storage;\n    }\n}\nconst SET_AUTO = Symbol(\"SET_AUTO_QUALITY\"), ENABLE_AUTO = Symbol(\"ENABLE_AUTO_QUALITY\");\nconst QualitySymbol = {\n    setAuto: SET_AUTO,\n    enableAuto: ENABLE_AUTO\n};\nlet prop7;\nclass VideoQualityList extends SelectList {\n    static{\n        prop7 = QualitySymbol.enableAuto;\n    }\n    #auto;\n    /**\n   * Whether automatic quality selection is enabled.\n   */ get auto() {\n        return this.#auto || this.readonly;\n    }\n    /** @internal */ [ListSymbol.onUserSelect]() {\n        this[QualitySymbol.setAuto](false);\n    }\n    /** @internal */ [ListSymbol.onReset](trigger) {\n        this[QualitySymbol.enableAuto] = void 0;\n        this[QualitySymbol.setAuto](false, trigger);\n    }\n    /**\n   * Request automatic quality selection (if supported). This will be a no-op if the list is\n   * `readonly` as that already implies auto-selection.\n   */ autoSelect(trigger) {\n        if (this.readonly || this.#auto || !this[QualitySymbol.enableAuto]) return;\n        this[QualitySymbol.enableAuto]?.(trigger);\n        this[QualitySymbol.setAuto](true, trigger);\n    }\n    getBySrc(src) {\n        return this.items.find((quality)=>quality.src === src);\n    }\n    /** @internal */ [QualitySymbol.setAuto](auto, trigger) {\n        if (this.#auto === auto) return;\n        this.#auto = auto;\n        this.dispatchEvent(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"auto-change\", {\n            detail: auto,\n            trigger\n        }));\n    }\n    constructor(...args){\n        super(...args), this.#auto = false, /**\n   * Configures quality switching:\n   *\n   * - `current`: Trigger an immediate quality level switch. This will abort the current fragment\n   * request if any, flush the whole buffer, and fetch fragment matching with current position\n   * and requested quality level.\n   *\n   * - `next`: Trigger a quality level switch for next fragment. This could eventually flush\n   * already buffered next fragment.\n   *\n   * - `load`: Set quality level for next loaded fragment.\n   *\n   * @see {@link https://www.vidstack.io/docs/player/api/video-quality#switch}\n   * @see {@link https://github.com/video-dev/hls.js/blob/master/docs/API.md#quality-switch-control-api}\n   */ this.switch = \"current\";\n    }\n}\nfunction sortVideoQualities(qualities, desc) {\n    return [\n        ...qualities\n    ].sort(desc ? compareVideoQualityDesc : compareVideoQualityAsc);\n}\nfunction compareVideoQualityAsc(a, b) {\n    return a.height === b.height ? (a.bitrate ?? 0) - (b.bitrate ?? 0) : a.height - b.height;\n}\nfunction compareVideoQualityDesc(a, b) {\n    return b.height === a.height ? (b.bitrate ?? 0) - (a.bitrate ?? 0) : b.height - a.height;\n}\nfunction isAudioProvider(provider) {\n    return provider?.$$PROVIDER_TYPE === \"AUDIO\";\n}\nfunction isVideoProvider(provider) {\n    return provider?.$$PROVIDER_TYPE === \"VIDEO\";\n}\nfunction isHLSProvider(provider) {\n    return provider?.$$PROVIDER_TYPE === \"HLS\";\n}\nfunction isDASHProvider(provider) {\n    return provider?.$$PROVIDER_TYPE === \"DASH\";\n}\nfunction isYouTubeProvider(provider) {\n    return provider?.$$PROVIDER_TYPE === \"YOUTUBE\";\n}\nfunction isVimeoProvider(provider) {\n    return provider?.$$PROVIDER_TYPE === \"VIMEO\";\n}\nfunction isGoogleCastProvider(provider) {\n    return provider?.$$PROVIDER_TYPE === \"GOOGLE_CAST\";\n}\nfunction isHTMLAudioElement(element) {\n    return !IS_SERVER && element instanceof HTMLAudioElement;\n}\nfunction isHTMLVideoElement(element) {\n    return !IS_SERVER && element instanceof HTMLVideoElement;\n}\nfunction isHTMLMediaElement(element) {\n    return isHTMLAudioElement(element) || isHTMLVideoElement(element);\n}\nfunction isHTMLIFrameElement(element) {\n    return !IS_SERVER && element instanceof HTMLIFrameElement;\n}\nclass MediaPlayerController extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n}\nconst MEDIA_KEY_SHORTCUTS = {\n    togglePaused: \"k Space\",\n    toggleMuted: \"m\",\n    toggleFullscreen: \"f\",\n    togglePictureInPicture: \"i\",\n    toggleCaptions: \"c\",\n    seekBackward: \"j J ArrowLeft\",\n    seekForward: \"l L ArrowRight\",\n    volumeUp: \"ArrowUp\",\n    volumeDown: \"ArrowDown\",\n    speedUp: \">\",\n    slowDown: \"<\"\n};\nconst MODIFIER_KEYS = /* @__PURE__ */ new Set([\n    \"Shift\",\n    \"Alt\",\n    \"Meta\",\n    \"Ctrl\"\n]), BUTTON_SELECTORS = 'button, [role=\"button\"]', IGNORE_SELECTORS = 'input, textarea, select, [contenteditable], [role^=\"menuitem\"], [role=\"timer\"]';\nclass MediaKeyboardController extends MediaPlayerController {\n    #media;\n    constructor(media){\n        super(), this.#timeSlider = null;\n        this.#media = media;\n    }\n    onConnect() {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onTargetChange.bind(this));\n    }\n    #onTargetChange() {\n        const { keyDisabled, keyTarget } = this.$props;\n        if (keyDisabled()) return;\n        const target = keyTarget() === \"player\" ? this.el : document, $active = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n        if (target === this.el) {\n            new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(this.el).add(\"focusin\", ()=>$active.set(true)).add(\"focusout\", (event1)=>{\n                if (!this.el.contains(event1.target)) $active.set(false);\n            });\n        } else {\n            if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)($active)) $active.set(document.querySelector(\"[data-media-player]\") === this.el);\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(document, \"focusin\", (event1)=>{\n                const activePlayer = event1.composedPath().find((el)=>el instanceof Element && el.localName === \"media-player\");\n                if (activePlayer !== void 0) $active.set(this.el === activePlayer);\n            });\n        }\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            if (!$active()) return;\n            new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(target).add(\"keyup\", this.#onKeyUp.bind(this)).add(\"keydown\", this.#onKeyDown.bind(this)).add(\"keydown\", this.#onPreventVideoKeys.bind(this), {\n                capture: true\n            });\n        });\n    }\n    #onKeyUp(event1) {\n        const focusedEl = document.activeElement;\n        if (!event1.key || !this.$state.canSeek() || focusedEl?.matches(IGNORE_SELECTORS)) {\n            return;\n        }\n        let { method, value } = this.#getMatchingMethod(event1);\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(value) && !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(value)) {\n            value?.onKeyUp?.({\n                event: event1,\n                player: this.#media.player,\n                remote: this.#media.remote\n            });\n            value?.callback?.(event1, this.#media.remote);\n            return;\n        }\n        if (method?.startsWith(\"seek\")) {\n            event1.preventDefault();\n            event1.stopPropagation();\n            if (this.#timeSlider) {\n                this.#forwardTimeKeyboardEvent(event1, method === \"seekForward\");\n                this.#timeSlider = null;\n            } else {\n                this.#media.remote.seek(this.#seekTotal, event1);\n                this.#seekTotal = void 0;\n            }\n        }\n        if (method?.startsWith(\"volume\")) {\n            const volumeSlider = this.el.querySelector(\"[data-media-volume-slider]\");\n            volumeSlider?.dispatchEvent(new KeyboardEvent(\"keyup\", {\n                key: method === \"volumeUp\" ? \"Up\" : \"Down\",\n                shiftKey: event1.shiftKey,\n                trigger: event1\n            }));\n        }\n    }\n    #onKeyDown(event1) {\n        if (!event1.key || MODIFIER_KEYS.has(event1.key)) return;\n        const focusedEl = document.activeElement;\n        if (focusedEl?.matches(IGNORE_SELECTORS) || (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isKeyboardClick)(event1) && focusedEl?.matches(BUTTON_SELECTORS)) {\n            return;\n        }\n        let { method, value } = this.#getMatchingMethod(event1), isNumberPress = !event1.metaKey && /^[0-9]$/.test(event1.key);\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(value) && !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(value) && !isNumberPress) {\n            value?.onKeyDown?.({\n                event: event1,\n                player: this.#media.player,\n                remote: this.#media.remote\n            });\n            value?.callback?.(event1, this.#media.remote);\n            return;\n        }\n        if (!method && isNumberPress && !modifierKeyPressed(event1)) {\n            event1.preventDefault();\n            event1.stopPropagation();\n            this.#media.remote.seek(this.$state.duration() / 10 * Number(event1.key), event1);\n            return;\n        }\n        if (!method) return;\n        event1.preventDefault();\n        event1.stopPropagation();\n        switch(method){\n            case \"seekForward\":\n            case \"seekBackward\":\n                this.#seeking(event1, method, method === \"seekForward\");\n                break;\n            case \"volumeUp\":\n            case \"volumeDown\":\n                const volumeSlider = this.el.querySelector(\"[data-media-volume-slider]\");\n                if (volumeSlider) {\n                    volumeSlider.dispatchEvent(new KeyboardEvent(\"keydown\", {\n                        key: method === \"volumeUp\" ? \"Up\" : \"Down\",\n                        shiftKey: event1.shiftKey,\n                        trigger: event1\n                    }));\n                } else {\n                    const value2 = event1.shiftKey ? 0.1 : 0.05;\n                    this.#media.remote.changeVolume(this.$state.volume() + (method === \"volumeUp\" ? +value2 : -value2), event1);\n                }\n                break;\n            case \"toggleFullscreen\":\n                this.#media.remote.toggleFullscreen(\"prefer-media\", event1);\n                break;\n            case \"speedUp\":\n            case \"slowDown\":\n                const playbackRate = this.$state.playbackRate();\n                this.#media.remote.changePlaybackRate(Math.max(0.25, Math.min(2, playbackRate + (method === \"speedUp\" ? 0.25 : -0.25))), event1);\n                break;\n            default:\n                this.#media.remote[method]?.(event1);\n        }\n        this.$state.lastKeyboardAction.set({\n            action: method,\n            event: event1\n        });\n    }\n    #onPreventVideoKeys(event1) {\n        if (isHTMLMediaElement(event1.target) && this.#getMatchingMethod(event1).method) {\n            event1.preventDefault();\n        }\n    }\n    #getMatchingMethod(event1) {\n        const keyShortcuts = {\n            ...this.$props.keyShortcuts(),\n            ...this.#media.ariaKeys\n        };\n        const method = Object.keys(keyShortcuts).find((method2)=>{\n            const value = keyShortcuts[method2], keys = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(value) ? value.join(\" \") : (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(value) ? value : value?.keys;\n            const combinations = ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(keys) ? keys : keys?.split(\" \"))?.map((key)=>replaceSymbolKeys(key).replace(/Control/g, \"Ctrl\").split(\"+\"));\n            return combinations?.some((combo)=>{\n                const modifierKeys = new Set(combo.filter((key)=>MODIFIER_KEYS.has(key)));\n                for (const modKey of MODIFIER_KEYS){\n                    const modKeyProp = modKey.toLowerCase() + \"Key\";\n                    if (!modifierKeys.has(modKey) && event1[modKeyProp]) {\n                        return false;\n                    }\n                }\n                return combo.every((key)=>{\n                    return MODIFIER_KEYS.has(key) ? event1[key.toLowerCase() + \"Key\"] : event1.key === key.replace(\"Space\", \" \");\n                });\n            });\n        });\n        return {\n            method,\n            value: method ? keyShortcuts[method] : null\n        };\n    }\n    #seekTotal;\n    #calcSeekAmount(event1, type) {\n        const seekBy = event1.shiftKey ? 10 : 5;\n        return this.#seekTotal = Math.max(0, Math.min((this.#seekTotal ?? this.$state.currentTime()) + (type === \"seekForward\" ? +seekBy : -seekBy), this.$state.duration()));\n    }\n    #timeSlider;\n    #forwardTimeKeyboardEvent(event1, forward) {\n        this.#timeSlider?.dispatchEvent(new KeyboardEvent(event1.type, {\n            key: !forward ? \"Left\" : \"Right\",\n            shiftKey: event1.shiftKey,\n            trigger: event1\n        }));\n    }\n    #seeking(event1, type, forward) {\n        if (!this.$state.canSeek()) return;\n        if (!this.#timeSlider) {\n            this.#timeSlider = this.el.querySelector(\"[data-media-time-slider]\");\n        }\n        if (this.#timeSlider) {\n            this.#forwardTimeKeyboardEvent(event1, forward);\n        } else {\n            this.#media.remote.seeking(this.#calcSeekAmount(event1, type), event1);\n        }\n    }\n}\nconst SYMBOL_KEY_MAP = [\n    \"!\",\n    \"@\",\n    \"#\",\n    \"$\",\n    \"%\",\n    \"^\",\n    \"&\",\n    \"*\",\n    \"(\",\n    \")\"\n];\nfunction replaceSymbolKeys(key) {\n    return key.replace(/Shift\\+(\\d)/g, (_, num)=>SYMBOL_KEY_MAP[num - 1]);\n}\nfunction modifierKeyPressed(event1) {\n    for (const key of MODIFIER_KEYS){\n        if (event1[key.toLowerCase() + \"Key\"]) {\n            return true;\n        }\n    }\n    return false;\n}\nclass ARIAKeyShortcuts extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    #shortcut;\n    constructor(shortcut){\n        super();\n        this.#shortcut = shortcut;\n    }\n    onAttach(el) {\n        const { $props, ariaKeys } = useMediaContext(), keys = el.getAttribute(\"aria-keyshortcuts\");\n        if (keys) {\n            ariaKeys[this.#shortcut] = keys;\n            if (!IS_SERVER) {\n                (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n                    delete ariaKeys[this.#shortcut];\n                });\n            }\n            return;\n        }\n        const shortcuts = $props.keyShortcuts()[this.#shortcut];\n        if (shortcuts) {\n            const keys2 = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(shortcuts) ? shortcuts.join(\" \") : (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(shortcuts) ? shortcuts : shortcuts?.keys;\n            el.setAttribute(\"aria-keyshortcuts\", (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(keys2) ? keys2.join(\" \") : keys2);\n        }\n    }\n}\nclass MediaControls extends MediaPlayerController {\n    #idleTimer;\n    #pausedTracking;\n    #hideOnMouseLeave;\n    #isMouseOutside;\n    #focusedItem;\n    #canIdle;\n    /**\n   * Whether controls can hide after a delay in user interaction. If this is false, controls will\n   * not hide and be user controlled.\n   */ get canIdle() {\n        return this.#canIdle();\n    }\n    set canIdle(canIdle) {\n        this.#canIdle.set(canIdle);\n    }\n    /**\n   * Whether controls visibility should be toggled when the mouse enters and leaves the player\n   * container.\n   *\n   * @defaultValue false\n   */ get hideOnMouseLeave() {\n        const { hideControlsOnMouseLeave } = this.$props;\n        return this.#hideOnMouseLeave() || hideControlsOnMouseLeave();\n    }\n    set hideOnMouseLeave(hide) {\n        this.#hideOnMouseLeave.set(hide);\n    }\n    /**\n   * Whether media controls are currently visible.\n   */ get showing() {\n        return this.$state.controlsVisible();\n    }\n    /**\n   * Show controls.\n   */ show(delay = 0, trigger) {\n        this.#clearIdleTimer();\n        if (!this.#pausedTracking) {\n            this.#changeVisibility(true, delay, trigger);\n        }\n    }\n    /**\n   * Hide controls.\n   */ hide(delay = this.defaultDelay, trigger) {\n        this.#clearIdleTimer();\n        if (!this.#pausedTracking) {\n            this.#changeVisibility(false, delay, trigger);\n        }\n    }\n    /**\n   * Whether all idle tracking on controls should be paused until resumed again.\n   */ pause(trigger) {\n        this.#pausedTracking = true;\n        this.#clearIdleTimer();\n        this.#changeVisibility(true, 0, trigger);\n    }\n    resume(trigger) {\n        this.#pausedTracking = false;\n        if (this.$state.paused()) return;\n        this.#changeVisibility(false, this.defaultDelay, trigger);\n    }\n    onConnect() {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#init.bind(this));\n    }\n    #init() {\n        const { viewType } = this.$state;\n        if (!this.el || !this.#canIdle()) return;\n        if (viewType() === \"audio\") {\n            this.show();\n            return;\n        }\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchMouse.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchPaused.bind(this));\n        const onPlay = this.#onPlay.bind(this), onPause = this.#onPause.bind(this), onEnd = this.#onEnd.bind(this);\n        new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(this.el).add(\"can-play\", (event1)=>this.show(0, event1)).add(\"play\", onPlay).add(\"pause\", onPause).add(\"end\", onEnd).add(\"auto-play-fail\", onPause);\n    }\n    #watchMouse() {\n        if (!this.el) return;\n        const { started, pointer, paused } = this.$state;\n        if (!started() || pointer() !== \"fine\") return;\n        const events = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(this.el), shouldHideOnMouseLeave = this.hideOnMouseLeave;\n        if (!shouldHideOnMouseLeave || !this.#isMouseOutside()) {\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n                if (!paused()) events.add(\"pointermove\", this.#onStopIdle.bind(this));\n            });\n        }\n        if (shouldHideOnMouseLeave) {\n            events.add(\"mouseenter\", this.#onMouseEnter.bind(this)).add(\"mouseleave\", this.#onMouseLeave.bind(this));\n        }\n    }\n    #watchPaused() {\n        const { paused, started, autoPlayError } = this.$state;\n        if (paused() || autoPlayError() && !started()) return;\n        const onStopIdle = this.#onStopIdle.bind(this);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            if (!this.el) return;\n            const pointer = this.$state.pointer(), isTouch = pointer === \"coarse\", events = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(this.el), eventTypes = [\n                isTouch ? \"touchend\" : \"pointerup\",\n                \"keydown\"\n            ];\n            for (const eventType of eventTypes){\n                events.add(eventType, onStopIdle, {\n                    passive: false\n                });\n            }\n        });\n    }\n    #onPlay(event1) {\n        if (event1.triggers.hasType(\"ended\")) return;\n        this.show(0, event1);\n        this.hide(void 0, event1);\n    }\n    #onPause(event1) {\n        this.show(0, event1);\n    }\n    #onEnd(event1) {\n        const { loop } = this.$state;\n        if (loop()) this.hide(0, event1);\n    }\n    #onMouseEnter(event1) {\n        this.#isMouseOutside.set(false);\n        this.show(0, event1);\n        this.hide(void 0, event1);\n    }\n    #onMouseLeave(event1) {\n        this.#isMouseOutside.set(true);\n        this.hide(0, event1);\n    }\n    #clearIdleTimer() {\n        window.clearTimeout(this.#idleTimer);\n        this.#idleTimer = -1;\n    }\n    #onStopIdle(event1) {\n        if (// @ts-expect-error\n        event1.MEDIA_GESTURE || this.#pausedTracking || isTouchPinchEvent(event1)) {\n            return;\n        }\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isKeyboardEvent)(event1)) {\n            if (event1.key === \"Escape\") {\n                this.el?.focus();\n                this.#focusedItem = null;\n            } else if (this.#focusedItem) {\n                event1.preventDefault();\n                requestAnimationFrame(()=>{\n                    this.#focusedItem?.focus();\n                    this.#focusedItem = null;\n                });\n            }\n        }\n        this.show(0, event1);\n        this.hide(this.defaultDelay, event1);\n    }\n    #changeVisibility(visible, delay, trigger) {\n        if (delay === 0) {\n            this.#onChange(visible, trigger);\n            return;\n        }\n        this.#idleTimer = window.setTimeout(()=>{\n            if (!this.scope) return;\n            this.#onChange(visible && !this.#pausedTracking, trigger);\n        }, delay);\n    }\n    #onChange(visible, trigger) {\n        if (this.$state.controlsVisible() === visible) return;\n        this.$state.controlsVisible.set(visible);\n        if (!visible && document.activeElement && this.el?.contains(document.activeElement)) {\n            this.#focusedItem = document.activeElement;\n            requestAnimationFrame(()=>{\n                this.el?.focus({\n                    preventScroll: true\n                });\n            });\n        }\n        this.dispatch(\"controls-change\", {\n            detail: visible,\n            trigger\n        });\n    }\n    constructor(...args){\n        super(...args), this.#idleTimer = -2, this.#pausedTracking = false, this.#hideOnMouseLeave = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false), this.#isMouseOutside = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false), this.#focusedItem = null, this.#canIdle = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(true), /**\n   * The default amount of delay in milliseconds while media playback is progressing without user\n   * activity to indicate an idle state (i.e., hide controls).\n   *\n   * @defaultValue 2000\n   */ this.defaultDelay = 2e3;\n    }\n}\nconst CAN_FULLSCREEN = _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.fscreen.fullscreenEnabled;\nclass FullscreenController extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    /**\n   * Tracks whether we're the active fullscreen event listener. Fullscreen events can only be\n   * listened to globally on the document so we need to know if they relate to the current host\n   * element or not.\n   */ #listening;\n    #active;\n    get active() {\n        return this.#active;\n    }\n    get supported() {\n        return CAN_FULLSCREEN;\n    }\n    onConnect() {\n        new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.fscreen).add(\"fullscreenchange\", this.#onChange.bind(this)).add(\"fullscreenerror\", this.#onError.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this.#onDisconnect.bind(this));\n    }\n    async #onDisconnect() {\n        if (CAN_FULLSCREEN) await this.exit();\n    }\n    #onChange(event1) {\n        const active = isFullscreen(this.el);\n        if (active === this.#active) return;\n        if (!active) this.#listening = false;\n        this.#active = active;\n        this.dispatch(\"fullscreen-change\", {\n            detail: active,\n            trigger: event1\n        });\n    }\n    #onError(event1) {\n        if (!this.#listening) return;\n        this.dispatch(\"fullscreen-error\", {\n            detail: null,\n            trigger: event1\n        });\n        this.#listening = false;\n    }\n    async enter() {\n        try {\n            this.#listening = true;\n            if (!this.el || isFullscreen(this.el)) return;\n            assertFullscreenAPI();\n            return _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.fscreen.requestFullscreen(this.el);\n        } catch (error) {\n            this.#listening = false;\n            throw error;\n        }\n    }\n    async exit() {\n        if (!this.el || !isFullscreen(this.el)) return;\n        assertFullscreenAPI();\n        return _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.fscreen.exitFullscreen();\n    }\n    constructor(...args){\n        super(...args), this.#listening = false, this.#active = false;\n    }\n}\nfunction canFullscreen() {\n    return CAN_FULLSCREEN;\n}\nfunction isFullscreen(host) {\n    if (_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.fscreen.fullscreenElement === host) return true;\n    try {\n        return host.matches(// @ts-expect-error - `fullscreenPseudoClass` is missing from `@types/fscreen`.\n        _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.fscreen.fullscreenPseudoClass);\n    } catch (error) {\n        return false;\n    }\n}\nfunction assertFullscreenAPI() {\n    if (CAN_FULLSCREEN) return;\n    throw Error(\"[vidstack] fullscreen API is not enabled or supported in this environment\");\n}\nclass ScreenOrientationController extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    #type;\n    #locked;\n    #currentLock;\n    /**\n   * The current screen orientation type.\n   *\n   * @signal\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation}\n   * @see https://w3c.github.io/screen-orientation/#screen-orientation-types-and-locks\n   */ get type() {\n        return this.#type();\n    }\n    /**\n   * Whether the screen orientation is currently locked.\n   *\n   * @signal\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation}\n   * @see https://w3c.github.io/screen-orientation/#screen-orientation-types-and-locks\n   */ get locked() {\n        return this.#locked();\n    }\n    /**\n   * Whether the viewport is in a portrait orientation.\n   *\n   * @signal\n   */ get portrait() {\n        return this.#type().startsWith(\"portrait\");\n    }\n    /**\n   * Whether the viewport is in a landscape orientation.\n   *\n   * @signal\n   */ get landscape() {\n        return this.#type().startsWith(\"landscape\");\n    }\n    static{\n        /**\n   * Whether the native Screen Orientation API is available.\n   */ this.supported = canOrientScreen();\n    }\n    /**\n   * Whether the native Screen Orientation API is available.\n   */ get supported() {\n        return ScreenOrientationController.supported;\n    }\n    onConnect() {\n        if (this.supported) {\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(screen.orientation, \"change\", this.#onOrientationChange.bind(this));\n        } else {\n            const query = window.matchMedia(\"(orientation: landscape)\");\n            query.onchange = this.#onOrientationChange.bind(this);\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>query.onchange = null);\n        }\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this.#onDisconnect.bind(this));\n    }\n    async #onDisconnect() {\n        if (this.supported && this.#locked()) await this.unlock();\n    }\n    #onOrientationChange(event1) {\n        this.#type.set(this.#getScreenOrientation());\n        this.dispatch(\"orientation-change\", {\n            detail: {\n                orientation: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#type),\n                lock: this.#currentLock\n            },\n            trigger: event1\n        });\n    }\n    /**\n   * Locks the orientation of the screen to the desired orientation type using the\n   * Screen Orientation API.\n   *\n   * @param lockType - The screen lock orientation type.\n   * @throws Error - If screen orientation API is unavailable.\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation}\n   * @see {@link https://w3c.github.io/screen-orientation}\n   */ async lock(lockType) {\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#locked) || this.#currentLock === lockType) return;\n        this.#assertScreenOrientationAPI();\n        await screen.orientation.lock(lockType);\n        this.#locked.set(true);\n        this.#currentLock = lockType;\n    }\n    /**\n   * Unlocks the orientation of the screen to it's default state using the Screen Orientation\n   * API. This method will throw an error if the API is unavailable.\n   *\n   * @throws Error - If screen orientation API is unavailable.\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation}\n   * @see {@link https://w3c.github.io/screen-orientation}\n   */ async unlock() {\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#locked)) return;\n        this.#assertScreenOrientationAPI();\n        this.#currentLock = void 0;\n        await screen.orientation.unlock();\n        this.#locked.set(false);\n    }\n    #assertScreenOrientationAPI() {\n        if (this.supported) return;\n        throw Error(\"[vidstack] screen orientation API is not available\");\n    }\n    #getScreenOrientation() {\n        if (IS_SERVER) return \"portrait-primary\";\n        if (this.supported) return window.screen.orientation.type;\n        return window.innerWidth >= window.innerHeight ? \"landscape-primary\" : \"portrait-primary\";\n    }\n    constructor(...args){\n        super(...args), this.#type = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(this.#getScreenOrientation()), this.#locked = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n    }\n}\nclass AudioProviderLoader {\n    canPlay(src) {\n        if (!isAudioSrc(src)) return false;\n        return IS_SERVER || !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src) || src.type === \"?\" || canPlayAudioType(this.target, src.type);\n    }\n    mediaType() {\n        return \"audio\";\n    }\n    async load(ctx) {\n        if (IS_SERVER) {\n            throw Error(\"[vidstack] can not load audio provider server-side\");\n        }\n        if (!this.target) {\n            throw Error(\"[vidstack] `<audio>` element was not found - did you forget to include `<media-provider>`?\");\n        }\n        return new (await __webpack_require__.e(/*! import() */ \"vendor-chunks/@vidstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./vidstack-CnCZVzrO.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CnCZVzrO.js\"))).AudioProvider(this.target, ctx);\n    }\n    constructor(){\n        this.name = \"audio\";\n    }\n}\nclass VideoProviderLoader {\n    canPlay(src) {\n        if (!isVideoSrc(src)) return false;\n        return IS_SERVER || !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src) || src.type === \"?\" || canPlayVideoType(this.target, src.type);\n    }\n    mediaType() {\n        return \"video\";\n    }\n    async load(ctx) {\n        if (IS_SERVER) {\n            throw Error(\"[vidstack] can not load video provider server-side\");\n        }\n        if (!this.target) {\n            throw Error(\"[vidstack] `<video>` element was not found - did you forget to include media provider?\");\n        }\n        return new (await Promise.resolve().then(function() {\n            return provider$1;\n        })).VideoProvider(this.target, ctx);\n    }\n    constructor(){\n        this.name = \"video\";\n    }\n}\nclass HLSProviderLoader extends VideoProviderLoader {\n    static{\n        this.supported = isHLSSupported();\n    }\n    canPlay(src) {\n        return HLSProviderLoader.supported && isHLSSrc(src);\n    }\n    async load(context) {\n        if (IS_SERVER) {\n            throw Error(\"[vidstack] can not load hls provider server-side\");\n        }\n        if (!this.target) {\n            throw Error(\"[vidstack] `<video>` element was not found - did you forget to include `<media-provider>`?\");\n        }\n        return new (await __webpack_require__.e(/*! import() */ \"vendor-chunks/@vidstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./vidstack-3ZPG_odG.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-3ZPG_odG.js\"))).HLSProvider(this.target, context);\n    }\n    constructor(...args){\n        super(...args), this.name = \"hls\";\n    }\n}\nlet audioContext = null, gainNodes = [], elAudioSources = [];\nfunction getOrCreateAudioCtx() {\n    return audioContext ??= new AudioContext();\n}\nfunction createGainNode() {\n    const audioCtx = getOrCreateAudioCtx(), gainNode = audioCtx.createGain();\n    gainNode.connect(audioCtx.destination);\n    gainNodes.push(gainNode);\n    return gainNode;\n}\nfunction createElementSource(el, gainNode) {\n    const audioCtx = getOrCreateAudioCtx(), src = audioCtx.createMediaElementSource(el);\n    if (gainNode) {\n        src.connect(gainNode);\n    }\n    elAudioSources.push(src);\n    return src;\n}\nfunction destroyGainNode(node) {\n    const idx = gainNodes.indexOf(node);\n    if (idx !== -1) {\n        gainNodes.splice(idx, 1);\n        node.disconnect();\n        freeAudioCtxWhenAllResourcesFreed();\n    }\n}\nfunction destroyElementSource(src) {\n    const idx = elAudioSources.indexOf(src);\n    if (idx !== -1) {\n        elAudioSources.splice(idx, 1);\n        src.disconnect();\n        freeAudioCtxWhenAllResourcesFreed();\n    }\n}\nfunction freeAudioCtxWhenAllResourcesFreed() {\n    if (audioContext && gainNodes.length === 0 && elAudioSources.length === 0) {\n        audioContext.close().then(()=>{\n            audioContext = null;\n        });\n    }\n}\nclass AudioGain {\n    #media;\n    #onChange;\n    #gainNode;\n    #srcAudioNode;\n    get currentGain() {\n        return this.#gainNode?.gain?.value ?? null;\n    }\n    get supported() {\n        return true;\n    }\n    constructor(media, onChange){\n        this.#gainNode = null;\n        this.#srcAudioNode = null;\n        this.#media = media;\n        this.#onChange = onChange;\n    }\n    setGain(gain) {\n        const currGain = this.currentGain;\n        if (gain === this.currentGain) {\n            return;\n        }\n        if (gain === 1 && currGain !== 1) {\n            this.removeGain();\n            return;\n        }\n        if (!this.#gainNode) {\n            this.#gainNode = createGainNode();\n            if (this.#srcAudioNode) {\n                this.#srcAudioNode.connect(this.#gainNode);\n            }\n        }\n        if (!this.#srcAudioNode) {\n            this.#srcAudioNode = createElementSource(this.#media, this.#gainNode);\n        }\n        this.#gainNode.gain.value = gain;\n        this.#onChange(gain);\n    }\n    removeGain() {\n        if (!this.#gainNode) return;\n        if (this.#srcAudioNode) {\n            this.#srcAudioNode.connect(getOrCreateAudioCtx().destination);\n        }\n        this.#destroyGainNode();\n        this.#onChange(null);\n    }\n    destroy() {\n        this.#destroySrcNode();\n        this.#destroyGainNode();\n    }\n    #destroySrcNode() {\n        if (!this.#srcAudioNode) return;\n        try {\n            destroyElementSource(this.#srcAudioNode);\n        } catch (e) {} finally{\n            this.#srcAudioNode = null;\n        }\n    }\n    #destroyGainNode() {\n        if (!this.#gainNode) return;\n        try {\n            destroyGainNode(this.#gainNode);\n        } catch (e) {} finally{\n            this.#gainNode = null;\n        }\n    }\n}\nconst PAGE_EVENTS = [\n    \"focus\",\n    \"blur\",\n    \"visibilitychange\",\n    \"pageshow\",\n    \"pagehide\"\n];\nclass PageVisibility {\n    #state;\n    #visibility;\n    #safariBeforeUnloadTimeout;\n    connect() {\n        const events = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(window), handlePageEvent = this.#handlePageEvent.bind(this);\n        for (const eventType of PAGE_EVENTS){\n            events.add(eventType, handlePageEvent);\n        }\n        if (IS_SAFARI) {\n            events.add(\"beforeunload\", (event1)=>{\n                this.#safariBeforeUnloadTimeout = setTimeout(()=>{\n                    if (!(event1.defaultPrevented || event1.returnValue.length > 0)) {\n                        this.#state.set(\"hidden\");\n                        this.#visibility.set(\"hidden\");\n                    }\n                }, 0);\n            });\n        }\n    }\n    /**\n   * The current page state. Important to note we only account for a subset of page states, as\n   * the rest aren't valuable to the player at the moment.\n   *\n   * - **active:** A page is in the active state if it is visible and has input focus.\n   * - **passive:** A page is in the passive state if it is visible and does not have input focus.\n   * - **hidden:** A page is in the hidden state if it is not visible.\n   *\n   * @see https://developers.google.com/web/updates/2018/07/page-lifecycle-api#states\n   */ get pageState() {\n        return this.#state();\n    }\n    /**\n   * The current document visibility state.\n   *\n   * - **visible:** The page content may be at least partially visible. In practice, this means that\n   * the page is the foreground tab of a non-minimized window.\n   * - **hidden:** The page content is not visible to the user. In practice this means that the\n   * document is either a background tab or part of a minimized window, or the OS screen lock is\n   * active.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilityState\n   */ get visibility() {\n        return this.#visibility();\n    }\n    #handlePageEvent(event1) {\n        if (IS_SAFARI) window.clearTimeout(this.#safariBeforeUnloadTimeout);\n        if (event1.type !== \"blur\" || this.#state() === \"active\") {\n            this.#state.set(determinePageState(event1));\n            this.#visibility.set(document.visibilityState == \"hidden\" ? \"hidden\" : \"visible\");\n        }\n    }\n    constructor(){\n        this.#state = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(determinePageState());\n        this.#visibility = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(IS_SERVER ? \"visible\" : document.visibilityState);\n    }\n}\nfunction determinePageState(event1) {\n    if (IS_SERVER) return \"hidden\";\n    if (event1?.type === \"blur\" || document.visibilityState === \"hidden\") return \"hidden\";\n    if (document.hasFocus()) return \"active\";\n    return \"passive\";\n}\nclass RAFLoop {\n    #id;\n    #callback;\n    constructor(callback){\n        this.#callback = callback;\n    }\n    start() {\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(this.#id)) return;\n        this.#loop();\n    }\n    stop() {\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(this.#id)) window.cancelAnimationFrame(this.#id);\n        this.#id = void 0;\n    }\n    #loop() {\n        this.#id = window.requestAnimationFrame(()=>{\n            if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(this.#id)) return;\n            this.#callback();\n            this.#loop();\n        });\n    }\n}\nclass HTMLMediaEvents {\n    #provider;\n    #ctx;\n    #waiting;\n    #attachedLoadStart;\n    #attachedCanPlay;\n    #timeRAF;\n    #pageVisibility;\n    #events;\n    get #media() {\n        return this.#provider.media;\n    }\n    constructor(provider, ctx){\n        this.#waiting = false;\n        this.#attachedLoadStart = false;\n        this.#attachedCanPlay = false;\n        this.#timeRAF = new RAFLoop(this.#onAnimationFrame.bind(this));\n        this.#pageVisibility = new PageVisibility();\n        /**\n   * The `timeupdate` event fires surprisingly infrequently during playback, meaning your progress\n   * bar (or whatever else is synced to the currentTime) moves in a choppy fashion. This helps\n   * resolve that by retrieving time updates in a request animation frame loop.\n   */ this.#lastSeenTime = 0;\n        this.#seekedTo = -1;\n        this.#devHandlers = /* @__PURE__ */ new Map();\n        this.#handleDevEvent = this.#onDevEvent.bind(this);\n        this.#provider = provider;\n        this.#ctx = ctx;\n        this.#events = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(provider.media);\n        this.#attachInitialListeners();\n        this.#pageVisibility.connect();\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#attachTimeUpdate.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this.#onDispose.bind(this));\n    }\n    #onDispose() {\n        this.#attachedLoadStart = false;\n        this.#attachedCanPlay = false;\n        this.#timeRAF.stop();\n        this.#events.abort();\n        this.#devHandlers?.clear();\n    }\n    #lastSeenTime;\n    #seekedTo;\n    #onAnimationFrame() {\n        const newTime = this.#media.currentTime;\n        const didStutter = IS_SAFARI && newTime - this.#seekedTo < 0.35;\n        if (!didStutter && this.#lastSeenTime !== newTime) {\n            this.#updateCurrentTime(newTime);\n            this.#lastSeenTime = newTime;\n        }\n    }\n    #attachInitialListeners() {\n        {\n            this.#ctx.logger?.info(\"attaching initial listeners\");\n        }\n        this.#attachEventListener(\"loadstart\", this.#onLoadStart);\n        this.#attachEventListener(\"abort\", this.#onAbort);\n        this.#attachEventListener(\"emptied\", this.#onEmptied);\n        this.#attachEventListener(\"error\", this.#onError);\n        this.#attachEventListener(\"volumechange\", this.#onVolumeChange);\n        this.#ctx.logger?.debug(\"attached initial media event listeners\");\n    }\n    #attachLoadStartListeners() {\n        if (this.#attachedLoadStart) return;\n        {\n            this.#ctx.logger?.info(\"attaching load start listeners\");\n        }\n        this.#attachEventListener(\"loadeddata\", this.#onLoadedData);\n        this.#attachEventListener(\"loadedmetadata\", this.#onLoadedMetadata);\n        this.#attachEventListener(\"canplay\", this.#onCanPlay);\n        this.#attachEventListener(\"canplaythrough\", this.#onCanPlayThrough);\n        this.#attachEventListener(\"durationchange\", this.#onDurationChange);\n        this.#attachEventListener(\"play\", this.#onPlay);\n        this.#attachEventListener(\"progress\", this.#onProgress);\n        this.#attachEventListener(\"stalled\", this.#onStalled);\n        this.#attachEventListener(\"suspend\", this.#onSuspend);\n        this.#attachEventListener(\"ratechange\", this.#onRateChange);\n        this.#attachedLoadStart = true;\n    }\n    #attachCanPlayListeners() {\n        if (this.#attachedCanPlay) return;\n        {\n            this.#ctx.logger?.info(\"attaching can play listeners\");\n        }\n        this.#attachEventListener(\"pause\", this.#onPause);\n        this.#attachEventListener(\"playing\", this.#onPlaying);\n        this.#attachEventListener(\"seeked\", this.#onSeeked);\n        this.#attachEventListener(\"seeking\", this.#onSeeking);\n        this.#attachEventListener(\"ended\", this.#onEnded);\n        this.#attachEventListener(\"waiting\", this.#onWaiting);\n        this.#attachedCanPlay = true;\n    }\n    #devHandlers;\n    #handleDevEvent;\n    #attachEventListener(eventType, handler) {\n        this.#devHandlers.set(eventType, handler);\n        this.#events.add(eventType, this.#handleDevEvent);\n    }\n    #onDevEvent(event2) {\n        this.#ctx.logger?.debugGroup(`\\u{1F4FA} provider fired \\`${event2.type}\\``).labelledLog(\"Provider\", this.#provider).labelledLog(\"Event\", event2).labelledLog(\"Media Store\", {\n            ...this.#ctx.$state\n        }).dispatch();\n        this.#devHandlers.get(event2.type)?.call(this, event2);\n    }\n    #updateCurrentTime(time, trigger) {\n        const newTime = Math.min(time, this.#ctx.$state.seekableEnd());\n        this.#ctx.notify(\"time-change\", newTime, trigger);\n    }\n    #onLoadStart(event2) {\n        if (this.#media.networkState === 3) {\n            this.#onAbort(event2);\n            return;\n        }\n        this.#attachLoadStartListeners();\n        this.#ctx.notify(\"load-start\", void 0, event2);\n    }\n    #onAbort(event2) {\n        this.#ctx.notify(\"abort\", void 0, event2);\n    }\n    #onEmptied() {\n        this.#ctx.notify(\"emptied\", void 0, event);\n    }\n    #onLoadedData(event2) {\n        this.#ctx.notify(\"loaded-data\", void 0, event2);\n    }\n    #onLoadedMetadata(event2) {\n        this.#lastSeenTime = 0;\n        this.#seekedTo = -1;\n        this.#attachCanPlayListeners();\n        this.#ctx.notify(\"loaded-metadata\", void 0, event2);\n        if (IS_IOS || IS_SAFARI && isHLSSrc(this.#ctx.$state.source())) {\n            this.#ctx.delegate.ready(this.#getCanPlayDetail(), event2);\n        }\n    }\n    #getCanPlayDetail() {\n        return {\n            provider: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#ctx.$provider),\n            duration: this.#media.duration,\n            buffered: this.#media.buffered,\n            seekable: this.#media.seekable\n        };\n    }\n    #onPlay(event2) {\n        if (!this.#ctx.$state.canPlay) return;\n        this.#ctx.notify(\"play\", void 0, event2);\n    }\n    #onPause(event2) {\n        if (this.#media.readyState === 1 && !this.#waiting) return;\n        this.#waiting = false;\n        this.#timeRAF.stop();\n        this.#ctx.notify(\"pause\", void 0, event2);\n    }\n    #onCanPlay(event2) {\n        this.#ctx.delegate.ready(this.#getCanPlayDetail(), event2);\n    }\n    #onCanPlayThrough(event2) {\n        if (this.#ctx.$state.started()) return;\n        this.#ctx.notify(\"can-play-through\", this.#getCanPlayDetail(), event2);\n    }\n    #onPlaying(event2) {\n        if (this.#media.paused) return;\n        this.#waiting = false;\n        this.#ctx.notify(\"playing\", void 0, event2);\n        this.#timeRAF.start();\n    }\n    #onStalled(event2) {\n        this.#ctx.notify(\"stalled\", void 0, event2);\n        if (this.#media.readyState < 3) {\n            this.#waiting = true;\n            this.#ctx.notify(\"waiting\", void 0, event2);\n        }\n    }\n    #onWaiting(event2) {\n        if (this.#media.readyState < 3) {\n            this.#waiting = true;\n            this.#ctx.notify(\"waiting\", void 0, event2);\n        }\n    }\n    #onEnded(event2) {\n        this.#timeRAF.stop();\n        this.#updateCurrentTime(this.#media.duration, event2);\n        this.#ctx.notify(\"end\", void 0, event2);\n        if (this.#ctx.$state.loop()) {\n            const hasCustomControls = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNil)(this.#media.controls);\n            if (hasCustomControls) this.#media.controls = false;\n        }\n    }\n    #attachTimeUpdate() {\n        const isPaused = this.#ctx.$state.paused(), isPageHidden = this.#pageVisibility.visibility === \"hidden\", shouldListenToTimeUpdates = isPaused || isPageHidden;\n        if (shouldListenToTimeUpdates) {\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this.#media, \"timeupdate\", this.#onTimeUpdate.bind(this));\n        }\n    }\n    #onTimeUpdate(event2) {\n        this.#updateCurrentTime(this.#media.currentTime, event2);\n    }\n    #onDurationChange(event2) {\n        if (this.#ctx.$state.ended()) {\n            this.#updateCurrentTime(this.#media.duration, event2);\n        }\n        this.#ctx.notify(\"duration-change\", this.#media.duration, event2);\n    }\n    #onVolumeChange(event2) {\n        const detail = {\n            volume: this.#media.volume,\n            muted: this.#media.muted\n        };\n        this.#ctx.notify(\"volume-change\", detail, event2);\n    }\n    #onSeeked(event2) {\n        this.#seekedTo = this.#media.currentTime;\n        this.#updateCurrentTime(this.#media.currentTime, event2);\n        this.#ctx.notify(\"seeked\", this.#media.currentTime, event2);\n        if (Math.trunc(this.#media.currentTime) === Math.trunc(this.#media.duration) && getNumberOfDecimalPlaces(this.#media.duration) > getNumberOfDecimalPlaces(this.#media.currentTime)) {\n            this.#updateCurrentTime(this.#media.duration, event2);\n            if (!this.#media.ended) {\n                this.#ctx.player.dispatch(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"media-play-request\", {\n                    trigger: event2\n                }));\n            }\n        }\n    }\n    #onSeeking(event2) {\n        this.#ctx.notify(\"seeking\", this.#media.currentTime, event2);\n    }\n    #onProgress(event2) {\n        const detail = {\n            buffered: this.#media.buffered,\n            seekable: this.#media.seekable\n        };\n        this.#ctx.notify(\"progress\", detail, event2);\n    }\n    #onSuspend(event2) {\n        this.#ctx.notify(\"suspend\", void 0, event2);\n    }\n    #onRateChange(event2) {\n        this.#ctx.notify(\"rate-change\", this.#media.playbackRate, event2);\n    }\n    #onError(event2) {\n        const error = this.#media.error;\n        if (!error) return;\n        const detail = {\n            message: error.message,\n            code: error.code,\n            mediaError: error\n        };\n        this.#ctx.notify(\"error\", detail, event2);\n    }\n}\nclass NativeAudioTracks {\n    #provider;\n    #ctx;\n    get #nativeTracks() {\n        return this.#provider.media.audioTracks;\n    }\n    constructor(provider, ctx){\n        this.#provider = provider;\n        this.#ctx = ctx;\n        this.#nativeTracks.onaddtrack = this.#onAddNativeTrack.bind(this);\n        this.#nativeTracks.onremovetrack = this.#onRemoveNativeTrack.bind(this);\n        this.#nativeTracks.onchange = this.#onChangeNativeTrack.bind(this);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this.#ctx.audioTracks, \"change\", this.#onChangeTrack.bind(this));\n    }\n    #onAddNativeTrack(event1) {\n        const nativeTrack = event1.track;\n        if (nativeTrack.label === \"\") return;\n        const id = nativeTrack.id.toString() || `native-audio-${this.#ctx.audioTracks.length}`, audioTrack = {\n            id,\n            label: nativeTrack.label,\n            language: nativeTrack.language,\n            kind: nativeTrack.kind,\n            selected: false\n        };\n        this.#ctx.audioTracks[ListSymbol.add](audioTrack, event1);\n        if (nativeTrack.enabled) audioTrack.selected = true;\n    }\n    #onRemoveNativeTrack(event1) {\n        const track = this.#ctx.audioTracks.getById(event1.track.id);\n        if (track) this.#ctx.audioTracks[ListSymbol.remove](track, event1);\n    }\n    #onChangeNativeTrack(event1) {\n        let enabledTrack = this.#getEnabledNativeTrack();\n        if (!enabledTrack) return;\n        const track = this.#ctx.audioTracks.getById(enabledTrack.id);\n        if (track) this.#ctx.audioTracks[ListSymbol.select](track, true, event1);\n    }\n    #getEnabledNativeTrack() {\n        return Array.from(this.#nativeTracks).find((track)=>track.enabled);\n    }\n    #onChangeTrack(event1) {\n        const { current } = event1.detail;\n        if (!current) return;\n        const track = this.#nativeTracks.getTrackById(current.id);\n        if (track) {\n            const prev = this.#getEnabledNativeTrack();\n            if (prev) prev.enabled = false;\n            track.enabled = true;\n        }\n    }\n}\nclass HTMLMediaProvider {\n    constructor(media, ctx){\n        this.scope = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createScope)();\n        this.currentSrc = null;\n        this.media = media;\n        this.ctx = ctx;\n        this.audioGain = new AudioGain(media, (gain)=>{\n            this.ctx.notify(\"audio-gain-change\", gain);\n        });\n    }\n    setup() {\n        new HTMLMediaEvents(this, this.ctx);\n        if (\"audioTracks\" in this.media) new NativeAudioTracks(this, this.ctx);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            this.audioGain.destroy();\n            this.media.srcObject = null;\n            this.media.removeAttribute(\"src\");\n            for (const source of this.media.querySelectorAll(\"source\"))source.remove();\n            this.media.load();\n        });\n    }\n    get type() {\n        return \"\";\n    }\n    setPlaybackRate(rate) {\n        this.media.playbackRate = rate;\n    }\n    async play() {\n        return this.media.play();\n    }\n    async pause() {\n        return this.media.pause();\n    }\n    setMuted(muted) {\n        this.media.muted = muted;\n    }\n    setVolume(volume) {\n        this.media.volume = volume;\n    }\n    setCurrentTime(time) {\n        this.media.currentTime = time;\n    }\n    setPlaysInline(inline) {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this.media, \"playsinline\", inline);\n    }\n    async loadSource({ src, type }, preload) {\n        this.media.preload = preload || \"\";\n        if (isMediaStream(src)) {\n            this.removeSource();\n            this.media.srcObject = src;\n        } else {\n            this.media.srcObject = null;\n            if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src)) {\n                if (type !== \"?\") {\n                    this.appendSource({\n                        src,\n                        type\n                    });\n                } else {\n                    this.removeSource();\n                    this.media.src = this.#appendMediaFragment(src);\n                }\n            } else {\n                this.removeSource();\n                this.media.src = window.URL.createObjectURL(src);\n            }\n        }\n        this.media.load();\n        this.currentSrc = {\n            src,\n            type\n        };\n    }\n    /**\n   * Append source so it works when requesting AirPlay since hls.js will remove it.\n   */ appendSource(src, defaultType) {\n        const prevSource = this.media.querySelector(\"source[data-vds]\"), source = prevSource ?? document.createElement(\"source\");\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(source, \"src\", this.#appendMediaFragment(src.src));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(source, \"type\", src.type !== \"?\" ? src.type : defaultType);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(source, \"data-vds\", \"\");\n        if (!prevSource) this.media.append(source);\n    }\n    removeSource() {\n        this.media.querySelector(\"source[data-vds]\")?.remove();\n    }\n    #appendMediaFragment(src) {\n        const { clipStartTime, clipEndTime } = this.ctx.$state, startTime = clipStartTime(), endTime = clipEndTime();\n        if (startTime > 0 && endTime > 0) {\n            return `${src}#t=${startTime},${endTime}`;\n        } else if (startTime > 0) {\n            return `${src}#t=${startTime}`;\n        } else if (endTime > 0) {\n            return `${src}#t=0,${endTime}`;\n        }\n        return src;\n    }\n}\nclass HTMLRemotePlaybackAdapter {\n    #media;\n    #ctx;\n    #state;\n    #supported;\n    get supported() {\n        return this.#supported();\n    }\n    constructor(media, ctx){\n        this.#supported = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n        this.#media = media;\n        this.#ctx = ctx;\n        this.#setup();\n    }\n    #setup() {\n        if (IS_SERVER || !this.#media?.remote || !this.canPrompt) return;\n        this.#media.remote.watchAvailability((available)=>{\n            this.#supported.set(available);\n        }).catch(()=>{\n            this.#supported.set(false);\n        });\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchSupported.bind(this));\n    }\n    #watchSupported() {\n        if (!this.#supported()) return;\n        const events = [\n            \"connecting\",\n            \"connect\",\n            \"disconnect\"\n        ], onStateChange = this.#onStateChange.bind(this);\n        onStateChange();\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this.#media, \"playing\", onStateChange);\n        const remoteEvents = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(this.#media.remote);\n        for (const type of events){\n            remoteEvents.add(type, onStateChange);\n        }\n    }\n    async prompt() {\n        if (!this.supported) throw Error(\"Not supported on this platform.\");\n        if (this.type === \"airplay\" && this.#media.webkitShowPlaybackTargetPicker) {\n            return this.#media.webkitShowPlaybackTargetPicker();\n        }\n        return this.#media.remote.prompt();\n    }\n    #onStateChange(event1) {\n        const state = this.#media.remote.state;\n        if (state === this.#state) return;\n        const detail = {\n            type: this.type,\n            state\n        };\n        this.#ctx.notify(\"remote-playback-change\", detail, event1);\n        this.#state = state;\n    }\n}\nclass HTMLAirPlayAdapter extends HTMLRemotePlaybackAdapter {\n    get canPrompt() {\n        return \"WebKitPlaybackTargetAvailabilityEvent\" in window;\n    }\n    constructor(...args){\n        super(...args), this.type = \"airplay\";\n    }\n}\nclass NativeHLSTextTracks {\n    #video;\n    #ctx;\n    constructor(video, ctx){\n        this.#video = video;\n        this.#ctx = ctx;\n        video.textTracks.onaddtrack = this.#onAddTrack.bind(this);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this.#onDispose.bind(this));\n    }\n    #onAddTrack(event1) {\n        const nativeTrack = event1.track;\n        if (!nativeTrack || findTextTrackElement(this.#video, nativeTrack)) return;\n        const track = new TextTrack({\n            id: nativeTrack.id,\n            kind: nativeTrack.kind,\n            label: nativeTrack.label ?? \"\",\n            language: nativeTrack.language,\n            type: \"vtt\"\n        });\n        track[TextTrackSymbol.native] = {\n            track: nativeTrack\n        };\n        track[TextTrackSymbol.readyState] = 2;\n        track[TextTrackSymbol.nativeHLS] = true;\n        let lastIndex = 0;\n        const onCueChange = (event2)=>{\n            if (!nativeTrack.cues) return;\n            for(let i = lastIndex; i < nativeTrack.cues.length; i++){\n                track.addCue(nativeTrack.cues[i], event2);\n                lastIndex++;\n            }\n        };\n        onCueChange(event1);\n        nativeTrack.oncuechange = onCueChange;\n        this.#ctx.textTracks.add(track, event1);\n        track.setMode(nativeTrack.mode, event1);\n    }\n    #onDispose() {\n        this.#video.textTracks.onaddtrack = null;\n        for (const track of this.#ctx.textTracks){\n            const nativeTrack = track[TextTrackSymbol.native]?.track;\n            if (nativeTrack?.oncuechange) nativeTrack.oncuechange = null;\n        }\n    }\n}\nfunction findTextTrackElement(video, track) {\n    return Array.from(video.children).find((el)=>el.track === track);\n}\nclass VideoPictureInPicture {\n    #video;\n    #media;\n    constructor(video, media){\n        this.#onChange = (active, event1)=>{\n            this.#media.notify(\"picture-in-picture-change\", active, event1);\n        };\n        this.#video = video;\n        this.#media = media;\n        new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(video).add(\"enterpictureinpicture\", this.#onEnter.bind(this)).add(\"leavepictureinpicture\", this.#onExit.bind(this));\n    }\n    get active() {\n        return document.pictureInPictureElement === this.#video;\n    }\n    get supported() {\n        return canUsePictureInPicture(this.#video);\n    }\n    async enter() {\n        return this.#video.requestPictureInPicture();\n    }\n    exit() {\n        return document.exitPictureInPicture();\n    }\n    #onEnter(event1) {\n        this.#onChange(true, event1);\n    }\n    #onExit(event1) {\n        this.#onChange(false, event1);\n    }\n    #onChange;\n}\nclass VideoPresentation {\n    #video;\n    #media;\n    #mode;\n    get mode() {\n        return this.#mode;\n    }\n    constructor(video, media){\n        this.#mode = \"inline\";\n        this.#video = video;\n        this.#media = media;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(video, \"webkitpresentationmodechanged\", this.#onModeChange.bind(this));\n    }\n    get supported() {\n        return canUseVideoPresentation(this.#video);\n    }\n    async setPresentationMode(mode) {\n        if (this.#mode === mode) return;\n        this.#video.webkitSetPresentationMode(mode);\n    }\n    #onModeChange(event1) {\n        const prevMode = this.#mode;\n        this.#mode = this.#video.webkitPresentationMode;\n        {\n            this.#media.logger?.infoGroup(\"presentation mode change\").labelledLog(\"Mode\", this.#mode).labelledLog(\"Event\", event1).dispatch();\n        }\n        this.#media.player?.dispatch(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"video-presentation-change\", {\n            detail: this.#mode,\n            trigger: event1\n        }));\n        [\n            \"fullscreen\",\n            \"picture-in-picture\"\n        ].forEach((type)=>{\n            if (this.#mode === type || prevMode === type) {\n                this.#media.notify(`${type}-change`, this.#mode === type, event1);\n            }\n        });\n    }\n}\nclass FullscreenPresentationAdapter {\n    #presentation;\n    get active() {\n        return this.#presentation.mode === \"fullscreen\";\n    }\n    get supported() {\n        return this.#presentation.supported;\n    }\n    constructor(presentation){\n        this.#presentation = presentation;\n    }\n    async enter() {\n        this.#presentation.setPresentationMode(\"fullscreen\");\n    }\n    async exit() {\n        this.#presentation.setPresentationMode(\"inline\");\n    }\n}\nclass PIPPresentationAdapter {\n    #presentation;\n    get active() {\n        return this.#presentation.mode === \"picture-in-picture\";\n    }\n    get supported() {\n        return this.#presentation.supported;\n    }\n    constructor(presentation){\n        this.#presentation = presentation;\n    }\n    async enter() {\n        this.#presentation.setPresentationMode(\"picture-in-picture\");\n    }\n    async exit() {\n        this.#presentation.setPresentationMode(\"inline\");\n    }\n}\nclass VideoProvider extends HTMLMediaProvider {\n    get type() {\n        return \"video\";\n    }\n    constructor(video, ctx){\n        super(video, ctx), this.$$PROVIDER_TYPE = \"VIDEO\";\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.scoped)(()=>{\n            this.airPlay = new HTMLAirPlayAdapter(video, ctx);\n            if (canUseVideoPresentation(video)) {\n                const presentation = new VideoPresentation(video, ctx);\n                this.fullscreen = new FullscreenPresentationAdapter(presentation);\n                this.pictureInPicture = new PIPPresentationAdapter(presentation);\n            } else if (canUsePictureInPicture(video)) {\n                this.pictureInPicture = new VideoPictureInPicture(video, ctx);\n            }\n        }, this.scope);\n    }\n    setup() {\n        super.setup();\n        if (canPlayHLSNatively(this.video)) {\n            new NativeHLSTextTracks(this.video, this.ctx);\n        }\n        this.ctx.textRenderers.attachVideo(this.video);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            this.ctx.textRenderers.attachVideo(null);\n        });\n        if (this.type === \"video\") this.ctx.notify(\"provider-setup\", this);\n    }\n    /**\n   * The native HTML `<video>` element.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement}\n   */ get video() {\n        return this.media;\n    }\n}\nvar provider$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    VideoProvider: VideoProvider\n});\nfunction getLangName(langCode) {\n    try {\n        const displayNames = new Intl.DisplayNames(navigator.languages, {\n            type: \"language\"\n        });\n        const languageName = displayNames.of(langCode);\n        return languageName ?? null;\n    } catch (err) {\n        return null;\n    }\n}\nconst toDOMEventType = (type)=>`dash-${(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.camelToKebabCase)(type)}`;\nclass DASHController {\n    #video;\n    #ctx;\n    #instance;\n    #callbacks;\n    #stopLiveSync;\n    get instance() {\n        return this.#instance;\n    }\n    constructor(video, ctx){\n        this.#instance = null;\n        this.#callbacks = /* @__PURE__ */ new Set();\n        this.#stopLiveSync = null;\n        this.config = {};\n        this.#currentTrack = null;\n        this.#cueTracker = {};\n        this.#retryLoadingTimer = -1;\n        this.#video = video;\n        this.#ctx = ctx;\n    }\n    setup(ctor) {\n        this.#instance = ctor().create();\n        const dispatcher = this.#dispatchDASHEvent.bind(this);\n        for (const event1 of Object.values(ctor.events))this.#instance.on(event1, dispatcher);\n        this.#instance.on(ctor.events.ERROR, this.#onError.bind(this));\n        for (const callback of this.#callbacks)callback(this.#instance);\n        this.#ctx.player.dispatch(\"dash-instance\", {\n            detail: this.#instance\n        });\n        this.#instance.initialize(this.#video, void 0, false);\n        this.#instance.updateSettings({\n            streaming: {\n                text: {\n                    // Disabling text rendering by dash.\n                    defaultEnabled: false,\n                    dispatchForManualRendering: true\n                },\n                buffer: {\n                    /// Enables buffer replacement when switching bitrates for faster switching.\n                    fastSwitchEnabled: true\n                }\n            },\n            ...this.config\n        });\n        this.#instance.on(ctor.events.FRAGMENT_LOADING_STARTED, this.#onFragmentLoadStart.bind(this));\n        this.#instance.on(ctor.events.FRAGMENT_LOADING_COMPLETED, this.#onFragmentLoadComplete.bind(this));\n        this.#instance.on(ctor.events.MANIFEST_LOADED, this.#onManifestLoaded.bind(this));\n        this.#instance.on(ctor.events.QUALITY_CHANGE_RENDERED, this.#onQualityChange.bind(this));\n        this.#instance.on(ctor.events.TEXT_TRACKS_ADDED, this.#onTextTracksAdded.bind(this));\n        this.#instance.on(ctor.events.TRACK_CHANGE_RENDERED, this.#onTrackChange.bind(this));\n        this.#ctx.qualities[QualitySymbol.enableAuto] = this.#enableAutoQuality.bind(this);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this.#ctx.qualities, \"change\", this.#onUserQualityChange.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this.#ctx.audioTracks, \"change\", this.#onUserAudioChange.bind(this));\n        this.#stopLiveSync = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#liveSync.bind(this));\n    }\n    #createDOMEvent(event1) {\n        return new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(toDOMEventType(event1.type), {\n            detail: event1\n        });\n    }\n    #liveSync() {\n        if (!this.#ctx.$state.live()) return;\n        const raf = new RAFLoop(this.#liveSyncPosition.bind(this));\n        raf.start();\n        return raf.stop.bind(raf);\n    }\n    #liveSyncPosition() {\n        if (!this.#instance) return;\n        const position = this.#instance.duration() - this.#instance.time();\n        this.#ctx.$state.liveSyncPosition.set(!isNaN(position) ? position : Infinity);\n    }\n    #dispatchDASHEvent(event1) {\n        this.#ctx.player?.dispatch(this.#createDOMEvent(event1));\n    }\n    #currentTrack;\n    #cueTracker;\n    #onTextFragmentLoaded(event1) {\n        const native = this.#currentTrack?.[TextTrackSymbol.native], cues = (native?.track).cues;\n        if (!native || !cues) return;\n        const id = this.#currentTrack.id, startIndex = this.#cueTracker[id] ?? 0, trigger = this.#createDOMEvent(event1);\n        for(let i = startIndex; i < cues.length; i++){\n            const cue = cues[i];\n            if (!cue.positionAlign) cue.positionAlign = \"auto\";\n            this.#currentTrack.addCue(cue, trigger);\n        }\n        this.#cueTracker[id] = cues.length;\n    }\n    #onTextTracksAdded(event1) {\n        if (!this.#instance) return;\n        const data = event1.tracks, nativeTextTracks = [\n            ...this.#video.textTracks\n        ].filter((track)=>\"manualMode\" in track), trigger = this.#createDOMEvent(event1);\n        for(let i = 0; i < nativeTextTracks.length; i++){\n            const textTrackInfo = data[i], nativeTextTrack = nativeTextTracks[i];\n            const id = `dash-${textTrackInfo.kind}-${i}`, track = new TextTrack({\n                id,\n                label: textTrackInfo?.label ?? textTrackInfo.labels.find((t)=>t.text)?.text ?? (textTrackInfo?.lang && getLangName(textTrackInfo.lang)) ?? textTrackInfo?.lang ?? void 0,\n                language: textTrackInfo.lang ?? void 0,\n                kind: textTrackInfo.kind,\n                default: textTrackInfo.defaultTrack\n            });\n            track[TextTrackSymbol.native] = {\n                managed: true,\n                track: nativeTextTrack\n            };\n            track[TextTrackSymbol.readyState] = 2;\n            track[TextTrackSymbol.onModeChange] = ()=>{\n                if (!this.#instance) return;\n                if (track.mode === \"showing\") {\n                    this.#instance.setTextTrack(i);\n                    this.#currentTrack = track;\n                } else {\n                    this.#instance.setTextTrack(-1);\n                    this.#currentTrack = null;\n                }\n            };\n            this.#ctx.textTracks.add(track, trigger);\n        }\n    }\n    #onTrackChange(event1) {\n        const { mediaType, newMediaInfo } = event1;\n        if (mediaType === \"audio\") {\n            const track = this.#ctx.audioTracks.getById(`dash-audio-${newMediaInfo.index}`);\n            if (track) {\n                const trigger = this.#createDOMEvent(event1);\n                this.#ctx.audioTracks[ListSymbol.select](track, true, trigger);\n            }\n        }\n    }\n    #onQualityChange(event1) {\n        if (event1.mediaType !== \"video\") return;\n        const quality = this.#ctx.qualities[event1.newQuality];\n        if (quality) {\n            const trigger = this.#createDOMEvent(event1);\n            this.#ctx.qualities[ListSymbol.select](quality, true, trigger);\n        }\n    }\n    #onManifestLoaded(event1) {\n        if (this.#ctx.$state.canPlay() || !this.#instance) return;\n        const { type, mediaPresentationDuration } = event1.data, trigger = this.#createDOMEvent(event1);\n        this.#ctx.notify(\"stream-type-change\", type !== \"static\" ? \"live\" : \"on-demand\", trigger);\n        this.#ctx.notify(\"duration-change\", mediaPresentationDuration, trigger);\n        this.#ctx.qualities[QualitySymbol.setAuto](true, trigger);\n        const media = this.#instance.getVideoElement();\n        const videoQualities = this.#instance.getTracksForTypeFromManifest(\"video\", event1.data);\n        const supportedVideoMimeType = [\n            ...new Set(videoQualities.map((e)=>e.mimeType))\n        ].find((type2)=>type2 && canPlayVideoType(media, type2));\n        const videoQuality = videoQualities.filter((track)=>supportedVideoMimeType === track.mimeType)[0];\n        let audioTracks = this.#instance.getTracksForTypeFromManifest(\"audio\", event1.data);\n        const supportedAudioMimeType = [\n            ...new Set(audioTracks.map((e)=>e.mimeType))\n        ].find((type2)=>type2 && canPlayAudioType(media, type2));\n        audioTracks = audioTracks.filter((track)=>supportedAudioMimeType === track.mimeType);\n        videoQuality.bitrateList.forEach((bitrate, index)=>{\n            const quality = {\n                id: bitrate.id?.toString() ?? `dash-bitrate-${index}`,\n                width: bitrate.width ?? 0,\n                height: bitrate.height ?? 0,\n                bitrate: bitrate.bandwidth ?? 0,\n                codec: videoQuality.codec,\n                index\n            };\n            this.#ctx.qualities[ListSymbol.add](quality, trigger);\n        });\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(videoQuality.index)) {\n            const quality = this.#ctx.qualities[videoQuality.index];\n            if (quality) this.#ctx.qualities[ListSymbol.select](quality, true, trigger);\n        }\n        audioTracks.forEach((audioTrack, index)=>{\n            const matchingLabel = audioTrack.labels.find((label2)=>{\n                return navigator.languages.some((language)=>{\n                    return label2.lang && language.toLowerCase().startsWith(label2.lang.toLowerCase());\n                });\n            });\n            const label = matchingLabel || audioTrack.labels[0];\n            const localTrack = {\n                id: `dash-audio-${audioTrack?.index}`,\n                label: label?.text ?? (audioTrack.lang && getLangName(audioTrack.lang)) ?? audioTrack.lang ?? \"\",\n                language: audioTrack.lang ?? \"\",\n                kind: \"main\",\n                mimeType: audioTrack.mimeType,\n                codec: audioTrack.codec,\n                index\n            };\n            this.#ctx.audioTracks[ListSymbol.add](localTrack, trigger);\n        });\n        media.dispatchEvent(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"canplay\", {\n            trigger\n        }));\n    }\n    #onError(event1) {\n        const { type: eventType, error: data } = event1;\n        {\n            this.#ctx.logger?.errorGroup(`[vidstack] DASH error \\`${data.message}\\``).labelledLog(\"Media Element\", this.#video).labelledLog(\"DASH Instance\", this.#instance).labelledLog(\"Event Type\", eventType).labelledLog(\"Data\", data).labelledLog(\"Src\", (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#ctx.$state.source)).labelledLog(\"Media Store\", {\n                ...this.#ctx.$state\n            }).dispatch();\n        }\n        switch(data.code){\n            case 27:\n                this.#onNetworkError(data);\n                break;\n            default:\n                this.#onFatalError(data);\n                break;\n        }\n    }\n    #onFragmentLoadStart() {\n        if (this.#retryLoadingTimer >= 0) this.#clearRetryTimer();\n    }\n    #onFragmentLoadComplete(event1) {\n        const mediaType = event1.mediaType;\n        if (mediaType === \"text\") {\n            requestAnimationFrame(this.#onTextFragmentLoaded.bind(this, event1));\n        }\n    }\n    #retryLoadingTimer;\n    #onNetworkError(error) {\n        this.#clearRetryTimer();\n        this.#instance?.play();\n        this.#retryLoadingTimer = window.setTimeout(()=>{\n            this.#retryLoadingTimer = -1;\n            this.#onFatalError(error);\n        }, 5e3);\n    }\n    #clearRetryTimer() {\n        clearTimeout(this.#retryLoadingTimer);\n        this.#retryLoadingTimer = -1;\n    }\n    #onFatalError(error) {\n        this.#ctx.notify(\"error\", {\n            message: error.message ?? \"\",\n            code: 1,\n            error\n        });\n    }\n    #enableAutoQuality() {\n        this.#switchAutoBitrate(\"video\", true);\n        const { qualities } = this.#ctx;\n        this.#instance?.setQualityFor(\"video\", qualities.selectedIndex, true);\n    }\n    #switchAutoBitrate(type, auto) {\n        this.#instance?.updateSettings({\n            streaming: {\n                abr: {\n                    autoSwitchBitrate: {\n                        [type]: auto\n                    }\n                }\n            }\n        });\n    }\n    #onUserQualityChange() {\n        const { qualities } = this.#ctx;\n        if (!this.#instance || qualities.auto || !qualities.selected) return;\n        this.#switchAutoBitrate(\"video\", false);\n        this.#instance.setQualityFor(\"video\", qualities.selectedIndex, qualities.switch === \"current\");\n        if (IS_CHROME) {\n            this.#video.currentTime = this.#video.currentTime;\n        }\n    }\n    #onUserAudioChange() {\n        if (!this.#instance) return;\n        const { audioTracks } = this.#ctx, selectedTrack = this.#instance.getTracksFor(\"audio\").find((track)=>audioTracks.selected && audioTracks.selected.id === `dash-audio-${track.index}`);\n        if (selectedTrack) this.#instance.setCurrentTrack(selectedTrack);\n    }\n    #reset() {\n        this.#clearRetryTimer();\n        this.#currentTrack = null;\n        this.#cueTracker = {};\n    }\n    onInstance(callback) {\n        this.#callbacks.add(callback);\n        return ()=>this.#callbacks.delete(callback);\n    }\n    loadSource(src) {\n        this.#reset();\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src)) return;\n        this.#instance?.attachSource(src.src);\n    }\n    destroy() {\n        this.#reset();\n        this.#instance?.destroy();\n        this.#instance = null;\n        this.#stopLiveSync?.();\n        this.#stopLiveSync = null;\n        this.#ctx?.logger?.info(\"\\uD83C\\uDFD7️ Destroyed DASH instance\");\n    }\n}\nfunction coerceToError(error) {\n    return error instanceof Error ? error : Error(typeof error === \"string\" ? error : JSON.stringify(error));\n}\nfunction assert(condition, message) {\n    if (!condition) {\n        throw Error(message || \"Assertion failed.\");\n    }\n}\nclass DASHLibLoader {\n    #lib;\n    #ctx;\n    #callback;\n    constructor(lib, ctx, callback){\n        this.#lib = lib;\n        this.#ctx = ctx;\n        this.#callback = callback;\n        this.#startLoading();\n    }\n    async #startLoading() {\n        this.#ctx.logger?.info(\"\\uD83C\\uDFD7️ Loading DASH Library\");\n        const callbacks = {\n            onLoadStart: this.#onLoadStart.bind(this),\n            onLoaded: this.#onLoaded.bind(this),\n            onLoadError: this.#onLoadError.bind(this)\n        };\n        let ctor = await loadDASHScript(this.#lib, callbacks);\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(ctor) && !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(this.#lib)) ctor = await importDASH(this.#lib, callbacks);\n        if (!ctor) return null;\n        if (!window.dashjs.supportsMediaSource()) {\n            const message = \"[vidstack] `dash.js` is not supported in this environment\";\n            this.#ctx.logger?.error(message);\n            this.#ctx.player.dispatch(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"dash-unsupported\"));\n            this.#ctx.notify(\"error\", {\n                message,\n                code: 4\n            });\n            return null;\n        }\n        return ctor;\n    }\n    #onLoadStart() {\n        {\n            this.#ctx.logger?.infoGroup(\"Starting to load `dash.js`\").labelledLog(\"URL\", this.#lib).dispatch();\n        }\n        this.#ctx.player.dispatch(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"dash-lib-load-start\"));\n    }\n    #onLoaded(ctor) {\n        {\n            this.#ctx.logger?.infoGroup(\"Loaded `dash.js`\").labelledLog(\"Library\", this.#lib).labelledLog(\"Constructor\", ctor).dispatch();\n        }\n        this.#ctx.player.dispatch(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"dash-lib-loaded\", {\n            detail: ctor\n        }));\n        this.#callback(ctor);\n    }\n    #onLoadError(e) {\n        const error = coerceToError(e);\n        {\n            this.#ctx.logger?.errorGroup(\"[vidstack] Failed to load `dash.js`\").labelledLog(\"Library\", this.#lib).labelledLog(\"Error\", e).dispatch();\n        }\n        this.#ctx.player.dispatch(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"dash-lib-load-error\", {\n            detail: error\n        }));\n        this.#ctx.notify(\"error\", {\n            message: error.message,\n            code: 4,\n            error\n        });\n    }\n}\nasync function importDASH(loader, callbacks = {}) {\n    if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(loader)) return void 0;\n    callbacks.onLoadStart?.();\n    if (isDASHConstructor(loader)) {\n        callbacks.onLoaded?.(loader);\n        return loader;\n    }\n    if (isDASHNamespace(loader)) {\n        const ctor = loader.MediaPlayer;\n        callbacks.onLoaded?.(ctor);\n        return ctor;\n    }\n    try {\n        const ctor = (await loader())?.default;\n        if (isDASHNamespace(ctor)) {\n            callbacks.onLoaded?.(ctor.MediaPlayer);\n            return ctor.MediaPlayer;\n        }\n        if (ctor) {\n            callbacks.onLoaded?.(ctor);\n        } else {\n            throw Error( true ? \"[vidstack] failed importing `dash.js`. Dynamic import returned invalid object.\" : 0);\n        }\n        return ctor;\n    } catch (err) {\n        callbacks.onLoadError?.(err);\n    }\n    return void 0;\n}\nasync function loadDASHScript(src, callbacks = {}) {\n    if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src)) return void 0;\n    callbacks.onLoadStart?.();\n    try {\n        await loadScript(src);\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(window.dashjs.MediaPlayer)) {\n            throw Error( true ? \"[vidstack] failed loading `dash.js`. Could not find a valid `Dash` constructor on window\" : 0);\n        }\n        const ctor = window.dashjs.MediaPlayer;\n        callbacks.onLoaded?.(ctor);\n        return ctor;\n    } catch (err) {\n        callbacks.onLoadError?.(err);\n    }\n    return void 0;\n}\nfunction isDASHConstructor(value) {\n    return value && value.prototype && value.prototype !== Function;\n}\nfunction isDASHNamespace(value) {\n    return value && \"MediaPlayer\" in value;\n}\nconst JS_DELIVR_CDN = \"https://cdn.jsdelivr.net\";\nclass DASHProvider extends VideoProvider {\n    #ctor;\n    #controller;\n    /**\n   * The `dash.js` constructor.\n   */ get ctor() {\n        return this.#ctor;\n    }\n    /**\n   * The current `dash.js` instance.\n   */ get instance() {\n        return this.#controller.instance;\n    }\n    static{\n        /**\n   * Whether `dash.js` is supported in this environment.\n   */ this.supported = isDASHSupported();\n    }\n    get type() {\n        return \"dash\";\n    }\n    get canLiveSync() {\n        return true;\n    }\n    #library;\n    /**\n   * The `dash.js` configuration object.\n   *\n   * @see {@link https://cdn.dashjs.org/latest/jsdoc/module-Settings.html}\n   */ get config() {\n        return this.#controller.config;\n    }\n    set config(config) {\n        this.#controller.config = config;\n    }\n    /**\n   * The `dash.js` constructor (supports dynamic imports) or a URL of where it can be found.\n   *\n   * @defaultValue `https://cdn.jsdelivr.net/npm/dashjs@4.7.4/dist/dash.all.min.js`\n   */ get library() {\n        return this.#library;\n    }\n    set library(library) {\n        this.#library = library;\n    }\n    preconnect() {\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(this.#library)) return;\n        preconnect(this.#library);\n    }\n    setup() {\n        super.setup();\n        new DASHLibLoader(this.#library, this.ctx, (ctor)=>{\n            this.#ctor = ctor;\n            this.#controller.setup(ctor);\n            this.ctx.notify(\"provider-setup\", this);\n            const src = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.ctx.$state.source);\n            if (src) this.loadSource(src);\n        });\n    }\n    async loadSource(src, preload) {\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src)) {\n            this.removeSource();\n            return;\n        }\n        this.media.preload = preload || \"\";\n        this.appendSource(src, \"application/x-mpegurl\");\n        this.#controller.loadSource(src);\n        this.currentSrc = src;\n    }\n    /**\n   * The given callback is invoked when a new `dash.js` instance is created and right before it's\n   * attached to media.\n   */ onInstance(callback) {\n        const instance = this.#controller.instance;\n        if (instance) callback(instance);\n        return this.#controller.onInstance(callback);\n    }\n    destroy() {\n        this.#controller.destroy();\n    }\n    constructor(...args){\n        super(...args), this.$$PROVIDER_TYPE = \"DASH\", this.#ctor = null, this.#controller = new DASHController(this.video, this.ctx), this.#library = `${JS_DELIVR_CDN}/npm/dashjs@4.7.4/dist/dash${\".all.debug.js\"}`;\n    }\n}\nvar provider = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    DASHProvider: DASHProvider\n});\nclass DASHProviderLoader extends VideoProviderLoader {\n    static{\n        this.supported = isDASHSupported();\n    }\n    canPlay(src) {\n        return DASHProviderLoader.supported && isDASHSrc(src);\n    }\n    async load(context) {\n        if (IS_SERVER) {\n            throw Error(\"[vidstack] can not load dash provider server-side\");\n        }\n        if (!this.target) {\n            throw Error(\"[vidstack] `<video>` element was not found - did you forget to include `<media-provider>`?\");\n        }\n        return new (await Promise.resolve().then(function() {\n            return provider;\n        })).DASHProvider(this.target, context);\n    }\n    constructor(...args){\n        super(...args), this.name = \"dash\";\n    }\n}\nclass VimeoProviderLoader {\n    preconnect() {\n        const connections = [\n            \"https://i.vimeocdn.com\",\n            \"https://f.vimeocdn.com\",\n            \"https://fresnel.vimeocdn.com\"\n        ];\n        for (const url of connections){\n            preconnect(url);\n        }\n    }\n    canPlay(src) {\n        return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src) && src.type === \"video/vimeo\";\n    }\n    mediaType() {\n        return \"video\";\n    }\n    async load(ctx) {\n        if (IS_SERVER) {\n            throw Error(\"[vidstack] can not load vimeo provider server-side\");\n        }\n        if (!this.target) {\n            throw Error(\"[vidstack] `<iframe>` element was not found - did you forget to include media provider?\");\n        }\n        return new (await __webpack_require__.e(/*! import() */ \"vendor-chunks/@vidstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./vidstack-Bt-dOpts.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Bt-dOpts.js\"))).VimeoProvider(this.target, ctx);\n    }\n    async loadPoster(src, ctx, abort) {\n        const { resolveVimeoVideoId, getVimeoVideoInfo } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@vidstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./vidstack-krOAtKMi.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-krOAtKMi.js\"));\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src)) return null;\n        const { videoId, hash } = resolveVimeoVideoId(src.src);\n        if (videoId) {\n            return getVimeoVideoInfo(videoId, abort, hash).then((info)=>info ? info.poster : null);\n        }\n        return null;\n    }\n    constructor(){\n        this.name = \"vimeo\";\n    }\n}\nclass YouTubeProviderLoader {\n    preconnect() {\n        const connections = [\n            // Botguard script.\n            \"https://www.google.com\",\n            // Posters.\n            \"https://i.ytimg.com\",\n            // Ads.\n            \"https://googleads.g.doubleclick.net\",\n            \"https://static.doubleclick.net\"\n        ];\n        for (const url of connections){\n            preconnect(url);\n        }\n    }\n    canPlay(src) {\n        return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src) && src.type === \"video/youtube\";\n    }\n    mediaType() {\n        return \"video\";\n    }\n    async load(ctx) {\n        if (IS_SERVER) {\n            throw Error(\"[vidstack] can not load youtube provider server-side\");\n        }\n        if (!this.target) {\n            throw Error(\"[vidstack] `<iframe>` element was not found - did you forget to include media provider?\");\n        }\n        return new (await __webpack_require__.e(/*! import() */ \"vendor-chunks/@vidstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./vidstack-CoE5RD0i.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CoE5RD0i.js\"))).YouTubeProvider(this.target, ctx);\n    }\n    async loadPoster(src, ctx, abort) {\n        const { findYouTubePoster, resolveYouTubeVideoId } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@vidstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./vidstack-Dm1xEU9Q.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Dm1xEU9Q.js\"));\n        const videoId = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src) && resolveYouTubeVideoId(src.src);\n        if (videoId) return findYouTubePoster(videoId, abort);\n        return null;\n    }\n    constructor(){\n        this.name = \"youtube\";\n    }\n}\nfunction padNumberWithZeroes(num, expectedLength) {\n    const str = String(num);\n    const actualLength = str.length;\n    const shouldPad = actualLength < expectedLength;\n    if (shouldPad) {\n        const padLength = expectedLength - actualLength;\n        const padding = `0`.repeat(padLength);\n        return `${padding}${num}`;\n    }\n    return str;\n}\nfunction parseTime(duration) {\n    const hours = Math.trunc(duration / 3600);\n    const minutes = Math.trunc(duration % 3600 / 60);\n    const seconds = Math.trunc(duration % 60);\n    const fraction = Number((duration - Math.trunc(duration)).toPrecision(3));\n    return {\n        hours,\n        minutes,\n        seconds,\n        fraction\n    };\n}\nfunction formatTime(duration, { padHrs = null, padMins = null, showHrs = false, showMs = false } = {}) {\n    const { hours, minutes, seconds, fraction } = parseTime(duration), paddedHours = padHrs ? padNumberWithZeroes(hours, 2) : hours, paddedMinutes = padMins || (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNull)(padMins) && duration >= 3600 ? padNumberWithZeroes(minutes, 2) : minutes, paddedSeconds = padNumberWithZeroes(seconds, 2), paddedMs = showMs && fraction > 0 ? `.${String(fraction).replace(/^0?\\./, \"\")}` : \"\", time = `${paddedMinutes}:${paddedSeconds}${paddedMs}`;\n    return hours > 0 || showHrs ? `${paddedHours}:${time}` : time;\n}\nfunction formatSpokenTime(duration) {\n    const spokenParts = [];\n    const { hours, minutes, seconds } = parseTime(duration);\n    if (hours > 0) {\n        spokenParts.push(`${hours} hour`);\n    }\n    if (minutes > 0) {\n        spokenParts.push(`${minutes} min`);\n    }\n    if (seconds > 0 || spokenParts.length === 0) {\n        spokenParts.push(`${seconds} sec`);\n    }\n    return spokenParts.join(\" \");\n}\nconst MEDIA_ATTRIBUTES = Symbol(\"MEDIA_ATTRIBUTES\");\nconst mediaAttributes = [\n    \"autoPlay\",\n    \"canAirPlay\",\n    \"canFullscreen\",\n    \"canGoogleCast\",\n    \"canLoad\",\n    \"canLoadPoster\",\n    \"canPictureInPicture\",\n    \"canPlay\",\n    \"canSeek\",\n    \"ended\",\n    \"fullscreen\",\n    \"isAirPlayConnected\",\n    \"isGoogleCastConnected\",\n    \"live\",\n    \"liveEdge\",\n    \"loop\",\n    \"mediaType\",\n    \"muted\",\n    \"paused\",\n    \"pictureInPicture\",\n    \"playing\",\n    \"playsInline\",\n    \"remotePlaybackState\",\n    \"remotePlaybackType\",\n    \"seeking\",\n    \"started\",\n    \"streamType\",\n    \"viewType\",\n    \"waiting\"\n];\nconst mediaPlayerProps = {\n    artist: \"\",\n    artwork: null,\n    autoplay: false,\n    autoPlay: false,\n    clipStartTime: 0,\n    clipEndTime: 0,\n    controls: false,\n    currentTime: 0,\n    crossorigin: null,\n    crossOrigin: null,\n    duration: -1,\n    fullscreenOrientation: \"landscape\",\n    googleCast: {},\n    load: \"visible\",\n    posterLoad: \"visible\",\n    logLevel: \"warn\",\n    loop: false,\n    muted: false,\n    paused: true,\n    playsinline: false,\n    playsInline: false,\n    playbackRate: 1,\n    poster: \"\",\n    preload: \"metadata\",\n    preferNativeHLS: false,\n    src: \"\",\n    title: \"\",\n    controlsDelay: 2e3,\n    hideControlsOnMouseLeave: false,\n    viewType: \"unknown\",\n    streamType: \"unknown\",\n    volume: 1,\n    liveEdgeTolerance: 10,\n    minLiveDVRWindow: 60,\n    keyDisabled: false,\n    keyTarget: \"player\",\n    keyShortcuts: MEDIA_KEY_SHORTCUTS,\n    storage: null\n};\nconst MEDIA_EVENTS = [\n    \"abort\",\n    \"can-play\",\n    \"can-play-through\",\n    \"duration-change\",\n    \"emptied\",\n    \"ended\",\n    \"error\",\n    \"fullscreen-change\",\n    \"loaded-data\",\n    \"loaded-metadata\",\n    \"load-start\",\n    \"media-type-change\",\n    \"pause\",\n    \"play\",\n    \"playing\",\n    \"progress\",\n    \"seeked\",\n    \"seeking\",\n    \"source-change\",\n    \"sources-change\",\n    \"stalled\",\n    \"started\",\n    \"suspend\",\n    \"stream-type-change\",\n    \"replay\",\n    // time-change,\n    // 'time-update',\n    \"view-type-change\",\n    \"volume-change\",\n    \"waiting\"\n];\nclass MediaEventsLogger extends MediaPlayerController {\n    #media;\n    constructor(media){\n        super();\n        this.#media = media;\n    }\n    onConnect(el) {\n        const events = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(el), handler = this.#onMediaEvent.bind(this);\n        for (const eventType of MEDIA_EVENTS){\n            events.add(eventType, handler);\n        }\n    }\n    #onMediaEvent(event1) {\n        this.#media.logger?.debugGroup(`\\u{1F4E1} dispatching \\`${event1.type}\\``).labelledLog(\"Media Store\", {\n            ...this.$state\n        }).labelledLog(\"Event\", event1).dispatch();\n    }\n}\nclass MediaLoadController extends MediaPlayerController {\n    #type;\n    #callback;\n    constructor(type, callback){\n        super();\n        this.#type = type;\n        this.#callback = callback;\n    }\n    async onAttach(el) {\n        if (IS_SERVER) return;\n        const load = this.$props[this.#type]();\n        if (load === \"eager\") {\n            requestAnimationFrame(this.#callback);\n        } else if (load === \"idle\") {\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.waitIdlePeriod)(this.#callback);\n        } else if (load === \"visible\") {\n            let dispose, observer = new IntersectionObserver((entries)=>{\n                if (!this.scope) return;\n                if (entries[0].isIntersecting) {\n                    dispose?.();\n                    dispose = void 0;\n                    this.#callback();\n                }\n            });\n            observer.observe(el);\n            dispose = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>observer.disconnect());\n        }\n    }\n}\nlet seenAutoplayWarning = false;\nclass MediaPlayerDelegate {\n    #handle;\n    #media;\n    constructor(handle, media){\n        this.#handle = handle;\n        this.#media = media;\n    }\n    notify(type, ...init) {\n        if (IS_SERVER) return;\n        this.#handle(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(type, {\n            detail: init?.[0],\n            trigger: init?.[1]\n        }));\n    }\n    async ready(info, trigger) {\n        if (IS_SERVER) return;\n        return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.untrack)(async ()=>{\n            const { logger } = this.#media, { autoPlay, canPlay, started, duration, seekable, buffered, remotePlaybackInfo, playsInline, savedState, source } = this.#media.$state;\n            if (canPlay()) return;\n            const detail = {\n                duration: info?.duration ?? duration(),\n                seekable: info?.seekable ?? seekable(),\n                buffered: info?.buffered ?? buffered(),\n                provider: this.#media.$provider()\n            };\n            this.notify(\"can-play\", detail, trigger);\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.tick)();\n            {\n                logger?.infoGroup(\"-~-~-~-~-~-~- \\u2705 MEDIA READY -~-~-~-~-~-~-\").labelledLog(\"Media\", this.#media).labelledLog(\"Trigger Event\", trigger).dispatch();\n            }\n            let provider = this.#media.$provider(), { storage, qualities } = this.#media, { muted, volume, clipStartTime, playbackRate } = this.#media.$props;\n            await storage?.onLoad?.(source());\n            const savedPlaybackTime = savedState()?.currentTime, savedPausedState = savedState()?.paused, storageTime = await storage?.getTime(), startTime = savedPlaybackTime ?? storageTime ?? clipStartTime(), shouldAutoPlay = savedPausedState === false || savedPausedState !== true && !started() && autoPlay();\n            if (provider) {\n                provider.setVolume(await storage?.getVolume() ?? volume());\n                provider.setMuted(muted() || !!await storage?.getMuted());\n                const audioGain = await storage?.getAudioGain() ?? 1;\n                if (audioGain > 1) provider.audioGain?.setGain?.(audioGain);\n                provider.setPlaybackRate?.(await storage?.getPlaybackRate() ?? playbackRate());\n                provider.setPlaysInline?.(playsInline());\n                if (startTime > 0) provider.setCurrentTime(startTime);\n            }\n            const prefQuality = await storage?.getVideoQuality();\n            if (prefQuality && qualities.length) {\n                let currentQuality = null, currentScore = Infinity;\n                for (const quality of qualities){\n                    const score = Math.abs(prefQuality.width - quality.width) + Math.abs(prefQuality.height - quality.height) + (prefQuality.bitrate ? Math.abs(prefQuality.bitrate - (quality.bitrate ?? 0)) : 0);\n                    if (score < currentScore) {\n                        currentQuality = quality;\n                        currentScore = score;\n                    }\n                }\n                if (currentQuality) currentQuality.selected = true;\n            }\n            if (canPlay() && shouldAutoPlay) {\n                await this.#attemptAutoplay(trigger);\n            } else if (storageTime && storageTime > 0) {\n                this.notify(\"started\", void 0, trigger);\n            }\n            remotePlaybackInfo.set(null);\n        });\n    }\n    async #attemptAutoplay(trigger) {\n        const { player, $state: { autoPlaying, muted } } = this.#media;\n        autoPlaying.set(true);\n        const attemptEvent = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"auto-play-attempt\", {\n            trigger\n        });\n        try {\n            await player.play(attemptEvent);\n        } catch (error) {\n            if (!seenAutoplayWarning) {\n                const muteMsg = !muted() ? \" Attempting with volume muted will most likely resolve the issue.\" : \"\";\n                this.#media.logger?.errorGroup(\"[vidstack] auto-play request failed\").labelledLog(\"Message\", `Autoplay was requested but failed most likely due to browser autoplay policies or accessibility reasons.${muteMsg}`).labelledLog(\"Trigger Event\", trigger).labelledLog(\"Error\", error).labelledLog(\"See\", \"https://developer.chrome.com/blog/autoplay\").dispatch();\n                seenAutoplayWarning = true;\n            }\n        }\n    }\n}\nclass Queue {\n    #queue;\n    /**\n   * Queue the given `item` under the given `key` to be processed at a later time by calling\n   * `serve(key)`.\n   */ enqueue(key, item) {\n        this.#queue.set(key, item);\n    }\n    /**\n   * Process item in queue for the given `key`.\n   */ serve(key) {\n        const value = this.peek(key);\n        this.#queue.delete(key);\n        return value;\n    }\n    /**\n   * Peek at item in queue for the given `key`.\n   */ peek(key) {\n        return this.#queue.get(key);\n    }\n    /**\n   * Removes queued item under the given `key`.\n   */ delete(key) {\n        this.#queue.delete(key);\n    }\n    /**\n   * Clear all items in the queue.\n   */ clear() {\n        this.#queue.clear();\n    }\n    constructor(){\n        this.#queue = /* @__PURE__ */ new Map();\n    }\n}\nclass RequestQueue {\n    #serving;\n    #pending;\n    #queue;\n    /**\n   * The number of callbacks that are currently in queue.\n   */ get size() {\n        return this.#queue.size;\n    }\n    /**\n   * Whether items in the queue are being served immediately, otherwise they're queued to\n   * be processed later.\n   */ get isServing() {\n        return this.#serving;\n    }\n    /**\n   * Waits for the queue to be flushed (ie: start serving).\n   */ async waitForFlush() {\n        if (this.#serving) return;\n        await this.#pending.promise;\n    }\n    /**\n   * Queue the given `callback` to be invoked at a later time by either calling the `serve()` or\n   * `start()` methods. If the queue has started serving (i.e., `start()` was already called),\n   * then the callback will be invoked immediately.\n   *\n   * @param key - Uniquely identifies this callback so duplicates are ignored.\n   * @param callback - The function to call when this item in the queue is being served.\n   */ enqueue(key, callback) {\n        if (this.#serving) {\n            callback();\n            return;\n        }\n        this.#queue.delete(key);\n        this.#queue.set(key, callback);\n    }\n    /**\n   * Invokes the callback with the given `key` in the queue (if it exists).\n   */ serve(key) {\n        this.#queue.get(key)?.();\n        this.#queue.delete(key);\n    }\n    /**\n   * Flush all queued items and start serving future requests immediately until `stop()` is called.\n   */ start() {\n        this.#flush();\n        this.#serving = true;\n        if (this.#queue.size > 0) this.#flush();\n    }\n    /**\n   * Stop serving requests, they'll be queued until you begin processing again by calling `start()`.\n   */ stop() {\n        this.#serving = false;\n    }\n    /**\n   * Stop serving requests, empty the request queue, and release any promises waiting for the\n   * queue to flush.\n   */ reset() {\n        this.stop();\n        this.#queue.clear();\n        this.#release();\n    }\n    #flush() {\n        for (const key of this.#queue.keys())this.serve(key);\n        this.#release();\n    }\n    #release() {\n        this.#pending.resolve();\n        this.#pending = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.deferredPromise)();\n    }\n    constructor(){\n        this.#serving = false;\n        this.#pending = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.deferredPromise)();\n        this.#queue = /* @__PURE__ */ new Map();\n    }\n}\nfunction ariaBool(value) {\n    return value ? \"true\" : \"false\";\n}\nfunction $ariaBool(signal) {\n    return ()=>ariaBool(signal());\n}\nfunction prefersReducedMotion() {\n    if (true) return false;\n    return window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches;\n}\nclass MediaRequestManager extends MediaPlayerController {\n    #stateMgr;\n    #request;\n    #media;\n    #fullscreen;\n    #orientation;\n    #$provider;\n    #providerQueue;\n    constructor(stateMgr, request, media){\n        super(), this.#providerQueue = new RequestQueue(), this.#wasPIPActive = false;\n        this.#stateMgr = stateMgr;\n        this.#request = request;\n        this.#media = media;\n        this.#$provider = media.$provider;\n        this.controls = new MediaControls();\n        this.#fullscreen = new FullscreenController();\n        this.#orientation = new ScreenOrientationController();\n    }\n    onAttach() {\n        this.listen(\"fullscreen-change\", this.#onFullscreenChange.bind(this));\n    }\n    onConnect(el) {\n        const names = Object.getOwnPropertyNames(Object.getPrototypeOf(this)), events = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(el), handleRequest = this.#handleRequest.bind(this);\n        for (const name of names){\n            if (name.startsWith(\"media-\")) {\n                events.add(name, handleRequest);\n            }\n        }\n        this.#attachLoadPlayListener();\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchProvider.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchControlsDelayChange.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchAudioGainSupport.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchAirPlaySupport.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchGoogleCastSupport.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchFullscreenSupport.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchPiPSupport.bind(this));\n    }\n    onDestroy() {\n        try {\n            const destroyEvent = this.createEvent(\"destroy\"), { pictureInPicture, fullscreen } = this.$state;\n            if (fullscreen()) this.exitFullscreen(\"prefer-media\", destroyEvent);\n            if (pictureInPicture()) this.exitPictureInPicture(destroyEvent);\n        } catch (e) {}\n        this.#providerQueue.reset();\n    }\n    #attachLoadPlayListener() {\n        const { load } = this.$props, { canLoad } = this.$state;\n        if (load() !== \"play\" || canLoad()) return;\n        const off = this.listen(\"media-play-request\", (event1)=>{\n            this.#handleLoadPlayStrategy(event1);\n            off();\n        });\n    }\n    #watchProvider() {\n        const provider = this.#$provider(), canPlay = this.$state.canPlay();\n        if (provider && canPlay) {\n            this.#providerQueue.start();\n        }\n        return ()=>{\n            this.#providerQueue.stop();\n        };\n    }\n    #handleRequest(event1) {\n        event1.stopPropagation();\n        if (event1.defaultPrevented) return;\n        {\n            this.#media.logger?.infoGroup(`\\u{1F4EC} received \\`${event1.type}\\``).labelledLog(\"Request\", event1).dispatch();\n        }\n        if (!this[event1.type]) return;\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#$provider)) {\n            this[event1.type](event1);\n        } else {\n            this.#providerQueue.enqueue(event1.type, ()=>{\n                if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#$provider)) this[event1.type](event1);\n            });\n        }\n    }\n    async play(trigger) {\n        if (IS_SERVER) return;\n        const { canPlay, paused, autoPlaying } = this.$state;\n        if (this.#handleLoadPlayStrategy(trigger)) return;\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(paused)) return;\n        if (trigger) this.#request.queue.enqueue(\"media-play-request\", trigger);\n        const isAutoPlaying = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(autoPlaying);\n        try {\n            const provider = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#$provider);\n            throwIfNotReadyForPlayback(provider, (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(canPlay));\n            throwIfAutoplayingWithReducedMotion(isAutoPlaying);\n            return await provider.play();\n        } catch (error) {\n            this.#logError(\"play request failed\", error, trigger);\n            const errorEvent = this.createEvent(\"play-fail\", {\n                detail: coerceToError(error),\n                trigger\n            });\n            errorEvent.autoPlay = isAutoPlaying;\n            this.#stateMgr.handle(errorEvent);\n            throw error;\n        }\n    }\n    #handleLoadPlayStrategy(trigger) {\n        const { load } = this.$props, { canLoad } = this.$state;\n        if (load() === \"play\" && !canLoad()) {\n            const event1 = this.createEvent(\"media-start-loading\", {\n                trigger\n            });\n            this.dispatchEvent(event1);\n            this.#providerQueue.enqueue(\"media-play-request\", async ()=>{\n                try {\n                    await this.play(event1);\n                } catch (error) {}\n            });\n            return true;\n        }\n        return false;\n    }\n    async pause(trigger) {\n        if (IS_SERVER) return;\n        const { canPlay, paused } = this.$state;\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(paused)) return;\n        if (trigger) {\n            this.#request.queue.enqueue(\"media-pause-request\", trigger);\n        }\n        try {\n            const provider = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#$provider);\n            throwIfNotReadyForPlayback(provider, (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(canPlay));\n            return await provider.pause();\n        } catch (error) {\n            this.#request.queue.delete(\"media-pause-request\");\n            {\n                this.#logError(\"pause request failed\", error, trigger);\n            }\n            throw error;\n        }\n    }\n    setAudioGain(gain, trigger) {\n        const { audioGain, canSetAudioGain } = this.$state;\n        if (audioGain() === gain) return;\n        const provider = this.#$provider();\n        if (!provider?.audioGain || !canSetAudioGain()) {\n            throw Error(\"[vidstack] audio gain api not available\");\n        }\n        if (trigger) {\n            this.#request.queue.enqueue(\"media-audio-gain-change-request\", trigger);\n        }\n        provider.audioGain.setGain(gain);\n    }\n    seekToLiveEdge(trigger) {\n        if (IS_SERVER) return;\n        const { canPlay, live, liveEdge, canSeek, liveSyncPosition, seekableEnd, userBehindLiveEdge } = this.$state;\n        userBehindLiveEdge.set(false);\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(()=>!live() || liveEdge() || !canSeek())) return;\n        const provider = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#$provider);\n        throwIfNotReadyForPlayback(provider, (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(canPlay));\n        if (trigger) this.#request.queue.enqueue(\"media-seek-request\", trigger);\n        const end = seekableEnd() - 2;\n        provider.setCurrentTime(Math.min(end, liveSyncPosition() ?? end));\n    }\n    #wasPIPActive;\n    async enterFullscreen(target = \"prefer-media\", trigger) {\n        if (IS_SERVER) return;\n        const adapter = this.#getFullscreenAdapter(target);\n        throwIfFullscreenNotSupported(target, adapter);\n        if (adapter.active) return;\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.pictureInPicture)) {\n            this.#wasPIPActive = true;\n            await this.exitPictureInPicture(trigger);\n        }\n        if (trigger) {\n            this.#request.queue.enqueue(\"media-enter-fullscreen-request\", trigger);\n        }\n        return adapter.enter();\n    }\n    async exitFullscreen(target = \"prefer-media\", trigger) {\n        if (IS_SERVER) return;\n        const adapter = this.#getFullscreenAdapter(target);\n        throwIfFullscreenNotSupported(target, adapter);\n        if (!adapter.active) return;\n        if (trigger) {\n            this.#request.queue.enqueue(\"media-exit-fullscreen-request\", trigger);\n        }\n        try {\n            const result = await adapter.exit();\n            if (this.#wasPIPActive && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.canPictureInPicture)) {\n                await this.enterPictureInPicture();\n            }\n            return result;\n        } finally{\n            this.#wasPIPActive = false;\n        }\n    }\n    #getFullscreenAdapter(target) {\n        const provider = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#$provider);\n        return target === \"prefer-media\" && this.#fullscreen.supported || target === \"media\" ? this.#fullscreen : provider?.fullscreen;\n    }\n    async enterPictureInPicture(trigger) {\n        if (IS_SERVER) return;\n        this.#throwIfPIPNotSupported();\n        if (this.$state.pictureInPicture()) return;\n        if (trigger) {\n            this.#request.queue.enqueue(\"media-enter-pip-request\", trigger);\n        }\n        return await this.#$provider().pictureInPicture.enter();\n    }\n    async exitPictureInPicture(trigger) {\n        if (IS_SERVER) return;\n        this.#throwIfPIPNotSupported();\n        if (!this.$state.pictureInPicture()) return;\n        if (trigger) {\n            this.#request.queue.enqueue(\"media-exit-pip-request\", trigger);\n        }\n        return await this.#$provider().pictureInPicture.exit();\n    }\n    #throwIfPIPNotSupported() {\n        if (this.$state.canPictureInPicture()) return;\n        throw Error(`[vidstack] picture-in-picture is not currently available`);\n    }\n    #watchControlsDelayChange() {\n        this.controls.defaultDelay = this.$props.controlsDelay();\n    }\n    #watchAudioGainSupport() {\n        const { canSetAudioGain } = this.$state, supported = !!this.#$provider()?.audioGain?.supported;\n        canSetAudioGain.set(supported);\n    }\n    #watchAirPlaySupport() {\n        const { canAirPlay } = this.$state, supported = !!this.#$provider()?.airPlay?.supported;\n        canAirPlay.set(supported);\n    }\n    #watchGoogleCastSupport() {\n        const { canGoogleCast, source } = this.$state, supported = IS_CHROME && !IS_IOS && canGoogleCastSrc(source());\n        canGoogleCast.set(supported);\n    }\n    #watchFullscreenSupport() {\n        const { canFullscreen } = this.$state, supported = this.#fullscreen.supported || !!this.#$provider()?.fullscreen?.supported;\n        canFullscreen.set(supported);\n    }\n    #watchPiPSupport() {\n        const { canPictureInPicture } = this.$state, supported = !!this.#$provider()?.pictureInPicture?.supported;\n        canPictureInPicture.set(supported);\n    }\n    async [\"media-airplay-request\"](event1) {\n        try {\n            await this.requestAirPlay(event1);\n        } catch (error) {}\n    }\n    async requestAirPlay(trigger) {\n        try {\n            const adapter = this.#$provider()?.airPlay;\n            if (!adapter?.supported) {\n                throw Error( true ? \"AirPlay adapter not available on provider.\" : 0);\n            }\n            if (trigger) {\n                this.#request.queue.enqueue(\"media-airplay-request\", trigger);\n            }\n            return await adapter.prompt();\n        } catch (error) {\n            this.#request.queue.delete(\"media-airplay-request\");\n            {\n                this.#logError(\"airplay request failed\", error, trigger);\n            }\n            throw error;\n        }\n    }\n    async [\"media-google-cast-request\"](event1) {\n        try {\n            await this.requestGoogleCast(event1);\n        } catch (error) {}\n    }\n    #googleCastLoader;\n    async requestGoogleCast(trigger) {\n        try {\n            const { canGoogleCast } = this.$state;\n            if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(canGoogleCast)) {\n                const error = Error( true ? \"Google Cast not available on this platform.\" : 0);\n                error.code = \"CAST_NOT_AVAILABLE\";\n                throw error;\n            }\n            preconnect(\"https://www.gstatic.com\");\n            if (!this.#googleCastLoader) {\n                const $module = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@vidstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./vidstack-BM-FgV9W.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-BM-FgV9W.js\")).then(function(n) {\n                    return n.loader;\n                });\n                this.#googleCastLoader = new $module.GoogleCastLoader();\n            }\n            await this.#googleCastLoader.prompt(this.#media);\n            if (trigger) {\n                this.#request.queue.enqueue(\"media-google-cast-request\", trigger);\n            }\n            const isConnecting = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.remotePlaybackState) !== \"disconnected\";\n            if (isConnecting) {\n                this.$state.savedState.set({\n                    paused: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.paused),\n                    currentTime: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.currentTime)\n                });\n            }\n            this.$state.remotePlaybackLoader.set(isConnecting ? this.#googleCastLoader : null);\n        } catch (error) {\n            this.#request.queue.delete(\"media-google-cast-request\");\n            {\n                this.#logError(\"google cast request failed\", error, trigger);\n            }\n            throw error;\n        }\n    }\n    [\"media-clip-start-change-request\"](event1) {\n        const { clipStartTime } = this.$state;\n        clipStartTime.set(event1.detail);\n    }\n    [\"media-clip-end-change-request\"](event1) {\n        const { clipEndTime } = this.$state;\n        clipEndTime.set(event1.detail);\n        this.dispatch(\"duration-change\", {\n            detail: event1.detail,\n            trigger: event1\n        });\n    }\n    [\"media-duration-change-request\"](event1) {\n        const { providedDuration, clipEndTime } = this.$state;\n        providedDuration.set(event1.detail);\n        if (clipEndTime() <= 0) {\n            this.dispatch(\"duration-change\", {\n                detail: event1.detail,\n                trigger: event1\n            });\n        }\n    }\n    [\"media-audio-track-change-request\"](event1) {\n        const { logger, audioTracks } = this.#media;\n        if (audioTracks.readonly) {\n            {\n                logger?.warnGroup(`[vidstack] attempted to change audio track but it is currently read-only`).labelledLog(\"Request Event\", event1).dispatch();\n            }\n            return;\n        }\n        const index = event1.detail, track = audioTracks[index];\n        if (track) {\n            const key = event1.type;\n            this.#request.queue.enqueue(key, event1);\n            track.selected = true;\n        } else {\n            logger?.warnGroup(\"[vidstack] failed audio track change request (invalid index)\").labelledLog(\"Audio Tracks\", audioTracks.toArray()).labelledLog(\"Index\", index).labelledLog(\"Request Event\", event1).dispatch();\n        }\n    }\n    async [\"media-enter-fullscreen-request\"](event1) {\n        try {\n            await this.enterFullscreen(event1.detail, event1);\n        } catch (error) {\n            this.#onFullscreenError(error, event1);\n        }\n    }\n    async [\"media-exit-fullscreen-request\"](event1) {\n        try {\n            await this.exitFullscreen(event1.detail, event1);\n        } catch (error) {\n            this.#onFullscreenError(error, event1);\n        }\n    }\n    async #onFullscreenChange(event1) {\n        const lockType = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$props.fullscreenOrientation), isFullscreen = event1.detail;\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(lockType) || lockType === \"none\" || !this.#orientation.supported) return;\n        if (isFullscreen) {\n            if (this.#orientation.locked) return;\n            this.dispatch(\"media-orientation-lock-request\", {\n                detail: lockType,\n                trigger: event1\n            });\n        } else if (this.#orientation.locked) {\n            this.dispatch(\"media-orientation-unlock-request\", {\n                trigger: event1\n            });\n        }\n    }\n    #onFullscreenError(error, request) {\n        {\n            this.#logError(\"fullscreen request failed\", error, request);\n        }\n        this.#stateMgr.handle(this.createEvent(\"fullscreen-error\", {\n            detail: coerceToError(error)\n        }));\n    }\n    async [\"media-orientation-lock-request\"](event1) {\n        const key = event1.type;\n        try {\n            this.#request.queue.enqueue(key, event1);\n            await this.#orientation.lock(event1.detail);\n        } catch (error) {\n            this.#request.queue.delete(key);\n            {\n                this.#logError(\"failed to lock screen orientation\", error, event1);\n            }\n        }\n    }\n    async [\"media-orientation-unlock-request\"](event1) {\n        const key = event1.type;\n        try {\n            this.#request.queue.enqueue(key, event1);\n            await this.#orientation.unlock();\n        } catch (error) {\n            this.#request.queue.delete(key);\n            {\n                this.#logError(\"failed to unlock screen orientation\", error, event1);\n            }\n        }\n    }\n    async [\"media-enter-pip-request\"](event1) {\n        try {\n            await this.enterPictureInPicture(event1);\n        } catch (error) {\n            this.#onPictureInPictureError(error, event1);\n        }\n    }\n    async [\"media-exit-pip-request\"](event1) {\n        try {\n            await this.exitPictureInPicture(event1);\n        } catch (error) {\n            this.#onPictureInPictureError(error, event1);\n        }\n    }\n    #onPictureInPictureError(error, request) {\n        {\n            this.#logError(\"pip request failed\", error, request);\n        }\n        this.#stateMgr.handle(this.createEvent(\"picture-in-picture-error\", {\n            detail: coerceToError(error)\n        }));\n    }\n    [\"media-live-edge-request\"](event1) {\n        const { live, liveEdge, canSeek } = this.$state;\n        if (!live() || liveEdge() || !canSeek()) return;\n        this.#request.queue.enqueue(\"media-seek-request\", event1);\n        try {\n            this.seekToLiveEdge();\n        } catch (error) {\n            this.#request.queue.delete(\"media-seek-request\");\n            {\n                this.#logError(\"seek to live edge fail\", error, event1);\n            }\n        }\n    }\n    async [\"media-loop-request\"](event1) {\n        try {\n            this.#request.looping = true;\n            this.#request.replaying = true;\n            await this.play(event1);\n        } catch (error) {\n            this.#request.looping = false;\n        }\n    }\n    [\"media-user-loop-change-request\"](event1) {\n        this.$state.userPrefersLoop.set(event1.detail);\n    }\n    async [\"media-pause-request\"](event1) {\n        if (this.$state.paused()) return;\n        try {\n            await this.pause(event1);\n        } catch (error) {}\n    }\n    async [\"media-play-request\"](event1) {\n        if (!this.$state.paused()) return;\n        try {\n            await this.play(event1);\n        } catch (e) {}\n    }\n    [\"media-rate-change-request\"](event1) {\n        const { playbackRate, canSetPlaybackRate } = this.$state;\n        if (playbackRate() === event1.detail || !canSetPlaybackRate()) return;\n        const provider = this.#$provider();\n        if (!provider?.setPlaybackRate) return;\n        this.#request.queue.enqueue(\"media-rate-change-request\", event1);\n        provider.setPlaybackRate(event1.detail);\n    }\n    [\"media-audio-gain-change-request\"](event1) {\n        try {\n            this.setAudioGain(event1.detail, event1);\n        } catch (e) {}\n    }\n    [\"media-quality-change-request\"](event1) {\n        const { qualities, storage, logger } = this.#media;\n        if (qualities.readonly) {\n            {\n                logger?.warnGroup(`[vidstack] attempted to change video quality but it is currently read-only`).labelledLog(\"Request Event\", event1).dispatch();\n            }\n            return;\n        }\n        this.#request.queue.enqueue(\"media-quality-change-request\", event1);\n        const index = event1.detail;\n        if (index < 0) {\n            qualities.autoSelect(event1);\n            if (event1.isOriginTrusted) storage?.setVideoQuality?.(null);\n        } else {\n            const quality = qualities[index];\n            if (quality) {\n                quality.selected = true;\n                if (event1.isOriginTrusted) {\n                    storage?.setVideoQuality?.({\n                        id: quality.id,\n                        width: quality.width,\n                        height: quality.height,\n                        bitrate: quality.bitrate\n                    });\n                }\n            } else {\n                logger?.warnGroup(\"[vidstack] failed quality change request (invalid index)\").labelledLog(\"Qualities\", qualities.toArray()).labelledLog(\"Index\", index).labelledLog(\"Request Event\", event1).dispatch();\n            }\n        }\n    }\n    [\"media-pause-controls-request\"](event1) {\n        const key = event1.type;\n        this.#request.queue.enqueue(key, event1);\n        this.controls.pause(event1);\n    }\n    [\"media-resume-controls-request\"](event1) {\n        const key = event1.type;\n        this.#request.queue.enqueue(key, event1);\n        this.controls.resume(event1);\n    }\n    [\"media-seek-request\"](event1) {\n        const { canSeek, ended, live, seekableEnd, userBehindLiveEdge } = this.$state, seekTime = event1.detail;\n        if (ended()) this.#request.replaying = true;\n        const key = event1.type;\n        this.#request.seeking = false;\n        this.#request.queue.delete(key);\n        const boundedTime = boundTime(seekTime, this.$state);\n        if (!Number.isFinite(boundedTime) || !canSeek()) return;\n        this.#request.queue.enqueue(key, event1);\n        this.#$provider().setCurrentTime(boundedTime);\n        if (live() && event1.isOriginTrusted && Math.abs(seekableEnd() - boundedTime) >= 2) {\n            userBehindLiveEdge.set(true);\n        }\n    }\n    [\"media-seeking-request\"](event1) {\n        const key = event1.type;\n        this.#request.queue.enqueue(key, event1);\n        this.$state.seeking.set(true);\n        this.#request.seeking = true;\n    }\n    [\"media-start-loading\"](event1) {\n        if (this.$state.canLoad()) return;\n        const key = event1.type;\n        this.#request.queue.enqueue(key, event1);\n        this.#stateMgr.handle(this.createEvent(\"can-load\"));\n    }\n    [\"media-poster-start-loading\"](event1) {\n        if (this.$state.canLoadPoster()) return;\n        const key = event1.type;\n        this.#request.queue.enqueue(key, event1);\n        this.#stateMgr.handle(this.createEvent(\"can-load-poster\"));\n    }\n    [\"media-text-track-change-request\"](event1) {\n        const { index, mode } = event1.detail, track = this.#media.textTracks[index];\n        if (track) {\n            const key = event1.type;\n            this.#request.queue.enqueue(key, event1);\n            track.setMode(mode, event1);\n        } else {\n            this.#media.logger?.warnGroup(\"[vidstack] failed text track change request (invalid index)\").labelledLog(\"Text Tracks\", this.#media.textTracks.toArray()).labelledLog(\"Index\", index).labelledLog(\"Request Event\", event1).dispatch();\n        }\n    }\n    [\"media-mute-request\"](event1) {\n        if (this.$state.muted()) return;\n        const key = event1.type;\n        this.#request.queue.enqueue(key, event1);\n        this.#$provider().setMuted(true);\n    }\n    [\"media-unmute-request\"](event1) {\n        const { muted, volume } = this.$state;\n        if (!muted()) return;\n        const key = event1.type;\n        this.#request.queue.enqueue(key, event1);\n        this.#media.$provider().setMuted(false);\n        if (volume() === 0) {\n            this.#request.queue.enqueue(key, event1);\n            this.#$provider().setVolume(0.25);\n        }\n    }\n    [\"media-volume-change-request\"](event1) {\n        const { muted, volume } = this.$state;\n        const newVolume = event1.detail;\n        if (volume() === newVolume) return;\n        const key = event1.type;\n        this.#request.queue.enqueue(key, event1);\n        this.#$provider().setVolume(newVolume);\n        if (newVolume > 0 && muted()) {\n            this.#request.queue.enqueue(key, event1);\n            this.#$provider().setMuted(false);\n        }\n    }\n    #logError(title, error, request) {\n        this.#media.logger?.errorGroup(`[vidstack] ${title}`).labelledLog(\"Error\", error).labelledLog(\"Media Context\", {\n            ...this.#media\n        }).labelledLog(\"Trigger Event\", request).dispatch();\n    }\n}\nfunction throwIfNotReadyForPlayback(provider, canPlay) {\n    if (provider && canPlay) return;\n    throw Error(`[vidstack] media is not ready - wait for \\`can-play\\` event.`);\n}\nfunction throwIfFullscreenNotSupported(target, fullscreen) {\n    if (fullscreen?.supported) return;\n    throw Error(`[vidstack] fullscreen is not currently available on target \\`${target}\\``);\n}\nfunction throwIfAutoplayingWithReducedMotion(autoplaying) {\n    if (!prefersReducedMotion() || !autoplaying) return;\n    throw Error(\"[vidstack] autoplay is blocked due to user preference for reduced motion\");\n}\nclass MediaRequestContext {\n    constructor(){\n        this.seeking = false;\n        this.looping = false;\n        this.replaying = false;\n        this.queue = new Queue();\n    }\n}\nconst TRACKED_EVENT = /* @__PURE__ */ new Set([\n    \"auto-play\",\n    \"auto-play-fail\",\n    \"can-load\",\n    \"sources-change\",\n    \"source-change\",\n    \"load-start\",\n    \"abort\",\n    \"error\",\n    \"loaded-metadata\",\n    \"loaded-data\",\n    \"can-play\",\n    \"play\",\n    \"play-fail\",\n    \"pause\",\n    \"playing\",\n    \"seeking\",\n    \"seeked\",\n    \"waiting\"\n]);\nclass MediaStateManager extends MediaPlayerController {\n    #request;\n    #media;\n    #trackedEvents;\n    #clipEnded;\n    #playedIntervals;\n    #playedInterval;\n    #firingWaiting;\n    #waitingTrigger;\n    constructor(request, media){\n        super(), this.#trackedEvents = /* @__PURE__ */ new Map(), this.#clipEnded = false, this.#playedIntervals = [], this.#playedInterval = [\n            -1,\n            -1\n        ], this.#firingWaiting = false, this.#isPlayingOnDisconnect = false, this.#stopQualityResizeEffect = null, this[\"seeking\"] = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.functionThrottle)((event1)=>{\n            const { seeking, realCurrentTime, paused } = this.$state;\n            seeking.set(true);\n            realCurrentTime.set(event1.detail);\n            this.#satisfyRequest(\"media-seeking-request\", event1);\n            if (paused()) {\n                this.#waitingTrigger = event1;\n                this.#fireWaiting();\n            }\n            this.#playedInterval = [\n                -1,\n                -1\n            ];\n        }, 150, {\n            leading: true\n        }), this.#fireWaiting = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.functionDebounce)(()=>{\n            if (!this.#waitingTrigger) return;\n            this.#firingWaiting = true;\n            const { waiting, playing } = this.$state;\n            waiting.set(true);\n            playing.set(false);\n            const event1 = this.createEvent(\"waiting\", {\n                trigger: this.#waitingTrigger\n            });\n            this.#trackedEvents.set(\"waiting\", event1);\n            this.dispatch(event1);\n            this.#waitingTrigger = void 0;\n            this.#firingWaiting = false;\n        }, 300);\n        this.#request = request;\n        this.#media = media;\n    }\n    onAttach(el) {\n        el.setAttribute(\"aria-busy\", \"true\");\n        new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(this).add(\"fullscreen-change\", this[\"fullscreen-change\"].bind(this)).add(\"fullscreen-error\", this[\"fullscreen-error\"].bind(this)).add(\"orientation-change\", this[\"orientation-change\"].bind(this));\n    }\n    onConnect(el) {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchCanSetVolume.bind(this));\n        this.#addTextTrackListeners();\n        this.#addQualityListeners();\n        this.#addAudioTrackListeners();\n        this.#resumePlaybackOnConnect();\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this.#pausePlaybackOnDisconnect.bind(this));\n    }\n    onDestroy() {\n        const { audioTracks, qualities, textTracks } = this.#media;\n        audioTracks[ListSymbol.reset]();\n        qualities[ListSymbol.reset]();\n        textTracks[ListSymbol.reset]();\n        this.#stopWatchingQualityResize();\n    }\n    handle(event1) {\n        if (!this.scope) return;\n        const type = event1.type;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.untrack)(()=>this[event1.type]?.(event1));\n        if (!IS_SERVER) {\n            if (TRACKED_EVENT.has(type)) this.#trackedEvents.set(type, event1);\n            this.dispatch(event1);\n        }\n    }\n    #isPlayingOnDisconnect;\n    #resumePlaybackOnConnect() {\n        if (!this.#isPlayingOnDisconnect) return;\n        requestAnimationFrame(()=>{\n            if (!this.scope) return;\n            this.#media.remote.play(new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"dom-connect\"));\n        });\n        this.#isPlayingOnDisconnect = false;\n    }\n    #pausePlaybackOnDisconnect() {\n        if (this.#isPlayingOnDisconnect) return;\n        this.#isPlayingOnDisconnect = !this.$state.paused();\n        this.#media.$provider()?.pause();\n    }\n    #resetTracking() {\n        this.#stopWaiting();\n        this.#clipEnded = false;\n        this.#request.replaying = false;\n        this.#request.looping = false;\n        this.#firingWaiting = false;\n        this.#waitingTrigger = void 0;\n        this.#trackedEvents.clear();\n    }\n    #satisfyRequest(request, event1) {\n        const requestEvent = this.#request.queue.serve(request);\n        if (!requestEvent) return;\n        event1.request = requestEvent;\n        event1.triggers.add(requestEvent);\n    }\n    #addTextTrackListeners() {\n        this.#onTextTracksChange();\n        this.#onTextTrackModeChange();\n        const textTracks = this.#media.textTracks;\n        new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(textTracks).add(\"add\", this.#onTextTracksChange.bind(this)).add(\"remove\", this.#onTextTracksChange.bind(this)).add(\"mode-change\", this.#onTextTrackModeChange.bind(this));\n    }\n    #addQualityListeners() {\n        const qualities = this.#media.qualities;\n        new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(qualities).add(\"add\", this.#onQualitiesChange.bind(this)).add(\"remove\", this.#onQualitiesChange.bind(this)).add(\"change\", this.#onQualityChange.bind(this)).add(\"auto-change\", this.#onAutoQualityChange.bind(this)).add(\"readonly-change\", this.#onCanSetQualityChange.bind(this));\n    }\n    #addAudioTrackListeners() {\n        const audioTracks = this.#media.audioTracks;\n        new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(audioTracks).add(\"add\", this.#onAudioTracksChange.bind(this)).add(\"remove\", this.#onAudioTracksChange.bind(this)).add(\"change\", this.#onAudioTrackChange.bind(this));\n    }\n    #onTextTracksChange(event1) {\n        const { textTracks } = this.$state;\n        textTracks.set(this.#media.textTracks.toArray());\n        this.dispatch(\"text-tracks-change\", {\n            detail: textTracks(),\n            trigger: event1\n        });\n    }\n    #onTextTrackModeChange(event1) {\n        if (event1) this.#satisfyRequest(\"media-text-track-change-request\", event1);\n        const current = this.#media.textTracks.selected, { textTrack } = this.$state;\n        if (textTrack() !== current) {\n            textTrack.set(current);\n            this.dispatch(\"text-track-change\", {\n                detail: current,\n                trigger: event1\n            });\n        }\n    }\n    #onAudioTracksChange(event1) {\n        const { audioTracks } = this.$state;\n        audioTracks.set(this.#media.audioTracks.toArray());\n        this.dispatch(\"audio-tracks-change\", {\n            detail: audioTracks(),\n            trigger: event1\n        });\n    }\n    #onAudioTrackChange(event1) {\n        const { audioTrack } = this.$state;\n        audioTrack.set(this.#media.audioTracks.selected);\n        if (event1) this.#satisfyRequest(\"media-audio-track-change-request\", event1);\n        this.dispatch(\"audio-track-change\", {\n            detail: audioTrack(),\n            trigger: event1\n        });\n    }\n    #onQualitiesChange(event1) {\n        const { qualities } = this.$state;\n        qualities.set(this.#media.qualities.toArray());\n        this.dispatch(\"qualities-change\", {\n            detail: qualities(),\n            trigger: event1\n        });\n    }\n    #onQualityChange(event1) {\n        const { quality } = this.$state;\n        quality.set(this.#media.qualities.selected);\n        if (event1) this.#satisfyRequest(\"media-quality-change-request\", event1);\n        this.dispatch(\"quality-change\", {\n            detail: quality(),\n            trigger: event1\n        });\n    }\n    #onAutoQualityChange() {\n        const { qualities } = this.#media, isAuto = qualities.auto;\n        this.$state.autoQuality.set(isAuto);\n        if (!isAuto) this.#stopWatchingQualityResize();\n    }\n    #stopQualityResizeEffect;\n    #watchQualityResize() {\n        this.#stopWatchingQualityResize();\n        this.#stopQualityResizeEffect = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            const { qualities } = this.#media, { mediaWidth, mediaHeight } = this.$state, w = mediaWidth(), h = mediaHeight();\n            if (w === 0 || h === 0) return;\n            let selectedQuality = null, minScore = Infinity;\n            for (const quality of qualities){\n                const score = Math.abs(quality.width - w) + Math.abs(quality.height - h);\n                if (score < minScore) {\n                    minScore = score;\n                    selectedQuality = quality;\n                }\n            }\n            if (selectedQuality) {\n                qualities[ListSymbol.select](selectedQuality, true, new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"resize\", {\n                    detail: {\n                        width: w,\n                        height: h\n                    }\n                }));\n            }\n        });\n    }\n    #stopWatchingQualityResize() {\n        this.#stopQualityResizeEffect?.();\n        this.#stopQualityResizeEffect = null;\n    }\n    #onCanSetQualityChange() {\n        this.$state.canSetQuality.set(!this.#media.qualities.readonly);\n    }\n    #watchCanSetVolume() {\n        const { canSetVolume, isGoogleCastConnected } = this.$state;\n        if (isGoogleCastConnected()) {\n            canSetVolume.set(false);\n            return;\n        }\n        canChangeVolume().then(canSetVolume.set);\n    }\n    [\"provider-change\"](event1) {\n        const prevProvider = this.#media.$provider(), newProvider = event1.detail;\n        if (prevProvider?.type === newProvider?.type) return;\n        prevProvider?.destroy?.();\n        prevProvider?.scope?.dispose();\n        this.#media.$provider.set(event1.detail);\n        if (prevProvider && event1.detail === null) {\n            this.#resetMediaState(event1);\n        }\n    }\n    [\"provider-loader-change\"](event1) {\n        {\n            this.#media.logger?.infoGroup(`Loader change \\`${event1.detail?.constructor.name}\\``).labelledLog(\"Event\", event1).dispatch();\n        }\n    }\n    [\"auto-play\"](event1) {\n        this.$state.autoPlayError.set(null);\n    }\n    [\"auto-play-fail\"](event1) {\n        this.$state.autoPlayError.set(event1.detail);\n        this.#resetTracking();\n    }\n    [\"can-load\"](event1) {\n        this.$state.canLoad.set(true);\n        this.#trackedEvents.set(\"can-load\", event1);\n        this.#media.textTracks[TextTrackSymbol.canLoad]();\n        this.#satisfyRequest(\"media-start-loading\", event1);\n    }\n    [\"can-load-poster\"](event1) {\n        this.$state.canLoadPoster.set(true);\n        this.#trackedEvents.set(\"can-load-poster\", event1);\n        this.#satisfyRequest(\"media-poster-start-loading\", event1);\n    }\n    [\"media-type-change\"](event1) {\n        const sourceChangeEvent = this.#trackedEvents.get(\"source-change\");\n        if (sourceChangeEvent) event1.triggers.add(sourceChangeEvent);\n        const viewType = this.$state.viewType();\n        this.$state.mediaType.set(event1.detail);\n        const providedViewType = this.$state.providedViewType(), currentViewType = providedViewType === \"unknown\" ? event1.detail : providedViewType;\n        if (viewType !== currentViewType) {\n            if (IS_SERVER) {\n                this.$state.inferredViewType.set(currentViewType);\n            } else {\n                setTimeout(()=>{\n                    requestAnimationFrame(()=>{\n                        if (!this.scope) return;\n                        this.$state.inferredViewType.set(event1.detail);\n                        this.dispatch(\"view-type-change\", {\n                            detail: currentViewType,\n                            trigger: event1\n                        });\n                    });\n                }, 0);\n            }\n        }\n    }\n    [\"stream-type-change\"](event1) {\n        const sourceChangeEvent = this.#trackedEvents.get(\"source-change\");\n        if (sourceChangeEvent) event1.triggers.add(sourceChangeEvent);\n        const { streamType, inferredStreamType } = this.$state;\n        inferredStreamType.set(event1.detail);\n        event1.detail = streamType();\n    }\n    [\"rate-change\"](event1) {\n        const { storage } = this.#media, { canPlay } = this.$state;\n        this.$state.playbackRate.set(event1.detail);\n        this.#satisfyRequest(\"media-rate-change-request\", event1);\n        if (canPlay()) {\n            storage?.setPlaybackRate?.(event1.detail);\n        }\n    }\n    [\"remote-playback-change\"](event1) {\n        const { remotePlaybackState, remotePlaybackType } = this.$state, { type, state } = event1.detail, isConnected = state === \"connected\";\n        remotePlaybackType.set(type);\n        remotePlaybackState.set(state);\n        const key = type === \"airplay\" ? \"media-airplay-request\" : \"media-google-cast-request\";\n        if (isConnected) {\n            this.#satisfyRequest(key, event1);\n        } else {\n            const requestEvent = this.#request.queue.peek(key);\n            if (requestEvent) {\n                event1.request = requestEvent;\n                event1.triggers.add(requestEvent);\n            }\n        }\n    }\n    [\"sources-change\"](event1) {\n        const prevSources = this.$state.sources(), newSources = event1.detail;\n        this.$state.sources.set(newSources);\n        this.#onSourceQualitiesChange(prevSources, newSources, event1);\n    }\n    #onSourceQualitiesChange(prevSources, newSources, trigger) {\n        let { qualities } = this.#media, added = false, removed = false;\n        for (const prevSrc of prevSources){\n            if (!isVideoQualitySrc(prevSrc)) continue;\n            const exists = newSources.some((s)=>s.src === prevSrc.src);\n            if (!exists) {\n                const quality = qualities.getBySrc(prevSrc.src);\n                if (quality) {\n                    qualities[ListSymbol.remove](quality, trigger);\n                    removed = true;\n                }\n            }\n        }\n        if (removed && !qualities.length) {\n            this.$state.savedState.set(null);\n            qualities[ListSymbol.reset](trigger);\n        }\n        for (const src of newSources){\n            if (!isVideoQualitySrc(src) || qualities.getBySrc(src.src)) continue;\n            const quality = {\n                id: src.id ?? src.height + \"p\",\n                bitrate: null,\n                codec: null,\n                ...src,\n                selected: false\n            };\n            qualities[ListSymbol.add](quality, trigger);\n            added = true;\n        }\n        if (added && !qualities[QualitySymbol.enableAuto]) {\n            this.#watchQualityResize();\n            qualities[QualitySymbol.enableAuto] = this.#watchQualityResize.bind(this);\n            qualities[QualitySymbol.setAuto](true, trigger);\n        }\n    }\n    [\"source-change\"](event1) {\n        event1.isQualityChange = event1.originEvent?.type === \"quality-change\";\n        const source = event1.detail;\n        this.#resetMediaState(event1, event1.isQualityChange);\n        this.#trackedEvents.set(event1.type, event1);\n        this.$state.source.set(source);\n        this.el?.setAttribute(\"aria-busy\", \"true\");\n        {\n            this.#media.logger?.infoGroup(\"\\uD83D\\uDCFC Media source change\").labelledLog(\"Source\", source).dispatch();\n        }\n    }\n    #resetMediaState(event1, isSourceQualityChange = false) {\n        const { audioTracks, qualities } = this.#media;\n        if (!isSourceQualityChange) {\n            this.#playedIntervals = [];\n            this.#playedInterval = [\n                -1,\n                -1\n            ];\n            audioTracks[ListSymbol.reset](event1);\n            qualities[ListSymbol.reset](event1);\n            softResetMediaState(this.$state, isSourceQualityChange);\n            this.#resetTracking();\n            return;\n        }\n        softResetMediaState(this.$state, isSourceQualityChange);\n        this.#resetTracking();\n    }\n    [\"abort\"](event1) {\n        const sourceChangeEvent = this.#trackedEvents.get(\"source-change\");\n        if (sourceChangeEvent) event1.triggers.add(sourceChangeEvent);\n        const canLoadEvent = this.#trackedEvents.get(\"can-load\");\n        if (canLoadEvent && !event1.triggers.hasType(\"can-load\")) {\n            event1.triggers.add(canLoadEvent);\n        }\n    }\n    [\"load-start\"](event1) {\n        const sourceChangeEvent = this.#trackedEvents.get(\"source-change\");\n        if (sourceChangeEvent) event1.triggers.add(sourceChangeEvent);\n    }\n    [\"error\"](event1) {\n        this.$state.error.set(event1.detail);\n        const abortEvent = this.#trackedEvents.get(\"abort\");\n        if (abortEvent) event1.triggers.add(abortEvent);\n        {\n            this.#media.logger?.errorGroup(\"Media Error\").labelledLog(\"Error\", event1.detail).labelledLog(\"Event\", event1).labelledLog(\"Context\", this.#media).dispatch();\n        }\n    }\n    [\"loaded-metadata\"](event1) {\n        const loadStartEvent = this.#trackedEvents.get(\"load-start\");\n        if (loadStartEvent) event1.triggers.add(loadStartEvent);\n    }\n    [\"loaded-data\"](event1) {\n        const loadStartEvent = this.#trackedEvents.get(\"load-start\");\n        if (loadStartEvent) event1.triggers.add(loadStartEvent);\n    }\n    [\"can-play\"](event1) {\n        const loadedMetadata = this.#trackedEvents.get(\"loaded-metadata\");\n        if (loadedMetadata) event1.triggers.add(loadedMetadata);\n        this.#onCanPlayDetail(event1.detail);\n        this.el?.setAttribute(\"aria-busy\", \"false\");\n    }\n    [\"can-play-through\"](event1) {\n        this.#onCanPlayDetail(event1.detail);\n        const canPlay = this.#trackedEvents.get(\"can-play\");\n        if (canPlay) event1.triggers.add(canPlay);\n    }\n    #onCanPlayDetail(detail) {\n        const { seekable, buffered, intrinsicDuration, canPlay } = this.$state;\n        canPlay.set(true);\n        buffered.set(detail.buffered);\n        seekable.set(detail.seekable);\n        const seekableEnd = getTimeRangesEnd(detail.seekable) ?? Infinity;\n        intrinsicDuration.set(seekableEnd);\n    }\n    [\"duration-change\"](event1) {\n        const { live, intrinsicDuration, providedDuration, clipEndTime, ended } = this.$state, time = event1.detail;\n        if (!live()) {\n            const duration = !Number.isNaN(time) ? time : 0;\n            intrinsicDuration.set(duration);\n            if (ended()) this.#onEndPrecisionChange(event1);\n        }\n        if (providedDuration() > 0 || clipEndTime() > 0) {\n            event1.stopImmediatePropagation();\n        }\n    }\n    [\"progress\"](event1) {\n        const { buffered, seekable } = this.$state, { buffered: newBuffered, seekable: newSeekable } = event1.detail, newBufferedEnd = getTimeRangesEnd(newBuffered), hasBufferedLengthChanged = newBuffered.length !== buffered().length, hasBufferedEndChanged = newBufferedEnd !== getTimeRangesEnd(buffered()), newSeekableEnd = getTimeRangesEnd(newSeekable), hasSeekableLengthChanged = newSeekable.length !== seekable().length, hasSeekableEndChanged = newSeekableEnd !== getTimeRangesEnd(seekable());\n        if (hasBufferedLengthChanged || hasBufferedEndChanged) {\n            buffered.set(newBuffered);\n        }\n        if (hasSeekableLengthChanged || hasSeekableEndChanged) {\n            seekable.set(newSeekable);\n        }\n    }\n    [\"play\"](event1) {\n        const { paused, autoPlayError, ended, autoPlaying, playsInline, pointer, muted, viewType, live, userBehindLiveEdge } = this.$state;\n        this.#resetPlaybackIfNeeded();\n        if (!paused()) {\n            event1.stopImmediatePropagation();\n            return;\n        }\n        event1.autoPlay = autoPlaying();\n        const waitingEvent = this.#trackedEvents.get(\"waiting\");\n        if (waitingEvent) event1.triggers.add(waitingEvent);\n        this.#satisfyRequest(\"media-play-request\", event1);\n        this.#trackedEvents.set(\"play\", event1);\n        paused.set(false);\n        autoPlayError.set(null);\n        if (event1.autoPlay) {\n            this.handle(this.createEvent(\"auto-play\", {\n                detail: {\n                    muted: muted()\n                },\n                trigger: event1\n            }));\n            autoPlaying.set(false);\n        }\n        if (ended() || this.#request.replaying) {\n            this.#request.replaying = false;\n            ended.set(false);\n            this.handle(this.createEvent(\"replay\", {\n                trigger: event1\n            }));\n        }\n        if (!playsInline() && viewType() === \"video\" && pointer() === \"coarse\") {\n            this.#media.remote.enterFullscreen(\"prefer-media\", event1);\n        }\n        if (live() && !userBehindLiveEdge()) {\n            this.#media.remote.seekToLiveEdge(event1);\n        }\n    }\n    #resetPlaybackIfNeeded(trigger) {\n        const provider = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#media.$provider);\n        if (!provider) return;\n        const { ended, seekableStart, clipEndTime, currentTime, realCurrentTime, duration } = this.$state;\n        const shouldReset = ended() || realCurrentTime() < seekableStart() || clipEndTime() > 0 && realCurrentTime() >= clipEndTime() || Math.abs(currentTime() - duration()) < 0.1;\n        if (shouldReset) {\n            this.dispatch(\"media-seek-request\", {\n                detail: seekableStart(),\n                trigger\n            });\n        }\n        return shouldReset;\n    }\n    [\"play-fail\"](event1) {\n        const { muted, autoPlaying } = this.$state;\n        const playEvent = this.#trackedEvents.get(\"play\");\n        if (playEvent) event1.triggers.add(playEvent);\n        this.#satisfyRequest(\"media-play-request\", event1);\n        const { paused, playing } = this.$state;\n        paused.set(true);\n        playing.set(false);\n        this.#resetTracking();\n        this.#trackedEvents.set(\"play-fail\", event1);\n        if (event1.autoPlay) {\n            this.handle(this.createEvent(\"auto-play-fail\", {\n                detail: {\n                    muted: muted(),\n                    error: event1.detail\n                },\n                trigger: event1\n            }));\n            autoPlaying.set(false);\n        }\n    }\n    [\"playing\"](event1) {\n        const playEvent = this.#trackedEvents.get(\"play\"), seekedEvent = this.#trackedEvents.get(\"seeked\");\n        if (playEvent) event1.triggers.add(playEvent);\n        else if (seekedEvent) event1.triggers.add(seekedEvent);\n        setTimeout(()=>this.#resetTracking(), 0);\n        const { paused, playing, live, liveSyncPosition, seekableEnd, started, currentTime, seeking, ended } = this.$state;\n        paused.set(false);\n        playing.set(true);\n        seeking.set(false);\n        ended.set(false);\n        if (this.#request.looping) {\n            this.#request.looping = false;\n            return;\n        }\n        if (live() && !started() && currentTime() === 0) {\n            const end = liveSyncPosition() ?? seekableEnd() - 2;\n            if (Number.isFinite(end)) this.#media.$provider().setCurrentTime(end);\n        }\n        this[\"started\"](event1);\n    }\n    [\"started\"](event1) {\n        const { started } = this.$state;\n        if (!started()) {\n            started.set(true);\n            this.handle(this.createEvent(\"started\", {\n                trigger: event1\n            }));\n        }\n    }\n    [\"pause\"](event1) {\n        if (!this.el?.isConnected) {\n            this.#isPlayingOnDisconnect = true;\n        }\n        this.#satisfyRequest(\"media-pause-request\", event1);\n        const seekedEvent = this.#trackedEvents.get(\"seeked\");\n        if (seekedEvent) event1.triggers.add(seekedEvent);\n        const { paused, playing } = this.$state;\n        paused.set(true);\n        playing.set(false);\n        if (this.#clipEnded) {\n            setTimeout(()=>{\n                this.handle(this.createEvent(\"end\", {\n                    trigger: event1\n                }));\n                this.#clipEnded = false;\n            }, 0);\n        }\n        this.#resetTracking();\n    }\n    [\"time-change\"](event1) {\n        if (this.#request.looping) {\n            event1.stopImmediatePropagation();\n            return;\n        }\n        let { waiting, played, clipEndTime, realCurrentTime, currentTime } = this.$state, newTime = event1.detail, endTime = clipEndTime();\n        realCurrentTime.set(newTime);\n        this.#updatePlayed();\n        waiting.set(false);\n        for (const track of this.#media.textTracks){\n            track[TextTrackSymbol.updateActiveCues](newTime, event1);\n        }\n        if (endTime > 0 && newTime >= endTime) {\n            this.#clipEnded = true;\n            this.dispatch(\"media-pause-request\", {\n                trigger: event1\n            });\n        }\n        this.#saveTime();\n        this.dispatch(\"time-update\", {\n            detail: {\n                currentTime: currentTime(),\n                played: played()\n            },\n            trigger: event1\n        });\n    }\n    #updatePlayed() {\n        const { currentTime, played, paused } = this.$state;\n        if (paused()) return;\n        this.#playedInterval = updateTimeIntervals(this.#playedIntervals, this.#playedInterval, currentTime());\n        played.set(new TimeRange(this.#playedIntervals));\n    }\n    // Called to update time again incase duration precision has changed.\n    #onEndPrecisionChange(trigger) {\n        const { clipStartTime, clipEndTime, duration } = this.$state, isClipped = clipStartTime() > 0 || clipEndTime() > 0;\n        if (isClipped) return;\n        this.handle(this.createEvent(\"time-change\", {\n            detail: duration(),\n            trigger\n        }));\n    }\n    #saveTime() {\n        const { storage } = this.#media, { canPlay, realCurrentTime } = this.$state;\n        if (canPlay()) {\n            storage?.setTime?.(realCurrentTime());\n        }\n    }\n    [\"audio-gain-change\"](event1) {\n        const { storage } = this.#media, { canPlay, audioGain } = this.$state;\n        audioGain.set(event1.detail);\n        this.#satisfyRequest(\"media-audio-gain-change-request\", event1);\n        if (canPlay()) storage?.setAudioGain?.(audioGain());\n    }\n    [\"volume-change\"](event1) {\n        const { storage } = this.#media, { volume, muted, canPlay } = this.$state, detail = event1.detail;\n        volume.set(detail.volume);\n        muted.set(detail.muted || detail.volume === 0);\n        this.#satisfyRequest(\"media-volume-change-request\", event1);\n        this.#satisfyRequest(detail.muted ? \"media-mute-request\" : \"media-unmute-request\", event1);\n        if (canPlay()) {\n            storage?.setVolume?.(volume());\n            storage?.setMuted?.(muted());\n        }\n    }\n    [\"seeked\"](event1) {\n        const { seeking, currentTime, realCurrentTime, paused, seekableEnd, ended, live } = this.$state;\n        if (this.#request.seeking) {\n            seeking.set(true);\n            event1.stopImmediatePropagation();\n        } else if (seeking()) {\n            const waitingEvent = this.#trackedEvents.get(\"waiting\");\n            if (waitingEvent) event1.triggers.add(waitingEvent);\n            const seekingEvent = this.#trackedEvents.get(\"seeking\");\n            if (seekingEvent && !event1.triggers.has(seekingEvent)) {\n                event1.triggers.add(seekingEvent);\n            }\n            if (paused()) this.#stopWaiting();\n            seeking.set(false);\n            realCurrentTime.set(event1.detail);\n            this.#satisfyRequest(\"media-seek-request\", event1);\n            const origin = event1?.originEvent;\n            if (origin?.isTrusted && !(origin instanceof MessageEvent) && !/seek/.test(origin.type)) {\n                this[\"started\"](event1);\n            }\n        }\n        if (!live()) {\n            if (Math.floor(currentTime()) !== Math.floor(seekableEnd())) {\n                ended.set(false);\n            } else {\n                this.end(event1);\n            }\n        }\n    }\n    [\"waiting\"](event1) {\n        if (this.#firingWaiting || this.#request.seeking) return;\n        event1.stopImmediatePropagation();\n        this.#waitingTrigger = event1;\n        this.#fireWaiting();\n    }\n    #fireWaiting;\n    [\"end\"](event1) {\n        const { loop, ended } = this.$state;\n        if (!loop() && ended()) return;\n        if (loop()) {\n            setTimeout(()=>{\n                requestAnimationFrame(()=>{\n                    this.#resetPlaybackIfNeeded(event1);\n                    this.dispatch(\"media-loop-request\", {\n                        trigger: event1\n                    });\n                });\n            }, 10);\n            return;\n        }\n        setTimeout(()=>this.#onEnded(event1), 0);\n    }\n    #onEnded(event1) {\n        const { storage } = this.#media, { paused, seeking, ended, duration } = this.$state;\n        this.#onEndPrecisionChange(event1);\n        if (!paused()) {\n            this.dispatch(\"pause\", {\n                trigger: event1\n            });\n        }\n        if (seeking()) {\n            this.dispatch(\"seeked\", {\n                detail: duration(),\n                trigger: event1\n            });\n        }\n        ended.set(true);\n        this.#resetTracking();\n        storage?.setTime?.(duration(), true);\n        this.dispatch(\"ended\", {\n            trigger: event1\n        });\n    }\n    #stopWaiting() {\n        this.#fireWaiting.cancel();\n        this.$state.waiting.set(false);\n    }\n    [\"fullscreen-change\"](event1) {\n        const isFullscreen = event1.detail;\n        this.$state.fullscreen.set(isFullscreen);\n        this.#satisfyRequest(isFullscreen ? \"media-enter-fullscreen-request\" : \"media-exit-fullscreen-request\", event1);\n    }\n    [\"fullscreen-error\"](event1) {\n        this.#satisfyRequest(\"media-enter-fullscreen-request\", event1);\n        this.#satisfyRequest(\"media-exit-fullscreen-request\", event1);\n    }\n    [\"orientation-change\"](event1) {\n        const isLocked = event1.detail.lock;\n        this.#satisfyRequest(isLocked ? \"media-orientation-lock-request\" : \"media-orientation-unlock-request\", event1);\n    }\n    [\"picture-in-picture-change\"](event1) {\n        const isPiP = event1.detail;\n        this.$state.pictureInPicture.set(isPiP);\n        this.#satisfyRequest(isPiP ? \"media-enter-pip-request\" : \"media-exit-pip-request\", event1);\n    }\n    [\"picture-in-picture-error\"](event1) {\n        this.#satisfyRequest(\"media-enter-pip-request\", event1);\n        this.#satisfyRequest(\"media-exit-pip-request\", event1);\n    }\n    [\"title-change\"](event1) {\n        if (!event1.trigger) return;\n        event1.stopImmediatePropagation();\n        this.$state.inferredTitle.set(event1.detail);\n    }\n    [\"poster-change\"](event1) {\n        if (!event1.trigger) return;\n        event1.stopImmediatePropagation();\n        this.$state.inferredPoster.set(event1.detail);\n    }\n}\nclass MediaStateSync extends MediaPlayerController {\n    onSetup() {\n        this.#init();\n        if (IS_SERVER) return;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchLogLevel.bind(this));\n        const effects = [\n            this.#watchMetadata,\n            this.#watchAutoplay,\n            this.#watchClipStartTime,\n            this.#watchClipEndTime,\n            this.#watchControls,\n            this.#watchCrossOrigin,\n            this.#watchDuration,\n            this.#watchLive,\n            this.#watchLiveEdge,\n            this.#watchLiveTolerance,\n            this.#watchLoop,\n            this.#watchPlaysInline,\n            this.#watchPoster,\n            this.#watchProvidedTypes,\n            this.#watchTitle\n        ];\n        for (const callback of effects){\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(callback.bind(this));\n        }\n    }\n    #init() {\n        const providedProps = {\n            duration: \"providedDuration\",\n            loop: \"providedLoop\",\n            poster: \"providedPoster\",\n            streamType: \"providedStreamType\",\n            title: \"providedTitle\",\n            viewType: \"providedViewType\"\n        };\n        const skip = /* @__PURE__ */ new Set([\n            \"currentTime\",\n            \"paused\",\n            \"playbackRate\",\n            \"volume\"\n        ]);\n        for (const prop of Object.keys(this.$props)){\n            if (skip.has(prop)) continue;\n            this.$state[providedProps[prop] ?? prop]?.set(this.$props[prop]());\n        }\n        this.$state.muted.set(this.$props.muted() || this.$props.volume() === 0);\n    }\n    // Sync \"provided\" props with internal state. Provided props are used to differentiate from\n    // provider inferred values.\n    #watchProvidedTypes() {\n        const { viewType, streamType, title, poster, loop } = this.$props, $state = this.$state;\n        $state.providedPoster.set(poster());\n        $state.providedStreamType.set(streamType());\n        $state.providedViewType.set(viewType());\n        $state.providedTitle.set(title());\n        $state.providedLoop.set(loop());\n    }\n    #watchLogLevel() {\n        this.$state.logLevel.set(this.$props.logLevel());\n    }\n    #watchMetadata() {\n        const { artist, artwork } = this.$props;\n        this.$state.artist.set(artist());\n        this.$state.artwork.set(artwork());\n    }\n    #watchTitle() {\n        const { title } = this.$state;\n        this.dispatch(\"title-change\", {\n            detail: title()\n        });\n    }\n    #watchAutoplay() {\n        const autoPlay = this.$props.autoPlay() || this.$props.autoplay();\n        this.$state.autoPlay.set(autoPlay);\n        this.dispatch(\"auto-play-change\", {\n            detail: autoPlay\n        });\n    }\n    #watchLoop() {\n        const loop = this.$state.loop();\n        this.dispatch(\"loop-change\", {\n            detail: loop\n        });\n    }\n    #watchControls() {\n        const controls = this.$props.controls();\n        this.$state.controls.set(controls);\n    }\n    #watchPoster() {\n        const { poster } = this.$state;\n        this.dispatch(\"poster-change\", {\n            detail: poster()\n        });\n    }\n    #watchCrossOrigin() {\n        const crossOrigin = this.$props.crossOrigin() ?? this.$props.crossorigin(), value = crossOrigin === true ? \"\" : crossOrigin;\n        this.$state.crossOrigin.set(value);\n    }\n    #watchDuration() {\n        const { duration } = this.$props;\n        this.dispatch(\"media-duration-change-request\", {\n            detail: duration()\n        });\n    }\n    #watchPlaysInline() {\n        const inline = this.$props.playsInline() || this.$props.playsinline();\n        this.$state.playsInline.set(inline);\n        this.dispatch(\"plays-inline-change\", {\n            detail: inline\n        });\n    }\n    #watchClipStartTime() {\n        const { clipStartTime } = this.$props;\n        this.dispatch(\"media-clip-start-change-request\", {\n            detail: clipStartTime()\n        });\n    }\n    #watchClipEndTime() {\n        const { clipEndTime } = this.$props;\n        this.dispatch(\"media-clip-end-change-request\", {\n            detail: clipEndTime()\n        });\n    }\n    #watchLive() {\n        this.dispatch(\"live-change\", {\n            detail: this.$state.live()\n        });\n    }\n    #watchLiveTolerance() {\n        this.$state.liveEdgeTolerance.set(this.$props.liveEdgeTolerance());\n        this.$state.minLiveDVRWindow.set(this.$props.minLiveDVRWindow());\n    }\n    #watchLiveEdge() {\n        this.dispatch(\"live-edge-change\", {\n            detail: this.$state.liveEdge()\n        });\n    }\n}\nconst actions = [\n    \"play\",\n    \"pause\",\n    \"seekforward\",\n    \"seekbackward\",\n    \"seekto\"\n];\nclass NavigatorMediaSession extends MediaPlayerController {\n    onConnect() {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onMetadataChange.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onPlaybackStateChange.bind(this));\n        const handleAction = this.#handleAction.bind(this);\n        for (const action of actions){\n            navigator.mediaSession.setActionHandler(action, handleAction);\n        }\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this.#onDisconnect.bind(this));\n    }\n    #onDisconnect() {\n        for (const action of actions){\n            navigator.mediaSession.setActionHandler(action, null);\n        }\n    }\n    #onMetadataChange() {\n        const { title, artist, artwork, poster } = this.$state;\n        navigator.mediaSession.metadata = new MediaMetadata({\n            title: title(),\n            artist: artist(),\n            artwork: artwork() ?? [\n                {\n                    src: poster()\n                }\n            ]\n        });\n    }\n    #onPlaybackStateChange() {\n        const { canPlay, paused } = this.$state;\n        navigator.mediaSession.playbackState = !canPlay() ? \"none\" : paused() ? \"paused\" : \"playing\";\n    }\n    #handleAction(details) {\n        const trigger = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(`media-session-action`, {\n            detail: details\n        });\n        switch(details.action){\n            case \"play\":\n                this.dispatch(\"media-play-request\", {\n                    trigger\n                });\n                break;\n            case \"pause\":\n                this.dispatch(\"media-pause-request\", {\n                    trigger\n                });\n                break;\n            case \"seekto\":\n            case \"seekforward\":\n            case \"seekbackward\":\n                this.dispatch(\"media-seek-request\", {\n                    detail: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(details.seekTime) ? details.seekTime : this.$state.currentTime() + (details.seekOffset ?? (details.action === \"seekforward\" ? 10 : -10)),\n                    trigger\n                });\n                break;\n        }\n    }\n}\nconst LOCAL_STORAGE_KEY = \"@vidstack/log-colors\";\nconst savedColors = init();\nfunction getLogColor(key) {\n    return savedColors.get(key);\n}\nfunction saveLogColor(key, { color = generateColor(), overwrite = false } = {}) {\n    if (!savedColors.has(key) || overwrite) {\n        savedColors.set(key, color);\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(Object.entries(savedColors)));\n    }\n}\nfunction generateColor() {\n    return `hsl(${Math.random() * 360}, 55%, 70%)`;\n}\nfunction init() {\n    let colors;\n    try {\n        colors = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    } catch  {}\n    return new Map(Object.entries(colors ?? {}));\n}\nconst LogLevelValue = Object.freeze({\n    silent: 0,\n    error: 1,\n    warn: 2,\n    info: 3,\n    debug: 4\n});\nconst LogLevelColor = Object.freeze({\n    silent: \"white\",\n    error: \"hsl(6, 58%, 50%)\",\n    warn: \"hsl(51, 58%, 50%)\",\n    info: \"hsl(219, 58%, 50%)\",\n    debug: \"hsl(280, 58%, 50%)\"\n});\nconst s = 1e3;\nconst m = s * 60;\nconst h = m * 60;\nconst d = h * 24;\nfunction ms(val) {\n    const msAbs = Math.abs(val);\n    if (msAbs >= d) {\n        return Math.round(val / d) + \"d\";\n    }\n    if (msAbs >= h) {\n        return Math.round(val / h) + \"h\";\n    }\n    if (msAbs >= m) {\n        return Math.round(val / m) + \"m\";\n    }\n    if (msAbs >= s) {\n        return Math.round(val / s) + \"s\";\n    }\n    return round(val, 2) + \"ms\";\n}\nclass LogPrinter extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    #level;\n    #lastLogged;\n    /**\n   * The current log level.\n   */ get logLevel() {\n        return this.#level;\n    }\n    set logLevel(level) {\n        this.#level = level;\n    }\n    onConnect() {\n        this.listen(\"vds-log\", (event1)=>{\n            event1.stopPropagation();\n            const element = event1.path?.[0] ?? (event1.target instanceof _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.ViewController ? event1.target.el : event1.target), eventTargetName = element?.$$COMPONENT_NAME?.replace(/^_/, \"\").replace(/Instance$/, \"\") ?? element?.tagName.toLowerCase() ?? \"unknown\";\n            const { level = \"warn\", data } = event1.detail ?? {};\n            if (LogLevelValue[this.#level] < LogLevelValue[level]) {\n                return;\n            }\n            saveLogColor(eventTargetName);\n            const hint = data?.length === 1 && isGroupedLog(data[0]) ? data[0].title : (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(data?.[0]) ? data[0] : \"\";\n            console.groupCollapsed(`%c${level.toUpperCase()}%c ${eventTargetName}%c ${hint.slice(0, 50)}${hint.length > 50 ? \"...\" : \"\"}`, `background: ${LogLevelColor[level]}; color: white; padding: 1.5px 2.2px; border-radius: 2px; font-size: 11px;`, `color: ${getLogColor(eventTargetName)}; padding: 4px 0px; font-size: 11px;`, \"color: gray; font-size: 11px; padding-left: 4px;\");\n            if (data?.length === 1 && isGroupedLog(data[0])) {\n                if (element) data[0].logs.unshift({\n                    label: \"Element\",\n                    data: [\n                        element\n                    ]\n                });\n                printGroup(level, data[0]);\n            } else if (data) {\n                print(level, ...data);\n            }\n            this.#printTimeDiff();\n            printStackTrace();\n            console.groupEnd();\n        });\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            this.#lastLogged = void 0;\n        });\n    }\n    #printTimeDiff() {\n        labelledPrint(\"Time since last log\", this.#calcLastLogTimeDiff());\n    }\n    #calcLastLogTimeDiff() {\n        const time = performance.now();\n        const diff = time - (this.#lastLogged ?? (this.#lastLogged = performance.now()));\n        this.#lastLogged = time;\n        return ms(diff);\n    }\n    constructor(...args){\n        super(...args), this.#level = \"warn\";\n    }\n}\nfunction print(level, ...data) {\n    console[level](...data);\n}\nfunction labelledPrint(label, ...data) {\n    console.log(`%c${label}:`, \"color: gray\", ...data);\n}\nfunction printStackTrace() {\n    console.groupCollapsed(\"%cStack Trace\", \"color: gray\");\n    console.trace();\n    console.groupEnd();\n}\nfunction printGroup(level, groupedLog) {\n    for (const log of groupedLog.logs){\n        if (isGroupedLog(log)) {\n            console.groupCollapsed(groupedLog.title);\n            printGroup(level, log);\n            console.groupEnd();\n        } else if (\"label\" in log && !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(log.label)) {\n            labelledPrint(log.label, ...log.data);\n        } else {\n            print(level, ...log.data);\n        }\n    }\n}\nlet $keyboard = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\nif (!IS_SERVER) {\n    (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(document, \"pointerdown\", ()=>{\n        $keyboard.set(false);\n    });\n    (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(document, \"keydown\", (e)=>{\n        if (e.metaKey || e.altKey || e.ctrlKey) return;\n        $keyboard.set(true);\n    });\n}\nclass FocusVisibleController extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    #focused;\n    onConnect(el) {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            const events = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(el);\n            if (!$keyboard()) {\n                this.#focused.set(false);\n                updateFocusAttr(el, false);\n                events.add(\"pointerenter\", this.#onPointerEnter.bind(this)).add(\"pointerleave\", this.#onPointerLeave.bind(this));\n                return;\n            }\n            const active = document.activeElement === el;\n            this.#focused.set(active);\n            updateFocusAttr(el, active);\n            events.add(\"focus\", this.#onFocus.bind(this)).add(\"blur\", this.#onBlur.bind(this));\n        });\n    }\n    focused() {\n        return this.#focused();\n    }\n    #onFocus() {\n        this.#focused.set(true);\n        updateFocusAttr(this.el, true);\n    }\n    #onBlur() {\n        this.#focused.set(false);\n        updateFocusAttr(this.el, false);\n    }\n    #onPointerEnter() {\n        updateHoverAttr(this.el, true);\n    }\n    #onPointerLeave() {\n        updateHoverAttr(this.el, false);\n    }\n    constructor(...args){\n        super(...args), this.#focused = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n    }\n}\nfunction updateFocusAttr(el, isFocused) {\n    (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-focus\", isFocused);\n    (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-hocus\", isFocused);\n}\nfunction updateHoverAttr(el, isHovering) {\n    (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-hocus\", isHovering);\n    (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-hover\", isHovering);\n}\nclass MediaPlayer extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = mediaPlayerProps;\n    }\n    static{\n        this.state = mediaState;\n    }\n    #media;\n    #stateMgr;\n    #requestMgr;\n    get #provider() {\n        return this.#media.$provider();\n    }\n    get #props() {\n        return this.$props;\n    }\n    constructor(){\n        super(), this.canPlayQueue = new RequestQueue(), this.#skipTitleUpdate = false;\n        new MediaStateSync();\n        const context = {\n            player: this,\n            qualities: new VideoQualityList(),\n            audioTracks: new AudioTrackList(),\n            storage: null,\n            $provider: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null),\n            $providerSetup: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false),\n            $props: this.$props,\n            $state: this.$state\n        };\n        {\n            const logPrinter = new LogPrinter();\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n                logPrinter.logLevel = this.$props.logLevel();\n            });\n        }\n        context.logger = new Logger();\n        context.remote = this.remoteControl = new MediaRemoteControl(context.logger);\n        context.remote.setPlayer(this);\n        context.textTracks = new TextTrackList();\n        context.textTracks[TextTrackSymbol.crossOrigin] = this.$state.crossOrigin;\n        context.textRenderers = new TextRenderers(context);\n        context.ariaKeys = {};\n        this.#media = context;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(mediaContext, context);\n        this.orientation = new ScreenOrientationController();\n        new FocusVisibleController();\n        new MediaKeyboardController(context);\n        new MediaEventsLogger(context);\n        const request = new MediaRequestContext();\n        this.#stateMgr = new MediaStateManager(request, context);\n        this.#requestMgr = new MediaRequestManager(this.#stateMgr, request, context);\n        context.delegate = new MediaPlayerDelegate(this.#stateMgr.handle.bind(this.#stateMgr), context);\n        context.notify = context.delegate.notify.bind(context.delegate);\n        if (typeof navigator !== \"undefined\" && \"mediaSession\" in navigator) {\n            new NavigatorMediaSession();\n        }\n        new MediaLoadController(\"load\", this.startLoading.bind(this));\n        new MediaLoadController(\"posterLoad\", this.startLoadingPoster.bind(this));\n    }\n    onSetup() {\n        this.#setupMediaAttributes();\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchCanPlay.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchMuted.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchPaused.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchVolume.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchCurrentTime.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchPlaysInline.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchPlaybackRate.bind(this));\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-player\", \"\");\n        setAttributeIfEmpty(el, \"tabindex\", \"0\");\n        setAttributeIfEmpty(el, \"role\", \"region\");\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchStorage.bind(this));\n        if (IS_SERVER) this.#watchTitle();\n        else (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchTitle.bind(this));\n        if (IS_SERVER) this.#watchOrientation();\n        else (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchOrientation.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(el, \"find-media-player\", this.#onFindPlayer.bind(this));\n    }\n    onConnect(el) {\n        if (IS_IPHONE) (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-iphone\", \"\");\n        const pointerQuery = window.matchMedia(\"(pointer: coarse)\");\n        this.#onPointerChange(pointerQuery);\n        pointerQuery.onchange = this.#onPointerChange.bind(this);\n        const resize = new ResizeObserver((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.animationFrameThrottle)(this.#onResize.bind(this)));\n        resize.observe(el);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onResize.bind(this));\n        this.dispatch(\"media-player-connect\", {\n            detail: this,\n            bubbles: true,\n            composed: true\n        });\n        this.#media.logger.setTarget(el);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            resize.disconnect();\n            pointerQuery.onchange = null;\n            this.#media.logger.setTarget(null);\n        });\n    }\n    onDestroy() {\n        this.#media.player = null;\n        this.canPlayQueue.reset();\n    }\n    #skipTitleUpdate;\n    #watchTitle() {\n        const el = this.$el, { title, live, viewType, providedTitle } = this.$state, isLive = live(), type = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.uppercaseFirstChar)(viewType()), typeText = type !== \"Unknown\" ? `${isLive ? \"Live \" : \"\"}${type}` : isLive ? \"Live\" : \"Media\", currentTitle = title();\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this.el, \"aria-label\", `${typeText} Player` + (currentTitle ? ` - ${currentTitle}` : \"\"));\n        if (!IS_SERVER && el?.hasAttribute(\"title\")) {\n            this.#skipTitleUpdate = true;\n            el?.removeAttribute(\"title\");\n        }\n    }\n    #watchOrientation() {\n        const orientation = this.orientation.landscape ? \"landscape\" : \"portrait\";\n        this.$state.orientation.set(orientation);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this.el, \"data-orientation\", orientation);\n        this.#onResize();\n    }\n    #watchCanPlay() {\n        if (this.$state.canPlay() && this.#provider) this.canPlayQueue.start();\n        else this.canPlayQueue.stop();\n    }\n    #setupMediaAttributes() {\n        if (MediaPlayer[MEDIA_ATTRIBUTES]) {\n            this.setAttributes(MediaPlayer[MEDIA_ATTRIBUTES]);\n            return;\n        }\n        const $attrs = {\n            \"data-load\": function() {\n                return this.$props.load();\n            },\n            \"data-captions\": function() {\n                const track = this.$state.textTrack();\n                return !!track && isTrackCaptionKind(track);\n            },\n            \"data-ios-controls\": function() {\n                return this.$state.iOSControls();\n            },\n            \"data-controls\": function() {\n                return this.controls.showing;\n            },\n            \"data-buffering\": function() {\n                const { canLoad, canPlay, waiting } = this.$state;\n                return canLoad() && (!canPlay() || waiting());\n            },\n            \"data-error\": function() {\n                const { error } = this.$state;\n                return !!error();\n            },\n            \"data-autoplay-error\": function() {\n                const { autoPlayError } = this.$state;\n                return !!autoPlayError();\n            }\n        };\n        const alias = {\n            autoPlay: \"autoplay\",\n            canAirPlay: \"can-airplay\",\n            canPictureInPicture: \"can-pip\",\n            pictureInPicture: \"pip\",\n            playsInline: \"playsinline\",\n            remotePlaybackState: \"remote-state\",\n            remotePlaybackType: \"remote-type\",\n            isAirPlayConnected: \"airplay\",\n            isGoogleCastConnected: \"google-cast\"\n        };\n        for (const prop2 of mediaAttributes){\n            const attrName = \"data-\" + (alias[prop2] ?? (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.camelToKebabCase)(prop2));\n            $attrs[attrName] = function() {\n                return this.$state[prop2]();\n            };\n        }\n        delete $attrs.title;\n        MediaPlayer[MEDIA_ATTRIBUTES] = $attrs;\n        this.setAttributes($attrs);\n    }\n    #onFindPlayer(event1) {\n        event1.detail(this);\n    }\n    #onResize() {\n        if (IS_SERVER || !this.el) return;\n        const width = this.el.clientWidth, height = this.el.clientHeight;\n        this.$state.width.set(width);\n        this.$state.height.set(height);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(this.el, \"--player-width\", width + \"px\");\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(this.el, \"--player-height\", height + \"px\");\n    }\n    #onPointerChange(queryList) {\n        if (IS_SERVER) return;\n        const pointer = queryList.matches ? \"coarse\" : \"fine\";\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this.el, \"data-pointer\", pointer);\n        this.$state.pointer.set(pointer);\n        this.#onResize();\n    }\n    /**\n   * The current media provider.\n   */ get provider() {\n        return this.#provider;\n    }\n    /**\n   * Media controls settings.\n   */ get controls() {\n        return this.#requestMgr.controls;\n    }\n    set controls(controls) {\n        this.#props.controls.set(controls);\n    }\n    /**\n   * The title of the current media.\n   */ get title() {\n        return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.title);\n    }\n    set title(newTitle) {\n        if (this.#skipTitleUpdate) {\n            this.#skipTitleUpdate = false;\n            return;\n        }\n        this.#props.title.set(newTitle);\n    }\n    /**\n   * A list of all `VideoQuality` objects representing the set of available video renditions.\n   *\n   * @see {@link https://vidstack.io/docs/player/api/video-quality}\n   */ get qualities() {\n        return this.#media.qualities;\n    }\n    /**\n   * A list of all `AudioTrack` objects representing the set of available audio tracks.\n   *\n   * @see {@link https://vidstack.io/docs/player/api/audio-tracks}\n   */ get audioTracks() {\n        return this.#media.audioTracks;\n    }\n    /**\n   * A list of all `TextTrack` objects representing the set of available text tracks.\n   *\n   * @see {@link https://vidstack.io/docs/player/api/text-tracks}\n   */ get textTracks() {\n        return this.#media.textTracks;\n    }\n    /**\n   * Contains text renderers which are responsible for loading, parsing, and rendering text\n   * tracks.\n   */ get textRenderers() {\n        return this.#media.textRenderers;\n    }\n    get duration() {\n        return this.$state.duration();\n    }\n    set duration(duration) {\n        this.#props.duration.set(duration);\n    }\n    get paused() {\n        return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.paused);\n    }\n    set paused(paused) {\n        this.#queuePausedUpdate(paused);\n    }\n    #watchPaused() {\n        this.#queuePausedUpdate(this.$props.paused());\n    }\n    #queuePausedUpdate(paused) {\n        if (paused) {\n            this.canPlayQueue.enqueue(\"paused\", ()=>this.#requestMgr.pause());\n        } else this.canPlayQueue.enqueue(\"paused\", ()=>this.#requestMgr.play());\n    }\n    get muted() {\n        return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.muted);\n    }\n    set muted(muted) {\n        this.#queueMutedUpdate(muted);\n    }\n    #watchMuted() {\n        this.#queueMutedUpdate(this.$props.muted());\n    }\n    #queueMutedUpdate(muted) {\n        this.canPlayQueue.enqueue(\"muted\", ()=>{\n            if (this.#provider) this.#provider.setMuted(muted);\n        });\n    }\n    get currentTime() {\n        return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.currentTime);\n    }\n    set currentTime(time) {\n        this.#queueCurrentTimeUpdate(time);\n    }\n    #watchCurrentTime() {\n        this.#queueCurrentTimeUpdate(this.$props.currentTime());\n    }\n    #queueCurrentTimeUpdate(time) {\n        this.canPlayQueue.enqueue(\"currentTime\", ()=>{\n            const { currentTime } = this.$state;\n            if (time === (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(currentTime)) return;\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(()=>{\n                if (!this.#provider) return;\n                const boundedTime = boundTime(time, this.$state);\n                if (Number.isFinite(boundedTime)) {\n                    this.#provider.setCurrentTime(boundedTime);\n                }\n            });\n        });\n    }\n    get volume() {\n        return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.volume);\n    }\n    set volume(volume) {\n        this.#queueVolumeUpdate(volume);\n    }\n    #watchVolume() {\n        this.#queueVolumeUpdate(this.$props.volume());\n    }\n    #queueVolumeUpdate(volume) {\n        const clampedVolume = clampNumber(0, volume, 1);\n        this.canPlayQueue.enqueue(\"volume\", ()=>{\n            if (this.#provider) this.#provider.setVolume(clampedVolume);\n        });\n    }\n    get playbackRate() {\n        return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.playbackRate);\n    }\n    set playbackRate(rate) {\n        this.#queuePlaybackRateUpdate(rate);\n    }\n    #watchPlaybackRate() {\n        this.#queuePlaybackRateUpdate(this.$props.playbackRate());\n    }\n    #queuePlaybackRateUpdate(rate) {\n        this.canPlayQueue.enqueue(\"rate\", ()=>{\n            if (this.#provider) this.#provider.setPlaybackRate?.(rate);\n        });\n    }\n    #watchPlaysInline() {\n        this.#queuePlaysInlineUpdate(this.$props.playsInline());\n    }\n    #queuePlaysInlineUpdate(inline) {\n        this.canPlayQueue.enqueue(\"playsinline\", ()=>{\n            if (this.#provider) this.#provider.setPlaysInline?.(inline);\n        });\n    }\n    #watchStorage() {\n        let storageValue = this.$props.storage(), storage = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(storageValue) ? new LocalMediaStorage() : storageValue;\n        if (storage?.onChange) {\n            const { source } = this.$state, playerId = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(storageValue) ? storageValue : this.el?.id, mediaId = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.computed)(this.#computeMediaId.bind(this));\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>storage.onChange(source(), mediaId(), playerId || void 0));\n        }\n        this.#media.storage = storage;\n        this.#media.textTracks.setStorage(storage);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            storage?.onDestroy?.();\n            this.#media.storage = null;\n            this.#media.textTracks.setStorage(null);\n        });\n    }\n    #computeMediaId() {\n        const { clipStartTime, clipEndTime } = this.$props, { source } = this.$state, src = source();\n        return src.src ? `${src.src}:${clipStartTime()}:${clipEndTime()}` : null;\n    }\n    /**\n   * Begins/resumes playback of the media. If this method is called programmatically before the\n   * user has interacted with the player, the promise may be rejected subject to the browser's\n   * autoplay policies. This method will throw if called before media is ready for playback.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play}\n   */ async play(trigger) {\n        return this.#requestMgr.play(trigger);\n    }\n    /**\n   * Pauses playback of the media. This method will throw if called before media is ready for\n   * playback.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause}\n   */ async pause(trigger) {\n        return this.#requestMgr.pause(trigger);\n    }\n    /**\n   * Attempts to display the player in fullscreen. The promise will resolve if successful, and\n   * reject if not. This method will throw if any fullscreen API is _not_ currently available.\n   *\n   * @see {@link https://vidstack.io/docs/player/api/fullscreen}\n   */ async enterFullscreen(target, trigger) {\n        return this.#requestMgr.enterFullscreen(target, trigger);\n    }\n    /**\n   * Attempts to display the player inline by exiting fullscreen. This method will throw if any\n   * fullscreen API is _not_ currently available.\n   *\n   * @see {@link https://vidstack.io/docs/player/api/fullscreen}\n   */ async exitFullscreen(target, trigger) {\n        return this.#requestMgr.exitFullscreen(target, trigger);\n    }\n    /**\n   * Attempts to display the player in picture-in-picture mode. This method will throw if PIP is\n   * not supported. This method will also return a `PictureInPictureWindow` if the current\n   * provider supports it.\n   *\n   * @see {@link https://vidstack.io/docs/player/api/picture-in-picture}\n   */ enterPictureInPicture(trigger) {\n        return this.#requestMgr.enterPictureInPicture(trigger);\n    }\n    /**\n   * Attempts to display the player in inline by exiting picture-in-picture mode. This method\n   * will throw if not supported.\n   *\n   * @see {@link https://vidstack.io/docs/player/api/picture-in-picture}\n   */ exitPictureInPicture(trigger) {\n        return this.#requestMgr.exitPictureInPicture(trigger);\n    }\n    /**\n   * Sets the current time to the live edge (i.e., `duration`). This is a no-op for non-live\n   * streams and will throw if called before media is ready for playback.\n   *\n   * @see {@link https://vidstack.io/docs/player/api/live}\n   */ seekToLiveEdge(trigger) {\n        this.#requestMgr.seekToLiveEdge(trigger);\n    }\n    /**\n   * Called when media can begin loading. Calling this method will trigger the initial provider\n   * loading process. Calling it more than once has no effect.\n   *\n   * @see {@link https://vidstack.io/docs/player/core-concepts/loading#load-strategies}\n   */ startLoading(trigger) {\n        this.#media.notify(\"can-load\", void 0, trigger);\n    }\n    /**\n   * Called when the poster image can begin loading. Calling it more than once has no effect.\n   *\n   * @see {@link https://vidstack.io/docs/player/core-concepts/loading#load-strategies}\n   */ startLoadingPoster(trigger) {\n        this.#media.notify(\"can-load-poster\", void 0, trigger);\n    }\n    /**\n   * Request Apple AirPlay picker to open.\n   */ requestAirPlay(trigger) {\n        return this.#requestMgr.requestAirPlay(trigger);\n    }\n    /**\n   * Request Google Cast device picker to open. The Google Cast framework will be loaded if it\n   * hasn't yet.\n   */ requestGoogleCast(trigger) {\n        return this.#requestMgr.requestGoogleCast(trigger);\n    }\n    /**\n   * Set the audio gain, amplifying volume and enabling a maximum volume above 100%.\n   *\n   * @see {@link https://vidstack.io/docs/player/api/audio-gain}\n   */ setAudioGain(gain, trigger) {\n        return this.#requestMgr.setAudioGain(gain, trigger);\n    }\n    destroy() {\n        super.destroy();\n        this.#media.remote.setPlayer(null);\n        this.dispatch(\"destroy\");\n    }\n}\nconst mediaplayer__proto = MediaPlayer.prototype;\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(mediaplayer__proto, \"canPlayQueue\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(mediaplayer__proto, \"remoteControl\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(mediaplayer__proto, \"provider\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(mediaplayer__proto, \"controls\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(mediaplayer__proto, \"orientation\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(mediaplayer__proto, \"title\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(mediaplayer__proto, \"qualities\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(mediaplayer__proto, \"audioTracks\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(mediaplayer__proto, \"textTracks\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(mediaplayer__proto, \"textRenderers\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(mediaplayer__proto, \"duration\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(mediaplayer__proto, \"paused\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(mediaplayer__proto, \"muted\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(mediaplayer__proto, \"currentTime\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(mediaplayer__proto, \"volume\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(mediaplayer__proto, \"playbackRate\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.method)(mediaplayer__proto, \"play\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.method)(mediaplayer__proto, \"pause\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.method)(mediaplayer__proto, \"enterFullscreen\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.method)(mediaplayer__proto, \"exitFullscreen\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.method)(mediaplayer__proto, \"enterPictureInPicture\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.method)(mediaplayer__proto, \"exitPictureInPicture\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.method)(mediaplayer__proto, \"seekToLiveEdge\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.method)(mediaplayer__proto, \"startLoading\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.method)(mediaplayer__proto, \"startLoadingPoster\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.method)(mediaplayer__proto, \"requestAirPlay\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.method)(mediaplayer__proto, \"requestGoogleCast\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.method)(mediaplayer__proto, \"setAudioGain\");\nfunction resolveStreamTypeFromDASHManifest(manifestSrc, requestInit) {\n    return fetch(manifestSrc, requestInit).then((res)=>res.text()).then((manifest)=>{\n        return /type=\"static\"/.test(manifest) ? \"on-demand\" : \"live\";\n    });\n}\nfunction resolveStreamTypeFromHLSManifest(manifestSrc, requestInit) {\n    return fetch(manifestSrc, requestInit).then((res)=>res.text()).then((manifest)=>{\n        const renditionURI = resolveHLSRenditionURI(manifest);\n        if (renditionURI) {\n            return resolveStreamTypeFromHLSManifest(/^https?:/.test(renditionURI) ? renditionURI : new URL(renditionURI, manifestSrc).href, requestInit);\n        }\n        const streamType = /EXT-X-PLAYLIST-TYPE:\\s*VOD/.test(manifest) ? \"on-demand\" : \"live\";\n        if (streamType === \"live\" && resolveTargetDuration(manifest) >= 10 && (/#EXT-X-DVR-ENABLED:\\s*true/.test(manifest) || manifest.includes(\"#EXT-X-DISCONTINUITY\"))) {\n            return \"live:dvr\";\n        }\n        return streamType;\n    });\n}\nfunction resolveHLSRenditionURI(manifest) {\n    const matches = manifest.match(/#EXT-X-STREAM-INF:[^\\n]+(\\n[^\\n]+)*/g);\n    return matches ? matches[0].split(\"\\n\")[1].trim() : null;\n}\nfunction resolveTargetDuration(manifest) {\n    const lines = manifest.split(\"\\n\");\n    for (const line of lines){\n        if (line.startsWith(\"#EXT-X-TARGETDURATION\")) {\n            const duration = parseFloat(line.split(\":\")[1]);\n            if (!isNaN(duration)) {\n                return duration;\n            }\n        }\n    }\n    return -1;\n}\nlet warned$1 = /* @__PURE__ */ new Set();\nconst sourceTypes = /* @__PURE__ */ new Map();\nclass SourceSelection {\n    #initialize;\n    #loaders;\n    #domSources;\n    #media;\n    #loader;\n    constructor(domSources, media, loader, customLoaders = []){\n        this.#initialize = false;\n        this.#domSources = domSources;\n        this.#media = media;\n        this.#loader = loader;\n        const DASH_LOADER = new DASHProviderLoader(), HLS_LOADER = new HLSProviderLoader(), VIDEO_LOADER = new VideoProviderLoader(), AUDIO_LOADER = new AudioProviderLoader(), YOUTUBE_LOADER = new YouTubeProviderLoader(), VIMEO_LOADER = new VimeoProviderLoader(), EMBED_LOADERS = [\n            YOUTUBE_LOADER,\n            VIMEO_LOADER\n        ];\n        this.#loaders = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.computed)(()=>{\n            const remoteLoader = media.$state.remotePlaybackLoader();\n            const loaders = media.$props.preferNativeHLS() ? [\n                VIDEO_LOADER,\n                AUDIO_LOADER,\n                DASH_LOADER,\n                HLS_LOADER,\n                ...EMBED_LOADERS,\n                ...customLoaders\n            ] : [\n                HLS_LOADER,\n                VIDEO_LOADER,\n                AUDIO_LOADER,\n                DASH_LOADER,\n                ...EMBED_LOADERS,\n                ...customLoaders\n            ];\n            return remoteLoader ? [\n                remoteLoader,\n                ...loaders\n            ] : loaders;\n        });\n        const { $state } = media;\n        $state.sources.set(normalizeSrc(media.$props.src()));\n        for (const src of $state.sources()){\n            const loader2 = this.#loaders().find((loader3)=>loader3.canPlay(src));\n            if (!loader2) continue;\n            const mediaType = loader2.mediaType(src);\n            media.$state.source.set(src);\n            media.$state.mediaType.set(mediaType);\n            media.$state.inferredViewType.set(mediaType);\n            this.#loader.set(loader2);\n            this.#initialize = true;\n            break;\n        }\n    }\n    connect() {\n        const loader = this.#loader();\n        if (this.#initialize) {\n            this.#notifySourceChange(this.#media.$state.source(), loader);\n            this.#notifyLoaderChange(loader);\n            this.#initialize = false;\n        }\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onSourcesChange.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onSourceChange.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onSetup.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onLoadSource.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onLoadPoster.bind(this));\n    }\n    #onSourcesChange() {\n        this.#media.notify(\"sources-change\", [\n            ...normalizeSrc(this.#media.$props.src()),\n            ...this.#domSources()\n        ]);\n    }\n    #onSourceChange() {\n        const { $state } = this.#media;\n        const sources = $state.sources(), currentSource = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)($state.source), newSource = this.#findNewSource(currentSource, sources), noMatch = sources[0]?.src && !newSource.src && !newSource.type;\n        if (noMatch && !warned$1.has(newSource.src) && !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#loader)) {\n            const source = sources[0];\n            console.warn(`[vidstack] could not find a loader for any of the given media sources, consider providing \\`type\\`:\n\n--- HTML ---\n\n<media-provider>\n  <source src=\"${source.src}\" type=\"video/mp4\" />\n</media-provider>\"\n\n--- React ---\n\n<MediaPlayer src={{ src: \"${source.src}\", type: \"video/mp4\" }}>\n\n---\n\nFalling back to fetching source headers...`);\n            warned$1.add(newSource.src);\n        }\n        if (noMatch) {\n            const { crossOrigin } = $state, credentials = getRequestCredentials(crossOrigin()), abort = new AbortController();\n            Promise.all(sources.map((source)=>(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(source.src) && source.type === \"?\" ? fetch(source.src, {\n                    method: \"HEAD\",\n                    credentials,\n                    signal: abort.signal\n                }).then((res)=>{\n                    source.type = res.headers.get(\"content-type\") || \"??\";\n                    sourceTypes.set(source.src, source.type);\n                    return source;\n                }).catch(()=>source) : source)).then((sources2)=>{\n                if (abort.signal.aborted) return;\n                const newSource2 = this.#findNewSource((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)($state.source), sources2);\n                (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.tick)();\n                if (!newSource2.src) {\n                    this.#media.notify(\"error\", {\n                        message: \"Failed to load resource.\",\n                        code: 4\n                    });\n                }\n            });\n            return ()=>abort.abort();\n        }\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.tick)();\n    }\n    #findNewSource(currentSource, sources) {\n        let newSource = {\n            src: \"\",\n            type: \"\"\n        }, newLoader = null, triggerEvent = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"sources-change\", {\n            detail: {\n                sources\n            }\n        }), loaders = this.#loaders(), { started, paused, currentTime, quality, savedState } = this.#media.$state;\n        for (const src of sources){\n            const loader = loaders.find((loader2)=>loader2.canPlay(src));\n            if (loader) {\n                newSource = src;\n                newLoader = loader;\n                break;\n            }\n        }\n        if (isVideoQualitySrc(newSource)) {\n            const currentQuality = quality(), sourceQuality = sources.find((s)=>s.src === currentQuality?.src);\n            if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(started)) {\n                savedState.set({\n                    paused: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(paused),\n                    currentTime: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(currentTime)\n                });\n            } else {\n                savedState.set(null);\n            }\n            if (sourceQuality) {\n                newSource = sourceQuality;\n                triggerEvent = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"quality-change\", {\n                    detail: {\n                        quality: currentQuality\n                    }\n                });\n            }\n        }\n        if (!isSameSrc(currentSource, newSource)) {\n            this.#notifySourceChange(newSource, newLoader, triggerEvent);\n        }\n        if (newLoader !== (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#loader)) {\n            this.#notifyLoaderChange(newLoader, triggerEvent);\n        }\n        return newSource;\n    }\n    #notifySourceChange(src, loader, trigger) {\n        this.#media.notify(\"source-change\", src, trigger);\n        this.#media.notify(\"media-type-change\", loader?.mediaType(src) || \"unknown\", trigger);\n    }\n    #notifyLoaderChange(loader, trigger) {\n        this.#media.$providerSetup.set(false);\n        this.#media.notify(\"provider-change\", null, trigger);\n        loader && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(()=>loader.preconnect?.(this.#media));\n        this.#loader.set(loader);\n        this.#media.notify(\"provider-loader-change\", loader, trigger);\n    }\n    #onSetup() {\n        const provider = this.#media.$provider();\n        if (!provider || (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#media.$providerSetup)) return;\n        if (this.#media.$state.canLoad()) {\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.scoped)(()=>provider.setup(), provider.scope);\n            this.#media.$providerSetup.set(true);\n            return;\n        }\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(()=>provider.preconnect?.());\n    }\n    #onLoadSource() {\n        if (!this.#media.$providerSetup()) return;\n        const provider = this.#media.$provider(), source = this.#media.$state.source(), crossOrigin = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#media.$state.crossOrigin), preferNativeHLS = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#media.$props.preferNativeHLS);\n        if (isSameSrc(provider?.currentSrc, source)) {\n            return;\n        }\n        if (this.#media.$state.canLoad()) {\n            const abort = new AbortController();\n            if (isHLSSrc(source)) {\n                if (preferNativeHLS || !isHLSSupported()) {\n                    resolveStreamTypeFromHLSManifest(source.src, {\n                        credentials: getRequestCredentials(crossOrigin),\n                        signal: abort.signal\n                    }).then((streamType)=>{\n                        this.#media.notify(\"stream-type-change\", streamType);\n                    }).catch(_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.noop);\n                }\n            } else if (isDASHSrc(source)) {\n                resolveStreamTypeFromDASHManifest(source.src, {\n                    credentials: getRequestCredentials(crossOrigin),\n                    signal: abort.signal\n                }).then((streamType)=>{\n                    this.#media.notify(\"stream-type-change\", streamType);\n                }).catch(_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.noop);\n            } else {\n                this.#media.notify(\"stream-type-change\", \"on-demand\");\n            }\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(()=>{\n                const preload = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#media.$state.preload);\n                return provider?.loadSource(source, preload).catch((error)=>{\n                    {\n                        this.#media.logger?.errorGroup(\"[vidstack] failed to load source\").labelledLog(\"Error\", error).labelledLog(\"Source\", source).labelledLog(\"Provider\", provider).labelledLog(\"Media Context\", {\n                            ...this.#media\n                        }).dispatch();\n                    }\n                });\n            });\n            return ()=>abort.abort();\n        }\n        try {\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(source.src) && preconnect(new URL(source.src).origin);\n        } catch (error) {\n            {\n                this.#media.logger?.infoGroup(`Failed to preconnect to source: ${source.src}`).labelledLog(\"Error\", error).dispatch();\n            }\n        }\n    }\n    #onLoadPoster() {\n        const loader = this.#loader(), { providedPoster, source, canLoadPoster } = this.#media.$state;\n        if (!loader || !loader.loadPoster || !source() || !canLoadPoster() || providedPoster()) return;\n        const abort = new AbortController(), trigger = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"source-change\", {\n            detail: source\n        });\n        loader.loadPoster(source(), this.#media, abort).then((url)=>{\n            this.#media.notify(\"poster-change\", url || \"\", trigger);\n        }).catch(()=>{\n            this.#media.notify(\"poster-change\", \"\", trigger);\n        });\n        return ()=>{\n            abort.abort();\n        };\n    }\n}\nfunction normalizeSrc(src) {\n    return ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(src) ? src : [\n        src\n    ]).map((src2)=>{\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src2)) {\n            return {\n                src: src2,\n                type: inferType(src2)\n            };\n        } else {\n            return {\n                ...src2,\n                type: inferType(src2.src, src2.type)\n            };\n        }\n    });\n}\nfunction inferType(src, type) {\n    if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(type) && type.length) {\n        return type;\n    } else if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src) && sourceTypes.has(src)) {\n        return sourceTypes.get(src);\n    } else if (!type && isHLSSrc({\n        src,\n        type: \"\"\n    })) {\n        return \"application/x-mpegurl\";\n    } else if (!type && isDASHSrc({\n        src,\n        type: \"\"\n    })) {\n        return \"application/dash+xml\";\n    } else if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src) || src.startsWith(\"blob:\")) {\n        return \"video/object\";\n    } else if (src.includes(\"youtube\") || src.includes(\"youtu.be\")) {\n        return \"video/youtube\";\n    } else if (src.includes(\"vimeo\") && !src.includes(\"progressive_redirect\") && !src.includes(\".m3u8\")) {\n        return \"video/vimeo\";\n    }\n    return \"?\";\n}\nfunction isSameSrc(a, b) {\n    return a?.src === b?.src && a?.type === b?.type;\n}\nclass Tracks {\n    #domTracks;\n    #media;\n    #prevTracks;\n    constructor(domTracks, media){\n        this.#prevTracks = [];\n        this.#domTracks = domTracks;\n        this.#media = media;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onTracksChange.bind(this));\n    }\n    #onTracksChange() {\n        const newTracks = this.#domTracks();\n        for (const oldTrack of this.#prevTracks){\n            if (!newTracks.some((t)=>t.id === oldTrack.id)) {\n                const track = oldTrack.id && this.#media.textTracks.getById(oldTrack.id);\n                if (track) this.#media.textTracks.remove(track);\n            }\n        }\n        for (const newTrack of newTracks){\n            const id = newTrack.id || TextTrack.createId(newTrack);\n            if (!this.#media.textTracks.getById(id)) {\n                newTrack.id = id;\n                this.#media.textTracks.add(newTrack);\n            }\n        }\n        this.#prevTracks = newTracks;\n    }\n}\nclass MediaProvider extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            loaders: []\n        };\n    }\n    static{\n        this.state = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.State({\n            loader: null\n        });\n    }\n    #media;\n    #sources;\n    #domSources;\n    #domTracks;\n    #loader;\n    onSetup() {\n        this.#media = useMediaContext();\n        this.#sources = new SourceSelection(this.#domSources, this.#media, this.$state.loader, this.$props.loaders());\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-provider\", \"\");\n    }\n    onConnect(el) {\n        this.#sources.connect();\n        new Tracks(this.#domTracks, this.#media);\n        const resize = new ResizeObserver((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.animationFrameThrottle)(this.#onResize.bind(this)));\n        resize.observe(el);\n        const mutations = new MutationObserver(this.#onMutation.bind(this));\n        mutations.observe(el, {\n            attributes: true,\n            childList: true\n        });\n        this.#onResize();\n        this.#onMutation();\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            resize.disconnect();\n            mutations.disconnect();\n        });\n    }\n    #loadRafId;\n    load(target) {\n        target?.setAttribute(\"aria-hidden\", \"true\");\n        window.cancelAnimationFrame(this.#loadRafId);\n        this.#loadRafId = requestAnimationFrame(()=>this.#runLoader(target));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            window.cancelAnimationFrame(this.#loadRafId);\n        });\n    }\n    #runLoader(target) {\n        if (!this.scope) return;\n        const loader = this.$state.loader(), { $provider } = this.#media;\n        if (this.#loader === loader && loader?.target === target && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)($provider)) return;\n        this.#destroyProvider();\n        this.#loader = loader;\n        if (loader) loader.target = target || null;\n        if (!loader || !target) return;\n        loader.load(this.#media).then((provider)=>{\n            if (!this.scope) return;\n            if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$state.loader) !== loader) return;\n            this.#media.notify(\"provider-change\", provider);\n        });\n    }\n    onDestroy() {\n        this.#loader = null;\n        this.#destroyProvider();\n    }\n    #destroyProvider() {\n        this.#media?.notify(\"provider-change\", null);\n    }\n    #onResize() {\n        if (!this.el) return;\n        const { player, $state } = this.#media, width = this.el.offsetWidth, height = this.el.offsetHeight;\n        if (!player) return;\n        $state.mediaWidth.set(width);\n        $state.mediaHeight.set(height);\n        if (player.el) {\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(player.el, \"--media-width\", width + \"px\");\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(player.el, \"--media-height\", height + \"px\");\n        }\n    }\n    #onMutation() {\n        const sources = [], tracks = [], children = this.el.children;\n        for (const el of children){\n            if (el.hasAttribute(\"data-vds\")) continue;\n            if (el instanceof HTMLSourceElement) {\n                const src = {\n                    id: el.id,\n                    src: el.src,\n                    type: el.type\n                };\n                for (const prop of [\n                    \"id\",\n                    \"src\",\n                    \"width\",\n                    \"height\",\n                    \"bitrate\",\n                    \"codec\"\n                ]){\n                    const value = el.getAttribute(`data-${prop}`);\n                    if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(value)) src[prop] = /id|src|codec/.test(prop) ? value : Number(value);\n                }\n                sources.push(src);\n            } else if (el instanceof HTMLTrackElement) {\n                const track = {\n                    src: el.src,\n                    kind: el.track.kind,\n                    language: el.srclang,\n                    label: el.label,\n                    default: el.default,\n                    type: el.getAttribute(\"data-type\")\n                };\n                tracks.push({\n                    id: el.id || TextTrack.createId(track),\n                    ...track\n                });\n            }\n        }\n        this.#domSources.set(sources);\n        this.#domTracks.set(tracks);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.tick)();\n    }\n    constructor(...args){\n        super(...args), this.#domSources = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)([]), this.#domTracks = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)([]), this.#loader = null, this.#loadRafId = -1;\n    }\n}\nconst mediaprovider__proto = MediaProvider.prototype;\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.method)(mediaprovider__proto, \"load\");\nclass MediaAnnouncer extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            translations: null\n        };\n    }\n    static{\n        this.state = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.State({\n            label: null,\n            busy: false\n        });\n    }\n    #media;\n    #initializing;\n    onSetup() {\n        this.#media = useMediaContext();\n    }\n    onAttach(el) {\n        el.style.display = \"contents\";\n    }\n    onConnect(el) {\n        el.setAttribute(\"data-media-announcer\", \"\");\n        setAttributeIfEmpty(el, \"role\", \"status\");\n        setAttributeIfEmpty(el, \"aria-live\", \"polite\");\n        const { busy } = this.$state;\n        this.setAttributes({\n            \"aria-busy\": ()=>busy() ? \"true\" : null\n        });\n        this.#initializing = true;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchPaused.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchVolume.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchCaptions.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchFullscreen.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchPiP.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchSeeking.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchLabel.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.tick)();\n        this.#initializing = false;\n    }\n    #watchPaused() {\n        const { paused } = this.#media.$state;\n        this.#setLabel(!paused() ? \"Play\" : \"Pause\");\n    }\n    #watchFullscreen() {\n        const { fullscreen } = this.#media.$state;\n        this.#setLabel(fullscreen() ? \"Enter Fullscreen\" : \"Exit Fullscreen\");\n    }\n    #watchPiP() {\n        const { pictureInPicture } = this.#media.$state;\n        this.#setLabel(pictureInPicture() ? \"Enter PiP\" : \"Exit PiP\");\n    }\n    #watchCaptions() {\n        const { textTrack } = this.#media.$state;\n        this.#setLabel(textTrack() ? \"Closed-Captions On\" : \"Closed-Captions Off\");\n    }\n    #watchVolume() {\n        const { muted, volume, audioGain } = this.#media.$state;\n        this.#setLabel(muted() || volume() === 0 ? \"Mute\" : `${Math.round(volume() * (audioGain() ?? 1) * 100)}% ${this.#translate(\"Volume\")}`);\n    }\n    #startedSeekingAt;\n    #seekTimer;\n    #watchSeeking() {\n        const { seeking, currentTime } = this.#media.$state, isSeeking = seeking();\n        if (this.#startedSeekingAt > 0) {\n            window.clearTimeout(this.#seekTimer);\n            this.#seekTimer = window.setTimeout(()=>{\n                if (!this.scope) return;\n                const newTime = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(currentTime), seconds = Math.abs(newTime - this.#startedSeekingAt);\n                if (seconds >= 1) {\n                    const isForward = newTime >= this.#startedSeekingAt, spokenTime = formatSpokenTime(seconds);\n                    this.#setLabel(`${this.#translate(isForward ? \"Seek Forward\" : \"Seek Backward\")} ${spokenTime}`);\n                }\n                this.#startedSeekingAt = -1;\n                this.#seekTimer = -1;\n            }, 300);\n        } else if (isSeeking) {\n            this.#startedSeekingAt = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(currentTime);\n        }\n    }\n    #translate(word) {\n        const { translations } = this.$props;\n        return translations?.()?.[word || \"\"] ?? word;\n    }\n    #watchLabel() {\n        const { label, busy } = this.$state, $label = this.#translate(label());\n        if (this.#initializing) return;\n        busy.set(true);\n        const id = window.setTimeout(()=>void busy.set(false), 150);\n        this.el && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this.el, \"aria-label\", $label);\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)($label)) {\n            this.dispatch(\"change\", {\n                detail: $label\n            });\n        }\n        return ()=>window.clearTimeout(id);\n    }\n    #setLabel(word) {\n        const { label } = this.$state;\n        label.set(word);\n    }\n    constructor(...args){\n        super(...args), this.#initializing = false, this.#startedSeekingAt = -1, this.#seekTimer = -1;\n    }\n}\nclass Controls extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            hideDelay: 2e3,\n            hideOnMouseLeave: false\n        };\n    }\n    #media;\n    onSetup() {\n        this.#media = useMediaContext();\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchProps.bind(this));\n    }\n    onAttach(el) {\n        const { pictureInPicture, fullscreen } = this.#media.$state;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(el, \"pointer-events\", \"none\");\n        setAttributeIfEmpty(el, \"role\", \"group\");\n        this.setAttributes({\n            \"data-visible\": this.#isShowing.bind(this),\n            \"data-fullscreen\": fullscreen,\n            \"data-pip\": pictureInPicture\n        });\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            this.dispatch(\"change\", {\n                detail: this.#isShowing()\n            });\n        });\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#hideControls.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            const isFullscreen = fullscreen();\n            for (const side of [\n                \"top\",\n                \"right\",\n                \"bottom\",\n                \"left\"\n            ]){\n                (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(el, `padding-${side}`, isFullscreen && `env(safe-area-inset-${side})`);\n            }\n        });\n    }\n    #hideControls() {\n        if (!this.el) return;\n        const { nativeControls } = this.#media.$state, isHidden = nativeControls();\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this.el, \"aria-hidden\", isHidden ? \"true\" : null);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(this.el, \"display\", isHidden ? \"none\" : null);\n    }\n    #watchProps() {\n        const { controls } = this.#media.player, { hideDelay, hideOnMouseLeave } = this.$props;\n        controls.defaultDelay = hideDelay() === 2e3 ? this.#media.$props.controlsDelay() : hideDelay();\n        controls.hideOnMouseLeave = hideOnMouseLeave();\n    }\n    #isShowing() {\n        const { controlsVisible } = this.#media.$state;\n        return controlsVisible();\n    }\n}\nclass ControlsGroup extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    onAttach(el) {\n        if (!el.style.pointerEvents) (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(el, \"pointer-events\", \"auto\");\n    }\n}\nclass Popper extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    #delegate;\n    constructor(delegate){\n        super(), this.#showTimerId = -1, this.#hideRafId = -1, this.#stopAnimationEndListener = null;\n        this.#delegate = delegate;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchTrigger.bind(this));\n    }\n    onDestroy() {\n        this.#stopAnimationEndListener?.();\n        this.#stopAnimationEndListener = null;\n    }\n    #watchTrigger() {\n        const trigger = this.#delegate.trigger();\n        if (!trigger) {\n            this.hide();\n            return;\n        }\n        const show = this.show.bind(this), hide = this.hide.bind(this);\n        this.#delegate.listen(trigger, show, hide);\n    }\n    #showTimerId;\n    #hideRafId;\n    #stopAnimationEndListener;\n    show(trigger) {\n        this.#cancelShowing();\n        window.cancelAnimationFrame(this.#hideRafId);\n        this.#hideRafId = -1;\n        this.#stopAnimationEndListener?.();\n        this.#stopAnimationEndListener = null;\n        this.#showTimerId = window.setTimeout(()=>{\n            this.#showTimerId = -1;\n            const content = this.#delegate.content();\n            if (content) content.style.removeProperty(\"display\");\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(()=>this.#delegate.onChange(true, trigger));\n        }, this.#delegate.showDelay?.() ?? 0);\n    }\n    hide(trigger) {\n        this.#cancelShowing();\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(()=>this.#delegate.onChange(false, trigger));\n        this.#hideRafId = requestAnimationFrame(()=>{\n            this.#cancelShowing();\n            this.#hideRafId = -1;\n            const content = this.#delegate.content();\n            if (content) {\n                const onHide = ()=>{\n                    content.style.display = \"none\";\n                    this.#stopAnimationEndListener = null;\n                };\n                const isAnimated = hasAnimation(content);\n                if (isAnimated) {\n                    this.#stopAnimationEndListener?.();\n                    const stop = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(content, \"animationend\", onHide, {\n                        once: true\n                    });\n                    this.#stopAnimationEndListener = stop;\n                } else {\n                    onHide();\n                }\n            }\n        });\n    }\n    #cancelShowing() {\n        window.clearTimeout(this.#showTimerId);\n        this.#showTimerId = -1;\n    }\n}\nconst tooltipContext = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nlet id = 0;\nclass Tooltip extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            showDelay: 700\n        };\n    }\n    #id;\n    #trigger;\n    #content;\n    #showing;\n    constructor(){\n        super(), this.#id = `media-tooltip-${++id}`, this.#trigger = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null), this.#content = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null), this.#showing = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n        new FocusVisibleController();\n        const { showDelay } = this.$props;\n        new Popper({\n            trigger: this.#trigger,\n            content: this.#content,\n            showDelay,\n            listen (trigger, show, hide) {\n                (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n                    if ($keyboard()) (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(trigger, \"focus\", show);\n                    (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(trigger, \"blur\", hide);\n                });\n                new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(trigger).add(\"touchstart\", (e)=>e.preventDefault(), {\n                    passive: false\n                }).add(\"mouseenter\", show).add(\"mouseleave\", hide);\n            },\n            onChange: this.#onShowingChange.bind(this)\n        });\n    }\n    onAttach(el) {\n        el.style.setProperty(\"display\", \"contents\");\n    }\n    onSetup() {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(tooltipContext, {\n            trigger: this.#trigger,\n            content: this.#content,\n            showing: this.#showing,\n            attachTrigger: this.#attachTrigger.bind(this),\n            detachTrigger: this.#detachTrigger.bind(this),\n            attachContent: this.#attachContent.bind(this),\n            detachContent: this.#detachContent.bind(this)\n        });\n    }\n    #attachTrigger(el) {\n        this.#trigger.set(el);\n        let tooltipName = el.getAttribute(\"data-media-tooltip\");\n        if (tooltipName) {\n            this.el?.setAttribute(`data-media-${tooltipName}-tooltip`, \"\");\n        }\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-describedby\", this.#id);\n    }\n    #detachTrigger(el) {\n        el.removeAttribute(\"data-describedby\");\n        el.removeAttribute(\"aria-describedby\");\n        this.#trigger.set(null);\n    }\n    #attachContent(el) {\n        el.setAttribute(\"id\", this.#id);\n        el.style.display = \"none\";\n        setAttributeIfEmpty(el, \"role\", \"tooltip\");\n        this.#content.set(el);\n    }\n    #detachContent(el) {\n        el.removeAttribute(\"id\");\n        el.removeAttribute(\"role\");\n        this.#content.set(null);\n    }\n    #onShowingChange(isShowing) {\n        const trigger = this.#trigger(), content = this.#content();\n        if (trigger) {\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(trigger, \"aria-describedby\", isShowing ? this.#id : null);\n        }\n        for (const el of [\n            this.el,\n            trigger,\n            content\n        ]){\n            el && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-visible\", isShowing);\n        }\n        this.#showing.set(isShowing);\n    }\n}\nclass TooltipTrigger extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    constructor(){\n        super();\n        new FocusVisibleController();\n    }\n    onConnect(el) {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(requestScopedAnimationFrame(()=>{\n            if (!this.connectScope) return;\n            this.#attach();\n            const tooltip = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(tooltipContext);\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n                const button = this.#getButton();\n                button && tooltip.detachTrigger(button);\n            });\n        }));\n    }\n    #attach() {\n        const button = this.#getButton(), tooltip = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(tooltipContext);\n        button && tooltip.attachTrigger(button);\n    }\n    #getButton() {\n        const candidate = this.el.firstElementChild;\n        return candidate?.localName === \"button\" || candidate?.getAttribute(\"role\") === \"button\" ? candidate : this.el;\n    }\n}\nclass TooltipContent extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            placement: \"top center\",\n            offset: 0,\n            alignOffset: 0\n        };\n    }\n    constructor(){\n        super();\n        new FocusVisibleController();\n        const { placement } = this.$props;\n        this.setAttributes({\n            \"data-placement\": placement\n        });\n    }\n    onAttach(el) {\n        this.#attach(el);\n        Object.assign(el.style, {\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            width: \"max-content\"\n        });\n    }\n    onConnect(el) {\n        this.#attach(el);\n        const tooltip = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(tooltipContext);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>tooltip.detachContent(el));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(requestScopedAnimationFrame(()=>{\n            if (!this.connectScope) return;\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchPlacement.bind(this));\n        }));\n    }\n    #attach(el) {\n        const tooltip = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(tooltipContext);\n        tooltip.attachContent(el);\n    }\n    #watchPlacement() {\n        const { showing } = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(tooltipContext);\n        if (!showing()) return;\n        const { placement, offset: mainOffset, alignOffset } = this.$props;\n        return autoPlacement(this.el, this.#getTrigger(), placement(), {\n            offsetVarName: \"media-tooltip\",\n            xOffset: alignOffset(),\n            yOffset: mainOffset()\n        });\n    }\n    #getTrigger() {\n        return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(tooltipContext).trigger();\n    }\n}\nclass ToggleButtonController extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    static{\n        this.props = {\n            disabled: false\n        };\n    }\n    #delegate;\n    constructor(delegate){\n        super();\n        this.#delegate = delegate;\n        new FocusVisibleController();\n        if (delegate.keyShortcut) {\n            new ARIAKeyShortcuts(delegate.keyShortcut);\n        }\n    }\n    onSetup() {\n        const { disabled } = this.$props;\n        this.setAttributes({\n            \"data-pressed\": this.#delegate.isPresssed,\n            \"aria-pressed\": this.#isARIAPressed.bind(this),\n            \"aria-disabled\": ()=>disabled() ? \"true\" : null\n        });\n    }\n    onAttach(el) {\n        setAttributeIfEmpty(el, \"tabindex\", \"0\");\n        setAttributeIfEmpty(el, \"role\", \"button\");\n        setAttributeIfEmpty(el, \"type\", \"button\");\n    }\n    onConnect(el) {\n        const events = onPress(el, this.#onMaybePress.bind(this));\n        for (const type of [\n            \"click\",\n            \"touchstart\"\n        ]){\n            events.add(type, this.#onInteraction.bind(this), {\n                passive: true\n            });\n        }\n    }\n    #isARIAPressed() {\n        return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.ariaBool)(this.#delegate.isPresssed());\n    }\n    #onPressed(event1) {\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isWriteSignal)(this.#delegate.isPresssed)) {\n            this.#delegate.isPresssed.set((p)=>!p);\n        }\n    }\n    #onMaybePress(event1) {\n        const disabled = this.$props.disabled() || this.el.hasAttribute(\"data-disabled\");\n        if (disabled) {\n            event1.preventDefault();\n            event1.stopImmediatePropagation();\n            return;\n        }\n        event1.preventDefault();\n        (this.#delegate.onPress ?? this.#onPressed).call(this, event1);\n    }\n    #onInteraction(event1) {\n        if (this.$props.disabled()) {\n            event1.preventDefault();\n            event1.stopImmediatePropagation();\n        }\n    }\n}\nclass ToggleButton extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            disabled: false,\n            defaultPressed: false\n        };\n    }\n    #pressed;\n    /**\n   * Whether the toggle is currently in a `pressed` state.\n   */ get pressed() {\n        return this.#pressed();\n    }\n    constructor(){\n        super(), this.#pressed = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false);\n        new ToggleButtonController({\n            isPresssed: this.#pressed\n        });\n    }\n}\nconst togglebutton__proto = ToggleButton.prototype;\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(togglebutton__proto, \"pressed\");\nclass AirPlayButton extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = ToggleButtonController.props;\n    }\n    #media;\n    constructor(){\n        super();\n        new ToggleButtonController({\n            isPresssed: this.#isPressed.bind(this),\n            onPress: this.#onPress.bind(this)\n        });\n    }\n    onSetup() {\n        this.#media = useMediaContext();\n        const { canAirPlay, isAirPlayConnected } = this.#media.$state;\n        this.setAttributes({\n            \"data-active\": isAirPlayConnected,\n            \"data-supported\": canAirPlay,\n            \"data-state\": this.#getState.bind(this),\n            \"aria-hidden\": $ariaBool(()=>!canAirPlay())\n        });\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-tooltip\", \"airplay\");\n        setARIALabel(el, this.#getDefaultLabel.bind(this));\n    }\n    #onPress(event1) {\n        const remote = this.#media.remote;\n        remote.requestAirPlay(event1);\n    }\n    #isPressed() {\n        const { remotePlaybackType, remotePlaybackState } = this.#media.$state;\n        return remotePlaybackType() === \"airplay\" && remotePlaybackState() !== \"disconnected\";\n    }\n    #getState() {\n        const { remotePlaybackType, remotePlaybackState } = this.#media.$state;\n        return remotePlaybackType() === \"airplay\" && remotePlaybackState();\n    }\n    #getDefaultLabel() {\n        const { remotePlaybackState } = this.#media.$state;\n        return `AirPlay ${remotePlaybackState()}`;\n    }\n}\nclass GoogleCastButton extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = ToggleButtonController.props;\n    }\n    #media;\n    constructor(){\n        super();\n        new ToggleButtonController({\n            isPresssed: this.#isPressed.bind(this),\n            onPress: this.#onPress.bind(this)\n        });\n    }\n    onSetup() {\n        this.#media = useMediaContext();\n        const { canGoogleCast, isGoogleCastConnected } = this.#media.$state;\n        this.setAttributes({\n            \"data-active\": isGoogleCastConnected,\n            \"data-supported\": canGoogleCast,\n            \"data-state\": this.#getState.bind(this),\n            \"aria-hidden\": $ariaBool(()=>!canGoogleCast())\n        });\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-tooltip\", \"google-cast\");\n        setARIALabel(el, this.#getDefaultLabel.bind(this));\n    }\n    #onPress(event1) {\n        const remote = this.#media.remote;\n        remote.requestGoogleCast(event1);\n    }\n    #isPressed() {\n        const { remotePlaybackType, remotePlaybackState } = this.#media.$state;\n        return remotePlaybackType() === \"google-cast\" && remotePlaybackState() !== \"disconnected\";\n    }\n    #getState() {\n        const { remotePlaybackType, remotePlaybackState } = this.#media.$state;\n        return remotePlaybackType() === \"google-cast\" && remotePlaybackState();\n    }\n    #getDefaultLabel() {\n        const { remotePlaybackState } = this.#media.$state;\n        return `Google Cast ${remotePlaybackState()}`;\n    }\n}\nclass PlayButton extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = ToggleButtonController.props;\n    }\n    #media;\n    constructor(){\n        super();\n        new ToggleButtonController({\n            isPresssed: this.#isPressed.bind(this),\n            keyShortcut: \"togglePaused\",\n            onPress: this.#onPress.bind(this)\n        });\n    }\n    onSetup() {\n        this.#media = useMediaContext();\n        const { paused, ended } = this.#media.$state;\n        this.setAttributes({\n            \"data-paused\": paused,\n            \"data-ended\": ended\n        });\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-tooltip\", \"play\");\n        setARIALabel(el, \"Play\");\n    }\n    #onPress(event1) {\n        const remote = this.#media.remote;\n        this.#isPressed() ? remote.pause(event1) : remote.play(event1);\n    }\n    #isPressed() {\n        const { paused } = this.#media.$state;\n        return !paused();\n    }\n}\nclass CaptionButton extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = ToggleButtonController.props;\n    }\n    #media;\n    constructor(){\n        super();\n        new ToggleButtonController({\n            isPresssed: this.#isPressed.bind(this),\n            keyShortcut: \"toggleCaptions\",\n            onPress: this.#onPress.bind(this)\n        });\n    }\n    onSetup() {\n        this.#media = useMediaContext();\n        this.setAttributes({\n            \"data-active\": this.#isPressed.bind(this),\n            \"data-supported\": ()=>!this.#isHidden(),\n            \"aria-hidden\": $ariaBool(this.#isHidden.bind(this))\n        });\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-tooltip\", \"caption\");\n        setARIALabel(el, \"Captions\");\n    }\n    #onPress(event1) {\n        this.#media.remote.toggleCaptions(event1);\n    }\n    #isPressed() {\n        const { textTrack } = this.#media.$state, track = textTrack();\n        return !!track && isTrackCaptionKind(track);\n    }\n    #isHidden() {\n        const { hasCaptions } = this.#media.$state;\n        return !hasCaptions();\n    }\n}\nclass FullscreenButton extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            ...ToggleButtonController.props,\n            target: \"prefer-media\"\n        };\n    }\n    #media;\n    constructor(){\n        super();\n        new ToggleButtonController({\n            isPresssed: this.#isPressed.bind(this),\n            keyShortcut: \"toggleFullscreen\",\n            onPress: this.#onPress.bind(this)\n        });\n    }\n    onSetup() {\n        this.#media = useMediaContext();\n        const { fullscreen } = this.#media.$state, isSupported = this.#isSupported.bind(this);\n        this.setAttributes({\n            \"data-active\": fullscreen,\n            \"data-supported\": isSupported,\n            \"aria-hidden\": $ariaBool(()=>!isSupported())\n        });\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-tooltip\", \"fullscreen\");\n        setARIALabel(el, \"Fullscreen\");\n    }\n    #onPress(event1) {\n        const remote = this.#media.remote, target = this.$props.target();\n        this.#isPressed() ? remote.exitFullscreen(target, event1) : remote.enterFullscreen(target, event1);\n    }\n    #isPressed() {\n        const { fullscreen } = this.#media.$state;\n        return fullscreen();\n    }\n    #isSupported() {\n        const { canFullscreen } = this.#media.$state;\n        return canFullscreen();\n    }\n}\nclass MuteButton extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = ToggleButtonController.props;\n    }\n    #media;\n    constructor(){\n        super();\n        new ToggleButtonController({\n            isPresssed: this.#isPressed.bind(this),\n            keyShortcut: \"toggleMuted\",\n            onPress: this.#onPress.bind(this)\n        });\n    }\n    onSetup() {\n        this.#media = useMediaContext();\n        this.setAttributes({\n            \"data-muted\": this.#isPressed.bind(this),\n            \"data-state\": this.#getState.bind(this)\n        });\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-mute-button\", \"\");\n        el.setAttribute(\"data-media-tooltip\", \"mute\");\n        setARIALabel(el, \"Mute\");\n    }\n    #onPress(event1) {\n        const remote = this.#media.remote;\n        this.#isPressed() ? remote.unmute(event1) : remote.mute(event1);\n    }\n    #isPressed() {\n        const { muted, volume } = this.#media.$state;\n        return muted() || volume() === 0;\n    }\n    #getState() {\n        const { muted, volume } = this.#media.$state, $volume = volume();\n        if (muted() || $volume === 0) return \"muted\";\n        else if ($volume >= 0.5) return \"high\";\n        else if ($volume < 0.5) return \"low\";\n    }\n}\nclass PIPButton extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = ToggleButtonController.props;\n    }\n    #media;\n    constructor(){\n        super();\n        new ToggleButtonController({\n            isPresssed: this.#isPressed.bind(this),\n            keyShortcut: \"togglePictureInPicture\",\n            onPress: this.#onPress.bind(this)\n        });\n    }\n    onSetup() {\n        this.#media = useMediaContext();\n        const { pictureInPicture } = this.#media.$state, isSupported = this.#isSupported.bind(this);\n        this.setAttributes({\n            \"data-active\": pictureInPicture,\n            \"data-supported\": isSupported,\n            \"aria-hidden\": $ariaBool(()=>!isSupported())\n        });\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-tooltip\", \"pip\");\n        setARIALabel(el, \"PiP\");\n    }\n    #onPress(event1) {\n        const remote = this.#media.remote;\n        this.#isPressed() ? remote.exitPictureInPicture(event1) : remote.enterPictureInPicture(event1);\n    }\n    #isPressed() {\n        const { pictureInPicture } = this.#media.$state;\n        return pictureInPicture();\n    }\n    #isSupported() {\n        const { canPictureInPicture } = this.#media.$state;\n        return canPictureInPicture();\n    }\n}\nclass SeekButton extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            disabled: false,\n            seconds: 30\n        };\n    }\n    #media;\n    constructor(){\n        super();\n        new FocusVisibleController();\n    }\n    onSetup() {\n        this.#media = useMediaContext();\n        const { seeking } = this.#media.$state, { seconds } = this.$props, isSupported = this.#isSupported.bind(this);\n        this.setAttributes({\n            seconds,\n            \"data-seeking\": seeking,\n            \"data-supported\": isSupported,\n            \"aria-hidden\": $ariaBool(()=>!isSupported())\n        });\n    }\n    onAttach(el) {\n        setAttributeIfEmpty(el, \"tabindex\", \"0\");\n        setAttributeIfEmpty(el, \"role\", \"button\");\n        setAttributeIfEmpty(el, \"type\", \"button\");\n        el.setAttribute(\"data-media-tooltip\", \"seek\");\n        setARIALabel(el, this.#getDefaultLabel.bind(this));\n    }\n    onConnect(el) {\n        onPress(el, this.#onPress.bind(this));\n    }\n    #isSupported() {\n        const { canSeek } = this.#media.$state;\n        return canSeek();\n    }\n    #getDefaultLabel() {\n        const { seconds } = this.$props;\n        return `Seek ${seconds() > 0 ? \"forward\" : \"backward\"} ${seconds()} seconds`;\n    }\n    #onPress(event1) {\n        const { seconds, disabled } = this.$props;\n        if (disabled()) return;\n        const { currentTime } = this.#media.$state, seekTo = currentTime() + seconds();\n        this.#media.remote.seek(seekTo, event1);\n    }\n}\nclass LiveButton extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            disabled: false\n        };\n    }\n    #media;\n    constructor(){\n        super();\n        new FocusVisibleController();\n    }\n    onSetup() {\n        this.#media = useMediaContext();\n        const { disabled } = this.$props, { live, liveEdge } = this.#media.$state, isHidden = ()=>!live();\n        this.setAttributes({\n            \"data-edge\": liveEdge,\n            \"data-hidden\": isHidden,\n            \"aria-disabled\": $ariaBool(()=>disabled() || liveEdge()),\n            \"aria-hidden\": $ariaBool(isHidden)\n        });\n    }\n    onAttach(el) {\n        setAttributeIfEmpty(el, \"tabindex\", \"0\");\n        setAttributeIfEmpty(el, \"role\", \"button\");\n        setAttributeIfEmpty(el, \"type\", \"button\");\n        el.setAttribute(\"data-media-tooltip\", \"live\");\n    }\n    onConnect(el) {\n        onPress(el, this.#onPress.bind(this));\n    }\n    #onPress(event1) {\n        const { disabled } = this.$props, { liveEdge } = this.#media.$state;\n        if (disabled() || liveEdge()) return;\n        this.#media.remote.seekToLiveEdge(event1);\n    }\n}\nconst sliderState = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.State({\n    min: 0,\n    max: 100,\n    value: 0,\n    step: 1,\n    pointerValue: 0,\n    focused: false,\n    dragging: false,\n    pointing: false,\n    hidden: false,\n    get active () {\n        return this.dragging || this.focused || this.pointing;\n    },\n    get fillRate () {\n        return calcRate(this.min, this.max, this.value);\n    },\n    get fillPercent () {\n        return this.fillRate * 100;\n    },\n    get pointerRate () {\n        return calcRate(this.min, this.max, this.pointerValue);\n    },\n    get pointerPercent () {\n        return this.pointerRate * 100;\n    }\n});\nfunction calcRate(min, max, value) {\n    const range = max - min, offset = value - min;\n    return range > 0 ? offset / range : 0;\n}\nclass IntersectionObserverController extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    #init;\n    #observer;\n    constructor(init){\n        super();\n        this.#init = init;\n    }\n    onConnect(el) {\n        this.#observer = new IntersectionObserver((entries)=>{\n            this.#init.callback?.(entries, this.#observer);\n        }, this.#init);\n        this.#observer.observe(el);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this.#onDisconnect.bind(this));\n    }\n    /**\n   * Disconnect any active intersection observers.\n   */ #onDisconnect() {\n        this.#observer?.disconnect();\n        this.#observer = void 0;\n    }\n}\nconst sliderContext = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nconst sliderObserverContext = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nfunction getClampedValue(min, max, value, step) {\n    return clampNumber(min, round(value, getNumberOfDecimalPlaces(step)), max);\n}\nfunction getValueFromRate(min, max, rate, step) {\n    const boundRate = clampNumber(0, rate, 1), range = max - min, fill = range * boundRate, stepRatio = fill / step, steps = step * Math.round(stepRatio);\n    return min + steps;\n}\nconst SliderKeyDirection = {\n    Left: -1,\n    ArrowLeft: -1,\n    Up: 1,\n    ArrowUp: 1,\n    Right: 1,\n    ArrowRight: 1,\n    Down: -1,\n    ArrowDown: -1\n};\nclass SliderEventsController extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    #delegate;\n    #media;\n    #observer;\n    constructor(delegate, media){\n        super(), this.#provider = null, this.#touch = null, this.#touchStartValue = null, this.#repeatedKeys = false, this.#onDocumentPointerMove = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.functionThrottle)((event1)=>{\n            this.#updatePointerValue(this.#getPointerValue(event1), event1);\n        }, 20, {\n            leading: true\n        });\n        this.#delegate = delegate;\n        this.#media = media;\n    }\n    onSetup() {\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(sliderObserverContext)) {\n            this.#observer = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(sliderObserverContext);\n        }\n    }\n    onConnect(el) {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#attachEventListeners.bind(this, el));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#attachPointerListeners.bind(this, el));\n        if (this.#delegate.swipeGesture) (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchSwipeGesture.bind(this));\n    }\n    #watchSwipeGesture() {\n        const { pointer } = this.#media.$state;\n        if (pointer() !== \"coarse\" || !this.#delegate.swipeGesture()) {\n            this.#provider = null;\n            return;\n        }\n        this.#provider = this.#media.player.el?.querySelector(\"media-provider,[data-media-provider]\");\n        if (!this.#provider) return;\n        new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(this.#provider).add(\"touchstart\", this.#onTouchStart.bind(this), {\n            passive: true\n        }).add(\"touchmove\", this.#onTouchMove.bind(this), {\n            passive: false\n        });\n    }\n    #provider;\n    #touch;\n    #touchStartValue;\n    #onTouchStart(event1) {\n        this.#touch = event1.touches[0];\n    }\n    #onTouchMove(event1) {\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNull)(this.#touch) || isTouchPinchEvent(event1)) return;\n        const touch = event1.touches[0], xDiff = touch.clientX - this.#touch.clientX, yDiff = touch.clientY - this.#touch.clientY, isDragging = this.$state.dragging();\n        if (!isDragging && Math.abs(yDiff) > 5) {\n            return;\n        }\n        if (isDragging) return;\n        event1.preventDefault();\n        if (Math.abs(xDiff) > 20) {\n            this.#touch = touch;\n            this.#touchStartValue = this.$state.value();\n            this.#onStartDragging(this.#touchStartValue, event1);\n        }\n    }\n    #attachEventListeners(el) {\n        const { hidden } = this.$props;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(el, \"focus\", this.#onFocus.bind(this));\n        if (hidden() || this.#delegate.isDisabled()) return;\n        new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(el).add(\"keyup\", this.#onKeyUp.bind(this)).add(\"keydown\", this.#onKeyDown.bind(this)).add(\"pointerenter\", this.#onPointerEnter.bind(this)).add(\"pointermove\", this.#onPointerMove.bind(this)).add(\"pointerleave\", this.#onPointerLeave.bind(this)).add(\"pointerdown\", this.#onPointerDown.bind(this));\n    }\n    #attachPointerListeners(el) {\n        if (this.#delegate.isDisabled() || !this.$state.dragging()) return;\n        new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(document).add(\"pointerup\", this.#onDocumentPointerUp.bind(this), {\n            capture: true\n        }).add(\"pointermove\", this.#onDocumentPointerMove.bind(this)).add(\"touchmove\", this.#onDocumentTouchMove.bind(this), {\n            passive: false\n        });\n    }\n    #onFocus() {\n        this.#updatePointerValue(this.$state.value());\n    }\n    #updateValue(newValue, trigger) {\n        const { value, min, max, dragging } = this.$state;\n        const clampedValue = Math.max(min(), Math.min(newValue, max()));\n        value.set(clampedValue);\n        const event1 = this.createEvent(\"value-change\", {\n            detail: clampedValue,\n            trigger\n        });\n        this.dispatch(event1);\n        this.#delegate.onValueChange?.(event1);\n        if (dragging()) {\n            const event2 = this.createEvent(\"drag-value-change\", {\n                detail: clampedValue,\n                trigger\n            });\n            this.dispatch(event2);\n            this.#delegate.onDragValueChange?.(event2);\n        }\n    }\n    #updatePointerValue(value, trigger) {\n        const { pointerValue, dragging } = this.$state;\n        pointerValue.set(value);\n        this.dispatch(\"pointer-value-change\", {\n            detail: value,\n            trigger\n        });\n        if (dragging()) {\n            this.#updateValue(value, trigger);\n        }\n    }\n    #getPointerValue(event1) {\n        let thumbPositionRate, rect = this.el.getBoundingClientRect(), { min, max } = this.$state;\n        if (this.$props.orientation() === \"vertical\") {\n            const { bottom: trackBottom, height: trackHeight } = rect;\n            thumbPositionRate = (trackBottom - event1.clientY) / trackHeight;\n        } else {\n            if (this.#touch && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(this.#touchStartValue)) {\n                const { width } = this.#provider.getBoundingClientRect(), rate = (event1.clientX - this.#touch.clientX) / width, range = max() - min(), diff = range * Math.abs(rate);\n                thumbPositionRate = (rate < 0 ? this.#touchStartValue - diff : this.#touchStartValue + diff) / range;\n            } else {\n                const { left: trackLeft, width: trackWidth } = rect;\n                thumbPositionRate = (event1.clientX - trackLeft) / trackWidth;\n            }\n        }\n        return Math.max(min(), Math.min(max(), this.#delegate.roundValue(getValueFromRate(min(), max(), thumbPositionRate, this.#delegate.getStep()))));\n    }\n    #onPointerEnter(event1) {\n        this.$state.pointing.set(true);\n    }\n    #onPointerMove(event1) {\n        const { dragging } = this.$state;\n        if (dragging()) return;\n        this.#updatePointerValue(this.#getPointerValue(event1), event1);\n    }\n    #onPointerLeave(event1) {\n        this.$state.pointing.set(false);\n    }\n    #onPointerDown(event1) {\n        if (event1.button !== 0) return;\n        const value = this.#getPointerValue(event1);\n        this.#onStartDragging(value, event1);\n        this.#updatePointerValue(value, event1);\n    }\n    #onStartDragging(value, trigger) {\n        const { dragging } = this.$state;\n        if (dragging()) return;\n        dragging.set(true);\n        this.#media.remote.pauseControls(trigger);\n        const event1 = this.createEvent(\"drag-start\", {\n            detail: value,\n            trigger\n        });\n        this.dispatch(event1);\n        this.#delegate.onDragStart?.(event1);\n        this.#observer?.onDragStart?.();\n    }\n    #onStopDragging(value, trigger) {\n        const { dragging } = this.$state;\n        if (!dragging()) return;\n        dragging.set(false);\n        this.#media.remote.resumeControls(trigger);\n        const event1 = this.createEvent(\"drag-end\", {\n            detail: value,\n            trigger\n        });\n        this.dispatch(event1);\n        this.#delegate.onDragEnd?.(event1);\n        this.#touch = null;\n        this.#touchStartValue = null;\n        this.#observer?.onDragEnd?.();\n    }\n    // -------------------------------------------------------------------------------------------\n    // Keyboard Events\n    // -------------------------------------------------------------------------------------------\n    #lastDownKey;\n    #repeatedKeys;\n    #onKeyDown(event1) {\n        const isValidKey = Object.keys(SliderKeyDirection).includes(event1.key);\n        if (!isValidKey) return;\n        const { key } = event1, jumpValue = this.#calcJumpValue(event1);\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNull)(jumpValue)) {\n            this.#updatePointerValue(jumpValue, event1);\n            this.#updateValue(jumpValue, event1);\n            return;\n        }\n        const newValue = this.#calcNewKeyValue(event1);\n        if (!this.#repeatedKeys) {\n            this.#repeatedKeys = key === this.#lastDownKey;\n            if (!this.$state.dragging() && this.#repeatedKeys) {\n                this.#onStartDragging(newValue, event1);\n            }\n        }\n        this.#updatePointerValue(newValue, event1);\n        this.#lastDownKey = key;\n    }\n    #onKeyUp(event1) {\n        const isValidKey = Object.keys(SliderKeyDirection).includes(event1.key);\n        if (!isValidKey || !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNull)(this.#calcJumpValue(event1))) return;\n        const newValue = this.#repeatedKeys ? this.$state.pointerValue() : this.#calcNewKeyValue(event1);\n        this.#updateValue(newValue, event1);\n        this.#onStopDragging(newValue, event1);\n        this.#lastDownKey = \"\";\n        this.#repeatedKeys = false;\n    }\n    #calcJumpValue(event1) {\n        let key = event1.key, { min, max } = this.$state;\n        if (key === \"Home\" || key === \"PageUp\") {\n            return min();\n        } else if (key === \"End\" || key === \"PageDown\") {\n            return max();\n        } else if (!event1.metaKey && /^[0-9]$/.test(key)) {\n            return (max() - min()) / 10 * Number(key);\n        }\n        return null;\n    }\n    #calcNewKeyValue(event1) {\n        const { key, shiftKey } = event1;\n        event1.preventDefault();\n        event1.stopPropagation();\n        const { shiftKeyMultiplier } = this.$props;\n        const { min, max, value, pointerValue } = this.$state, step = this.#delegate.getStep(), keyStep = this.#delegate.getKeyStep();\n        const modifiedStep = !shiftKey ? keyStep : keyStep * shiftKeyMultiplier(), direction = Number(SliderKeyDirection[key]), diff = modifiedStep * direction, currentValue = this.#repeatedKeys ? pointerValue() : this.#delegate.getValue?.() ?? value(), steps = (currentValue + diff) / step;\n        return Math.max(min(), Math.min(max(), Number((step * steps).toFixed(3))));\n    }\n    // -------------------------------------------------------------------------------------------\n    // Document (Pointer Events)\n    // -------------------------------------------------------------------------------------------\n    #onDocumentPointerUp(event1) {\n        if (event1.button !== 0) return;\n        event1.preventDefault();\n        event1.stopImmediatePropagation();\n        const value = this.#getPointerValue(event1);\n        this.#updatePointerValue(value, event1);\n        this.#onStopDragging(value, event1);\n    }\n    #onDocumentTouchMove(event1) {\n        event1.preventDefault();\n    }\n    #onDocumentPointerMove;\n}\nconst sliderValueFormatContext = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createContext)(()=>({}));\nclass SliderController extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    static{\n        this.props = {\n            hidden: false,\n            disabled: false,\n            step: 1,\n            keyStep: 1,\n            orientation: \"horizontal\",\n            shiftKeyMultiplier: 5\n        };\n    }\n    #media;\n    #delegate;\n    #isVisible;\n    #isIntersecting;\n    constructor(delegate){\n        super(), this.#isVisible = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(true), this.#isIntersecting = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(true), this.#updateSliderVars = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.animationFrameThrottle)((fillPercent, pointerPercent)=>{\n            this.el?.style.setProperty(\"--slider-fill\", fillPercent + \"%\");\n            this.el?.style.setProperty(\"--slider-pointer\", pointerPercent + \"%\");\n        });\n        this.#delegate = delegate;\n    }\n    onSetup() {\n        this.#media = useMediaContext();\n        const focus = new FocusVisibleController();\n        focus.attach(this);\n        this.$state.focused = focus.focused.bind(focus);\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(sliderValueFormatContext)) {\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(sliderValueFormatContext, {\n                default: \"value\"\n            });\n        }\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(sliderContext, {\n            orientation: this.$props.orientation,\n            disabled: this.#delegate.isDisabled,\n            preview: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null)\n        });\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchValue.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchStep.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchDisabled.bind(this));\n        this.#setupAttrs();\n        new SliderEventsController(this.#delegate, this.#media).attach(this);\n        new IntersectionObserverController({\n            callback: this.#onIntersectionChange.bind(this)\n        }).attach(this);\n    }\n    onAttach(el) {\n        setAttributeIfEmpty(el, \"role\", \"slider\");\n        setAttributeIfEmpty(el, \"tabindex\", \"0\");\n        setAttributeIfEmpty(el, \"autocomplete\", \"off\");\n        if (IS_SERVER) this.#watchCSSVars();\n        else (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchCSSVars.bind(this));\n    }\n    onConnect(el) {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(observeVisibility(el, this.#isVisible.set));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchHidden.bind(this));\n    }\n    #onIntersectionChange(entries) {\n        this.#isIntersecting.set(entries[0].isIntersecting);\n    }\n    // -------------------------------------------------------------------------------------------\n    // Watch\n    // -------------------------------------------------------------------------------------------\n    #watchHidden() {\n        const { hidden } = this.$props;\n        this.$state.hidden.set(hidden() || !this.#isVisible() || !this.#isIntersecting.bind(this));\n    }\n    #watchValue() {\n        const { dragging, value, min, max } = this.$state;\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(dragging)) return;\n        value.set(getClampedValue(min(), max(), value(), this.#delegate.getStep()));\n    }\n    #watchStep() {\n        this.$state.step.set(this.#delegate.getStep());\n    }\n    #watchDisabled() {\n        if (!this.#delegate.isDisabled()) return;\n        const { dragging, pointing } = this.$state;\n        dragging.set(false);\n        pointing.set(false);\n    }\n    // -------------------------------------------------------------------------------------------\n    // ARIA\n    // -------------------------------------------------------------------------------------------\n    #getARIADisabled() {\n        return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.ariaBool)(this.#delegate.isDisabled());\n    }\n    // -------------------------------------------------------------------------------------------\n    // Attributes\n    // -------------------------------------------------------------------------------------------\n    #setupAttrs() {\n        const { orientation } = this.$props, { dragging, active, pointing } = this.$state;\n        this.setAttributes({\n            \"data-dragging\": dragging,\n            \"data-pointing\": pointing,\n            \"data-active\": active,\n            \"aria-disabled\": this.#getARIADisabled.bind(this),\n            \"aria-valuemin\": this.#delegate.aria.valueMin ?? this.$state.min,\n            \"aria-valuemax\": this.#delegate.aria.valueMax ?? this.$state.max,\n            \"aria-valuenow\": this.#delegate.aria.valueNow,\n            \"aria-valuetext\": this.#delegate.aria.valueText,\n            \"aria-orientation\": orientation\n        });\n    }\n    #watchCSSVars() {\n        const { fillPercent, pointerPercent } = this.$state;\n        this.#updateSliderVars(round(fillPercent(), 3), round(pointerPercent(), 3));\n    }\n    #updateSliderVars;\n}\nclass Slider extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            ...SliderController.props,\n            min: 0,\n            max: 100,\n            value: 0\n        };\n    }\n    static{\n        this.state = sliderState;\n    }\n    constructor(){\n        super();\n        new SliderController({\n            getStep: this.$props.step,\n            getKeyStep: this.$props.keyStep,\n            roundValue: Math.round,\n            isDisabled: this.$props.disabled,\n            aria: {\n                valueNow: this.#getARIAValueNow.bind(this),\n                valueText: this.#getARIAValueText.bind(this)\n            }\n        });\n    }\n    onSetup() {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchValue.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchMinMax.bind(this));\n    }\n    // -------------------------------------------------------------------------------------------\n    // Props\n    // -------------------------------------------------------------------------------------------\n    #getARIAValueNow() {\n        const { value } = this.$state;\n        return Math.round(value());\n    }\n    #getARIAValueText() {\n        const { value, max } = this.$state;\n        return round(value() / max() * 100, 2) + \"%\";\n    }\n    // -------------------------------------------------------------------------------------------\n    // Watch\n    // -------------------------------------------------------------------------------------------\n    #watchValue() {\n        const { value } = this.$props;\n        this.$state.value.set(value());\n    }\n    #watchMinMax() {\n        const { min, max } = this.$props;\n        this.$state.min.set(min());\n        this.$state.max.set(max());\n    }\n}\nconst cache = /* @__PURE__ */ new Map(), pending = /* @__PURE__ */ new Map(), warned = /* @__PURE__ */ new Set();\nclass ThumbnailsLoader {\n    #media;\n    #src;\n    #crossOrigin;\n    static create(src, crossOrigin) {\n        const media = useMediaContext();\n        return new ThumbnailsLoader(src, crossOrigin, media);\n    }\n    constructor(src, crossOrigin, media){\n        this.$images = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)([]);\n        this.#src = src;\n        this.#crossOrigin = crossOrigin;\n        this.#media = media;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onLoadCues.bind(this));\n    }\n    #onLoadCues() {\n        const { canLoad } = this.#media.$state;\n        if (!canLoad()) return;\n        const src = this.#src();\n        if (!src) return;\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src) && cache.has(src)) {\n            const cues = cache.get(src);\n            cache.delete(src);\n            cache.set(src, cues);\n            if (cache.size > 99) {\n                const firstKey = cache.keys().next().value;\n                cache.delete(firstKey);\n            }\n            this.$images.set(cache.get(src));\n        } else if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src)) {\n            const crossOrigin = this.#crossOrigin(), currentKey = src + \"::\" + crossOrigin;\n            if (!pending.has(currentKey)) {\n                const promise = new Promise(async (resolve, reject)=>{\n                    try {\n                        const response = await fetch(src, {\n                            credentials: getRequestCredentials(crossOrigin)\n                        }), isJSON = response.headers.get(\"content-type\") === \"application/json\";\n                        if (isJSON) {\n                            const json = await response.json();\n                            if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(json)) {\n                                if (json[0] && \"text\" in json[0]) {\n                                    resolve(this.#processVTTCues(json));\n                                } else {\n                                    for(let i = 0; i < json.length; i++){\n                                        const image = json[i];\n                                        assert((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(image), `Item not an object at index ${i}`);\n                                        assert(\"url\" in image && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(image.url), `Invalid or missing \\`url\\` property at index ${i}`);\n                                        assert(\"startTime\" in image && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(image.startTime), `Invalid or missing \\`startTime\\` property at index ${i}`);\n                                    }\n                                    resolve(json);\n                                }\n                            } else {\n                                resolve(this.#processStoryboard(json));\n                            }\n                            return;\n                        }\n                        __webpack_require__.e(/*! import() */ \"vendor-chunks/media-captions\").then(__webpack_require__.bind(__webpack_require__, /*! media-captions */ \"(ssr)/./node_modules/media-captions/dist/dev.js\")).then(async ({ parseResponse })=>{\n                            try {\n                                const { cues } = await parseResponse(response);\n                                resolve(this.#processVTTCues(cues));\n                            } catch (e) {\n                                reject(e);\n                            }\n                        });\n                    } catch (e) {\n                        reject(e);\n                    }\n                }).then((images)=>{\n                    cache.set(currentKey, images);\n                    return images;\n                }).catch((error)=>{\n                    this.#onError(src, error);\n                }).finally(()=>{\n                    if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(currentKey)) pending.delete(currentKey);\n                });\n                pending.set(currentKey, promise);\n            }\n            pending.get(currentKey)?.then((images)=>{\n                this.$images.set(images || []);\n            });\n        } else if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(src)) {\n            try {\n                this.$images.set(this.#processImages(src));\n            } catch (error) {\n                this.#onError(src, error);\n            }\n        } else {\n            try {\n                this.$images.set(this.#processStoryboard(src));\n            } catch (error) {\n                this.#onError(src, error);\n            }\n        }\n        return ()=>{\n            this.$images.set([]);\n        };\n    }\n    #processImages(images) {\n        const baseURL = this.#resolveBaseUrl();\n        return images.map((img, i)=>{\n            assert(img.url && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(img.url), `Invalid or missing \\`url\\` property at index ${i}`);\n            assert(\"startTime\" in img && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(img.startTime), `Invalid or missing \\`startTime\\` property at index ${i}`);\n            return {\n                ...img,\n                url: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(img.url) ? this.#resolveURL(img.url, baseURL) : img.url\n            };\n        });\n    }\n    #processStoryboard(board) {\n        assert((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(board.url), \"Missing `url` in storyboard object\");\n        assert((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(board.tiles) && board.tiles?.length, `Empty tiles in storyboard`);\n        const url = new URL(board.url), images = [];\n        const tileWidth = \"tile_width\" in board ? board.tile_width : board.tileWidth, tileHeight = \"tile_height\" in board ? board.tile_height : board.tileHeight;\n        for (const tile of board.tiles){\n            images.push({\n                url,\n                startTime: \"start\" in tile ? tile.start : tile.startTime,\n                width: tileWidth,\n                height: tileHeight,\n                coords: {\n                    x: tile.x,\n                    y: tile.y\n                }\n            });\n        }\n        return images;\n    }\n    #processVTTCues(cues) {\n        for(let i = 0; i < cues.length; i++){\n            const cue = cues[i];\n            assert(\"startTime\" in cue && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(cue.startTime), `Invalid or missing \\`startTime\\` property at index ${i}`);\n            assert(\"text\" in cue && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(cue.text), `Invalid or missing \\`text\\` property at index ${i}`);\n        }\n        const images = [], baseURL = this.#resolveBaseUrl();\n        for (const cue of cues){\n            const [url, hash] = cue.text.split(\"#\"), data = this.#resolveData(hash);\n            images.push({\n                url: this.#resolveURL(url, baseURL),\n                startTime: cue.startTime,\n                endTime: cue.endTime,\n                width: data?.w,\n                height: data?.h,\n                coords: data && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(data.x) && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(data.y) ? {\n                    x: data.x,\n                    y: data.y\n                } : void 0\n            });\n        }\n        return images;\n    }\n    #resolveBaseUrl() {\n        let baseURL = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#src);\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isString)(baseURL) || !/^https?:/.test(baseURL)) {\n            return location.href;\n        }\n        return baseURL;\n    }\n    #resolveURL(src, baseURL) {\n        return /^https?:/.test(src) ? new URL(src) : new URL(src, baseURL);\n    }\n    #resolveData(hash) {\n        if (!hash) return {};\n        const [hashProps, values] = hash.split(\"=\"), hashValues = values?.split(\",\"), data = {};\n        if (!hashProps || !hashValues) {\n            return null;\n        }\n        for(let i = 0; i < hashProps.length; i++){\n            const value = +hashValues[i];\n            if (!isNaN(value)) data[hashProps[i]] = value;\n        }\n        return data;\n    }\n    #onError(src, error) {\n        if (warned?.has(src)) return;\n        this.#media.logger?.errorGroup(\"[vidstack] failed to load thumbnails\").labelledLog(\"Src\", src).labelledLog(\"Error\", error).dispatch();\n        warned?.add(src);\n    }\n}\nclass Thumbnail extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            src: null,\n            time: 0,\n            crossOrigin: null\n        };\n    }\n    static{\n        this.state = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.State({\n            src: \"\",\n            img: null,\n            thumbnails: [],\n            activeThumbnail: null,\n            crossOrigin: null,\n            loading: false,\n            error: null,\n            hidden: false\n        });\n    }\n    #loader;\n    #styleResets;\n    onSetup() {\n        this.media = useMediaContext();\n        this.#loader = ThumbnailsLoader.create(this.$props.src, this.$state.crossOrigin);\n        this.#watchCrossOrigin();\n        this.setAttributes({\n            \"data-loading\": this.#isLoading.bind(this),\n            \"data-error\": this.#hasError.bind(this),\n            \"data-hidden\": this.$state.hidden,\n            \"aria-hidden\": $ariaBool(this.$state.hidden)\n        });\n    }\n    onConnect(el) {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchImg.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchHidden.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchCrossOrigin.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onLoadStart.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onFindActiveThumbnail.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#resize.bind(this));\n    }\n    #watchImg() {\n        const img = this.$state.img();\n        if (!img) return;\n        new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(img).add(\"load\", this.#onLoaded.bind(this)).add(\"error\", this.#onError.bind(this));\n    }\n    #watchCrossOrigin() {\n        const { crossOrigin: crossOriginProp } = this.$props, { crossOrigin: crossOriginState } = this.$state, { crossOrigin: mediaCrossOrigin } = this.media.$state, crossOrigin = crossOriginProp() !== null ? crossOriginProp() : mediaCrossOrigin();\n        crossOriginState.set(crossOrigin === true ? \"anonymous\" : crossOrigin);\n    }\n    #onLoadStart() {\n        const { src, loading, error } = this.$state;\n        if (src()) {\n            loading.set(true);\n            error.set(null);\n        }\n        return ()=>{\n            this.#resetStyles();\n            loading.set(false);\n            error.set(null);\n        };\n    }\n    #onLoaded() {\n        const { loading, error } = this.$state;\n        this.#resize();\n        loading.set(false);\n        error.set(null);\n    }\n    #onError(event1) {\n        const { loading, error } = this.$state;\n        loading.set(false);\n        error.set(event1);\n    }\n    #isLoading() {\n        const { loading, hidden } = this.$state;\n        return !hidden() && loading();\n    }\n    #hasError() {\n        const { error } = this.$state;\n        return !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNull)(error());\n    }\n    #watchHidden() {\n        const { hidden } = this.$state, { duration } = this.media.$state, images = this.#loader.$images();\n        hidden.set(this.#hasError() || !Number.isFinite(duration()) || images.length === 0);\n    }\n    getTime() {\n        return this.$props.time();\n    }\n    #onFindActiveThumbnail() {\n        let images = this.#loader.$images();\n        if (!images.length) return;\n        let time = this.getTime(), { src, activeThumbnail } = this.$state, activeIndex = -1, activeImage = null;\n        for(let i = images.length - 1; i >= 0; i--){\n            const image = images[i];\n            if (time >= image.startTime && (!image.endTime || time < image.endTime)) {\n                activeIndex = i;\n                break;\n            }\n        }\n        if (images[activeIndex]) {\n            activeImage = images[activeIndex];\n        }\n        activeThumbnail.set(activeImage);\n        src.set(activeImage?.url.href || \"\");\n    }\n    #resize() {\n        if (!this.scope || this.$state.hidden()) return;\n        const rootEl = this.el, imgEl = this.$state.img(), thumbnail = this.$state.activeThumbnail();\n        if (!imgEl || !thumbnail || !rootEl) return;\n        let width = thumbnail.width ?? imgEl.naturalWidth, height = thumbnail?.height ?? imgEl.naturalHeight, { maxWidth, maxHeight, minWidth, minHeight, width: elWidth, height: elHeight } = getComputedStyle(this.el);\n        if (minWidth === \"100%\") minWidth = parseFloat(elWidth) + \"\";\n        if (minHeight === \"100%\") minHeight = parseFloat(elHeight) + \"\";\n        let minRatio = Math.max(parseInt(minWidth) / width, parseInt(minHeight) / height), maxRatio = Math.min(Math.max(parseInt(minWidth), parseInt(maxWidth)) / width, Math.max(parseInt(minHeight), parseInt(maxHeight)) / height), scale = !isNaN(maxRatio) && maxRatio < 1 ? maxRatio : minRatio > 1 ? minRatio : 1;\n        this.#style(rootEl, \"--thumbnail-width\", `${width * scale}px`);\n        this.#style(rootEl, \"--thumbnail-height\", `${height * scale}px`);\n        this.#style(rootEl, \"--thumbnail-aspect-ratio\", String(round(width / height, 5)));\n        this.#style(imgEl, \"width\", `${imgEl.naturalWidth * scale}px`);\n        this.#style(imgEl, \"height\", `${imgEl.naturalHeight * scale}px`);\n        this.#style(imgEl, \"transform\", thumbnail.coords ? `translate(-${thumbnail.coords.x * scale}px, -${thumbnail.coords.y * scale}px)` : \"\");\n        this.#style(imgEl, \"max-width\", \"none\");\n    }\n    #style(el, name, value) {\n        el.style.setProperty(name, value);\n        this.#styleResets.push(()=>el.style.removeProperty(name));\n    }\n    #resetStyles() {\n        for (const reset of this.#styleResets)reset();\n        this.#styleResets = [];\n    }\n    constructor(...args){\n        super(...args), this.#styleResets = [];\n    }\n}\nclass SliderThumbnail extends Thumbnail {\n    #slider;\n    onAttach(el) {\n        this.#slider = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useState)(Slider.state);\n    }\n    getTime() {\n        const { duration, clipStartTime } = this.media.$state;\n        return clipStartTime() + this.#slider.pointerRate() * duration();\n    }\n}\nclass SliderVideo extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            src: null,\n            crossOrigin: null\n        };\n    }\n    static{\n        this.state = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.State({\n            video: null,\n            src: null,\n            crossOrigin: null,\n            canPlay: false,\n            error: null,\n            hidden: false\n        });\n    }\n    #media;\n    #slider;\n    get video() {\n        return this.$state.video();\n    }\n    onSetup() {\n        this.#media = useMediaContext();\n        this.#slider = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useState)(Slider.state);\n        this.#watchCrossOrigin();\n        this.setAttributes({\n            \"data-loading\": this.#isLoading.bind(this),\n            \"data-hidden\": this.$state.hidden,\n            \"data-error\": this.#hasError.bind(this),\n            \"aria-hidden\": $ariaBool(this.$state.hidden)\n        });\n    }\n    onAttach(el) {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchVideo.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchSrc.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchCrossOrigin.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchHidden.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onSrcChange.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onUpdateTime.bind(this));\n    }\n    #watchVideo() {\n        const video = this.$state.video();\n        if (!video) return;\n        if (video.readyState >= 2) this.#onCanPlay();\n        new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(video).add(\"canplay\", this.#onCanPlay.bind(this)).add(\"error\", this.#onError.bind(this));\n    }\n    #watchSrc() {\n        const { src } = this.$state, { canLoad } = this.#media.$state;\n        src.set(canLoad() ? this.$props.src() : null);\n    }\n    #watchCrossOrigin() {\n        const { crossOrigin: crossOriginProp } = this.$props, { crossOrigin: crossOriginState } = this.$state, { crossOrigin: mediaCrossOrigin } = this.#media.$state, crossOrigin = crossOriginProp() !== null ? crossOriginProp() : mediaCrossOrigin();\n        crossOriginState.set(crossOrigin === true ? \"anonymous\" : crossOrigin);\n    }\n    #isLoading() {\n        const { canPlay, hidden } = this.$state;\n        return !canPlay() && !hidden();\n    }\n    #hasError() {\n        const { error } = this.$state;\n        return !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNull)(error);\n    }\n    #watchHidden() {\n        const { src, hidden } = this.$state, { canLoad, duration } = this.#media.$state;\n        hidden.set(canLoad() && (!src() || this.#hasError() || !Number.isFinite(duration())));\n    }\n    #onSrcChange() {\n        const { src, canPlay, error } = this.$state;\n        src();\n        canPlay.set(false);\n        error.set(null);\n    }\n    #onCanPlay(event1) {\n        const { canPlay, error } = this.$state;\n        canPlay.set(true);\n        error.set(null);\n        this.dispatch(\"can-play\", {\n            trigger: event1\n        });\n    }\n    #onError(event1) {\n        const { canPlay, error } = this.$state;\n        canPlay.set(false);\n        error.set(event1);\n        this.dispatch(\"error\", {\n            trigger: event1\n        });\n    }\n    #onUpdateTime() {\n        const { video, canPlay } = this.$state, { duration } = this.#media.$state, { pointerRate } = this.#slider, media = video(), canUpdate = canPlay() && media && Number.isFinite(duration()) && Number.isFinite(pointerRate());\n        if (canUpdate) {\n            media.currentTime = pointerRate() * duration();\n        }\n    }\n}\nconst slidervideo__proto = SliderVideo.prototype;\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(slidervideo__proto, \"video\");\nclass SliderValue extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            type: \"pointer\",\n            format: null,\n            showHours: false,\n            showMs: false,\n            padHours: null,\n            padMinutes: null,\n            decimalPlaces: 2\n        };\n    }\n    #format;\n    #text;\n    #slider;\n    onSetup() {\n        this.#slider = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useState)(Slider.state);\n        this.#format = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(sliderValueFormatContext);\n        this.#text = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.computed)(this.getValueText.bind(this));\n    }\n    /**\n   * Returns the current value formatted as text based on prop settings.\n   */ getValueText() {\n        const { type, format: $format, decimalPlaces, padHours, padMinutes, showHours, showMs } = this.$props, { value: sliderValue, pointerValue, min, max } = this.#slider, format = $format?.() ?? this.#format.default;\n        const value = type() === \"current\" ? sliderValue() : pointerValue();\n        if (format === \"percent\") {\n            const range = max() - min();\n            const percent = value / range * 100;\n            return (this.#format.percent ?? round)(percent, decimalPlaces()) + \"%\";\n        } else if (format === \"time\") {\n            return (this.#format.time ?? formatTime)(value, {\n                padHrs: padHours(),\n                padMins: padMinutes(),\n                showHrs: showHours(),\n                showMs: showMs()\n            });\n        } else {\n            return (this.#format.value?.(value) ?? value.toFixed(2)) + \"\";\n        }\n    }\n}\nconst slidervalue__proto = SliderValue.prototype;\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.method)(slidervalue__proto, \"getValueText\");\nclass SliderPreview extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            offset: 0,\n            noClamp: false\n        };\n    }\n    #slider;\n    onSetup() {\n        this.#slider = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(sliderContext);\n        const { active } = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useState)(Slider.state);\n        this.setAttributes({\n            \"data-visible\": active\n        });\n    }\n    onAttach(el) {\n        Object.assign(el.style, {\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            width: \"max-content\"\n        });\n    }\n    onConnect(el) {\n        const { preview } = this.#slider;\n        preview.set(el);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>preview.set(null));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#updatePlacement.bind(this));\n        const resize = new ResizeObserver(this.#updatePlacement.bind(this));\n        resize.observe(el);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>resize.disconnect());\n    }\n    #updatePlacement;\n    constructor(...args){\n        super(...args), this.#updatePlacement = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.animationFrameThrottle)(()=>{\n            const { disabled, orientation } = this.#slider;\n            if (disabled()) return;\n            const el = this.el, { offset, noClamp } = this.$props;\n            if (!el) return;\n            updateSliderPreviewPlacement(el, {\n                clamp: !noClamp(),\n                offset: offset(),\n                orientation: orientation()\n            });\n        });\n    }\n}\nfunction updateSliderPreviewPlacement(el, { clamp, offset, orientation }) {\n    const computedStyle = getComputedStyle(el), width = parseFloat(computedStyle.width), height = parseFloat(computedStyle.height), styles = {\n        top: null,\n        right: null,\n        bottom: null,\n        left: null\n    };\n    styles[orientation === \"horizontal\" ? \"bottom\" : \"left\"] = `calc(100% + var(--media-slider-preview-offset, ${offset}px))`;\n    if (orientation === \"horizontal\") {\n        const widthHalf = width / 2;\n        if (!clamp) {\n            styles.left = `calc(var(--slider-pointer) - ${widthHalf}px)`;\n        } else {\n            const leftClamp = `max(0px, calc(var(--slider-pointer) - ${widthHalf}px))`, rightClamp = `calc(100% - ${width}px)`;\n            styles.left = `min(${leftClamp}, ${rightClamp})`;\n        }\n    } else {\n        const heightHalf = height / 2;\n        if (!clamp) {\n            styles.bottom = `calc(var(--slider-pointer) - ${heightHalf}px)`;\n        } else {\n            const topClamp = `max(${heightHalf}px, calc(var(--slider-pointer) - ${heightHalf}px))`, bottomClamp = `calc(100% - ${height}px)`;\n            styles.bottom = `min(${topClamp}, ${bottomClamp})`;\n        }\n    }\n    Object.assign(el.style, styles);\n}\nclass VolumeSlider extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            ...SliderController.props,\n            keyStep: 5,\n            shiftKeyMultiplier: 2\n        };\n    }\n    static{\n        this.state = sliderState;\n    }\n    #media;\n    onSetup() {\n        this.#media = useMediaContext();\n        const { audioGain } = this.#media.$state;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(sliderValueFormatContext, {\n            default: \"percent\",\n            value (value) {\n                return (value * (audioGain() ?? 1)).toFixed(2);\n            },\n            percent (value) {\n                return Math.round(value * (audioGain() ?? 1));\n            }\n        });\n        new SliderController({\n            getStep: this.$props.step,\n            getKeyStep: this.$props.keyStep,\n            roundValue: Math.round,\n            isDisabled: this.#isDisabled.bind(this),\n            aria: {\n                valueMax: this.#getARIAValueMax.bind(this),\n                valueNow: this.#getARIAValueNow.bind(this),\n                valueText: this.#getARIAValueText.bind(this)\n            },\n            onDragValueChange: this.#onDragValueChange.bind(this),\n            onValueChange: this.#onValueChange.bind(this)\n        }).attach(this);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchVolume.bind(this));\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-volume-slider\", \"\");\n        setAttributeIfEmpty(el, \"aria-label\", \"Volume\");\n        const { canSetVolume } = this.#media.$state;\n        this.setAttributes({\n            \"data-supported\": canSetVolume,\n            \"aria-hidden\": $ariaBool(()=>!canSetVolume())\n        });\n    }\n    #getARIAValueNow() {\n        const { value } = this.$state, { audioGain } = this.#media.$state;\n        return Math.round(value() * (audioGain() ?? 1));\n    }\n    #getARIAValueText() {\n        const { value, max } = this.$state, { audioGain } = this.#media.$state;\n        return round(value() / max() * (audioGain() ?? 1) * 100, 2) + \"%\";\n    }\n    #getARIAValueMax() {\n        const { audioGain } = this.#media.$state;\n        return this.$state.max() * (audioGain() ?? 1);\n    }\n    #isDisabled() {\n        const { disabled } = this.$props, { canSetVolume } = this.#media.$state;\n        return disabled() || !canSetVolume();\n    }\n    #watchVolume() {\n        const { muted, volume } = this.#media.$state;\n        const newValue = muted() ? 0 : volume() * 100;\n        this.$state.value.set(newValue);\n        this.dispatch(\"value-change\", {\n            detail: newValue\n        });\n    }\n    #throttleVolumeChange;\n    #onVolumeChange(event1) {\n        if (!event1.trigger) return;\n        const mediaVolume = round(event1.detail / 100, 3);\n        this.#media.remote.changeVolume(mediaVolume, event1);\n    }\n    #onValueChange(event1) {\n        this.#throttleVolumeChange(event1);\n    }\n    #onDragValueChange(event1) {\n        this.#throttleVolumeChange(event1);\n    }\n    constructor(...args){\n        super(...args), this.#throttleVolumeChange = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.functionThrottle)(this.#onVolumeChange.bind(this), 25);\n    }\n}\nclass AudioGainSlider extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            ...SliderController.props,\n            step: 25,\n            keyStep: 25,\n            shiftKeyMultiplier: 2,\n            min: 0,\n            max: 300\n        };\n    }\n    static{\n        this.state = sliderState;\n    }\n    #media;\n    onSetup() {\n        this.#media = useMediaContext();\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(sliderValueFormatContext, {\n            default: \"percent\",\n            percent: (_, decimalPlaces)=>{\n                return round(this.$state.value(), decimalPlaces) + \"%\";\n            }\n        });\n        new SliderController({\n            getStep: this.$props.step,\n            getKeyStep: this.$props.keyStep,\n            roundValue: Math.round,\n            isDisabled: this.#isDisabled.bind(this),\n            aria: {\n                valueNow: this.#getARIAValueNow.bind(this),\n                valueText: this.#getARIAValueText.bind(this)\n            },\n            onDragValueChange: this.#onDragValueChange.bind(this),\n            onValueChange: this.#onValueChange.bind(this)\n        }).attach(this);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchMinMax.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchAudioGain.bind(this));\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-audio-gain-slider\", \"\");\n        setAttributeIfEmpty(el, \"aria-label\", \"Audio Boost\");\n        const { canSetAudioGain } = this.#media.$state;\n        this.setAttributes({\n            \"data-supported\": canSetAudioGain,\n            \"aria-hidden\": $ariaBool(()=>!canSetAudioGain())\n        });\n    }\n    #getARIAValueNow() {\n        const { value } = this.$state;\n        return Math.round(value());\n    }\n    #getARIAValueText() {\n        const { value } = this.$state;\n        return value() + \"%\";\n    }\n    #watchMinMax() {\n        const { min, max } = this.$props;\n        this.$state.min.set(min());\n        this.$state.max.set(max());\n    }\n    #watchAudioGain() {\n        const { audioGain } = this.#media.$state, value = ((audioGain() ?? 1) - 1) * 100;\n        this.$state.value.set(value);\n        this.dispatch(\"value-change\", {\n            detail: value\n        });\n    }\n    #isDisabled() {\n        const { disabled } = this.$props, { canSetAudioGain } = this.#media.$state;\n        return disabled() || !canSetAudioGain();\n    }\n    #onAudioGainChange(event1) {\n        if (!event1.trigger) return;\n        const gain = round(1 + event1.detail / 100, 2);\n        this.#media.remote.changeAudioGain(gain, event1);\n    }\n    #onValueChange(event1) {\n        this.#onAudioGainChange(event1);\n    }\n    #onDragValueChange(event1) {\n        this.#onAudioGainChange(event1);\n    }\n}\nclass SpeedSlider extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            ...SliderController.props,\n            step: 0.25,\n            keyStep: 0.25,\n            shiftKeyMultiplier: 2,\n            min: 0,\n            max: 2\n        };\n    }\n    static{\n        this.state = sliderState;\n    }\n    #media;\n    onSetup() {\n        this.#media = useMediaContext();\n        new SliderController({\n            getStep: this.$props.step,\n            getKeyStep: this.$props.keyStep,\n            roundValue: this.#roundValue,\n            isDisabled: this.#isDisabled.bind(this),\n            aria: {\n                valueNow: this.#getARIAValueNow.bind(this),\n                valueText: this.#getARIAValueText.bind(this)\n            },\n            onDragValueChange: this.#onDragValueChange.bind(this),\n            onValueChange: this.#onValueChange.bind(this)\n        }).attach(this);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchMinMax.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchPlaybackRate.bind(this));\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-speed-slider\", \"\");\n        setAttributeIfEmpty(el, \"aria-label\", \"Speed\");\n        const { canSetPlaybackRate } = this.#media.$state;\n        this.setAttributes({\n            \"data-supported\": canSetPlaybackRate,\n            \"aria-hidden\": $ariaBool(()=>!canSetPlaybackRate())\n        });\n    }\n    #getARIAValueNow() {\n        const { value } = this.$state;\n        return value();\n    }\n    #getARIAValueText() {\n        const { value } = this.$state;\n        return value() + \"x\";\n    }\n    #watchMinMax() {\n        const { min, max } = this.$props;\n        this.$state.min.set(min());\n        this.$state.max.set(max());\n    }\n    #watchPlaybackRate() {\n        const { playbackRate } = this.#media.$state;\n        const newValue = playbackRate();\n        this.$state.value.set(newValue);\n        this.dispatch(\"value-change\", {\n            detail: newValue\n        });\n    }\n    #roundValue(value) {\n        return round(value, 2);\n    }\n    #isDisabled() {\n        const { disabled } = this.$props, { canSetPlaybackRate } = this.#media.$state;\n        return disabled() || !canSetPlaybackRate();\n    }\n    #throttledSpeedChange;\n    #onPlaybackRateChange(event1) {\n        if (!event1.trigger) return;\n        const rate = event1.detail;\n        this.#media.remote.changePlaybackRate(rate, event1);\n    }\n    #onValueChange(event1) {\n        this.#throttledSpeedChange(event1);\n    }\n    #onDragValueChange(event1) {\n        this.#throttledSpeedChange(event1);\n    }\n    constructor(...args){\n        super(...args), this.#throttledSpeedChange = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.functionThrottle)(this.#onPlaybackRateChange.bind(this), 25);\n    }\n}\nclass QualitySlider extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            ...SliderController.props,\n            step: 1,\n            keyStep: 1,\n            shiftKeyMultiplier: 1\n        };\n    }\n    static{\n        this.state = sliderState;\n    }\n    #media;\n    #sortedQualities;\n    onSetup() {\n        this.#media = useMediaContext();\n        new SliderController({\n            getStep: this.$props.step,\n            getKeyStep: this.$props.keyStep,\n            roundValue: Math.round,\n            isDisabled: this.#isDisabled.bind(this),\n            aria: {\n                valueNow: this.#getARIAValueNow.bind(this),\n                valueText: this.#getARIAValueText.bind(this)\n            },\n            onDragValueChange: this.#onDragValueChange.bind(this),\n            onValueChange: this.#onValueChange.bind(this)\n        }).attach(this);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchMax.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchQuality.bind(this));\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-quality-slider\", \"\");\n        setAttributeIfEmpty(el, \"aria-label\", \"Video Quality\");\n        const { qualities, canSetQuality } = this.#media.$state, $supported = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.computed)(()=>canSetQuality() && qualities().length > 0);\n        this.setAttributes({\n            \"data-supported\": $supported,\n            \"aria-hidden\": $ariaBool(()=>!$supported())\n        });\n    }\n    #getARIAValueNow() {\n        const { value } = this.$state;\n        return value();\n    }\n    #getARIAValueText() {\n        const { quality } = this.#media.$state;\n        if (!quality()) return \"\";\n        const { height, bitrate } = quality(), bitrateText = bitrate && bitrate > 0 ? `${(bitrate / 1e6).toFixed(2)} Mbps` : null;\n        return height ? `${height}p${bitrateText ? ` (${bitrateText})` : \"\"}` : \"Auto\";\n    }\n    #watchMax() {\n        const $qualities = this.#sortedQualities();\n        this.$state.max.set(Math.max(0, $qualities.length - 1));\n    }\n    #watchQuality() {\n        let { quality } = this.#media.$state, $qualities = this.#sortedQualities(), value = Math.max(0, $qualities.indexOf(quality()));\n        this.$state.value.set(value);\n        this.dispatch(\"value-change\", {\n            detail: value\n        });\n    }\n    #isDisabled() {\n        const { disabled } = this.$props, { canSetQuality, qualities } = this.#media.$state;\n        return disabled() || qualities().length <= 1 || !canSetQuality();\n    }\n    #throttledQualityChange;\n    #onQualityChange(event1) {\n        if (!event1.trigger) return;\n        const { qualities } = this.#media, quality = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#sortedQualities)[event1.detail];\n        this.#media.remote.changeQuality(qualities.indexOf(quality), event1);\n    }\n    #onValueChange(event1) {\n        this.#throttledQualityChange(event1);\n    }\n    #onDragValueChange(event1) {\n        this.#throttledQualityChange(event1);\n    }\n    constructor(...args){\n        super(...args), this.#sortedQualities = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.computed)(()=>{\n            const { qualities } = this.#media.$state;\n            return sortVideoQualities(qualities());\n        }), this.#throttledQualityChange = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.functionThrottle)(this.#onQualityChange.bind(this), 25);\n    }\n}\nclass TimeSlider extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            ...SliderController.props,\n            step: 0.1,\n            keyStep: 5,\n            shiftKeyMultiplier: 2,\n            pauseWhileDragging: false,\n            noSwipeGesture: false,\n            seekingRequestThrottle: 100\n        };\n    }\n    static{\n        this.state = sliderState;\n    }\n    #media;\n    #dispatchSeeking;\n    #chapter;\n    constructor(){\n        super(), this.#chapter = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null), this.#playingBeforeDragStart = false;\n        const { noSwipeGesture } = this.$props;\n        new SliderController({\n            swipeGesture: ()=>!noSwipeGesture(),\n            getValue: this.#getValue.bind(this),\n            getStep: this.#getStep.bind(this),\n            getKeyStep: this.#getKeyStep.bind(this),\n            roundValue: this.#roundValue,\n            isDisabled: this.#isDisabled.bind(this),\n            aria: {\n                valueNow: this.#getARIAValueNow.bind(this),\n                valueText: this.#getARIAValueText.bind(this)\n            },\n            onDragStart: this.#onDragStart.bind(this),\n            onDragValueChange: this.#onDragValueChange.bind(this),\n            onDragEnd: this.#onDragEnd.bind(this),\n            onValueChange: this.#onValueChange.bind(this)\n        });\n    }\n    onSetup() {\n        this.#media = useMediaContext();\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(sliderValueFormatContext, {\n            default: \"time\",\n            value: this.#formatValue.bind(this),\n            time: this.#formatTime.bind(this)\n        });\n        this.setAttributes({\n            \"data-chapters\": this.#hasChapters.bind(this)\n        });\n        this.setStyles({\n            \"--slider-progress\": this.#calcBufferedPercent.bind(this)\n        });\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchCurrentTime.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchSeekingThrottle.bind(this));\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-time-slider\", \"\");\n        setAttributeIfEmpty(el, \"aria-label\", \"Seek\");\n    }\n    onConnect(el) {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchPreviewing.bind(this));\n        watchActiveTextTrack(this.#media.textTracks, \"chapters\", this.#chapter.set);\n    }\n    #calcBufferedPercent() {\n        const { bufferedEnd, duration } = this.#media.$state;\n        return round(Math.min(bufferedEnd() / Math.max(duration(), 1), 1) * 100, 3) + \"%\";\n    }\n    #hasChapters() {\n        const { duration } = this.#media.$state;\n        return this.#chapter()?.cues.length && Number.isFinite(duration()) && duration() > 0;\n    }\n    #watchSeekingThrottle() {\n        this.#dispatchSeeking = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.functionThrottle)(this.#seeking.bind(this), this.$props.seekingRequestThrottle());\n    }\n    #watchCurrentTime() {\n        if (this.$state.hidden()) return;\n        const { value, dragging } = this.$state, newValue = this.#getValue();\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(dragging)) {\n            value.set(newValue);\n            this.dispatch(\"value-change\", {\n                detail: newValue\n            });\n        }\n    }\n    #watchPreviewing() {\n        const player = this.#media.player.el, { preview } = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(sliderContext);\n        player && preview() && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(player, \"data-preview\", this.$state.active());\n    }\n    #seeking(time, event1) {\n        this.#media.remote.seeking(time, event1);\n    }\n    #seek(time, percent, event1) {\n        this.#dispatchSeeking.cancel();\n        const { live } = this.#media.$state;\n        if (live() && percent >= 99) {\n            this.#media.remote.seekToLiveEdge(event1);\n            return;\n        }\n        this.#media.remote.seek(time, event1);\n    }\n    #playingBeforeDragStart;\n    #onDragStart(event1) {\n        const { pauseWhileDragging } = this.$props;\n        if (pauseWhileDragging()) {\n            const { paused } = this.#media.$state;\n            this.#playingBeforeDragStart = !paused();\n            this.#media.remote.pause(event1);\n        }\n    }\n    #onDragValueChange(event1) {\n        this.#dispatchSeeking(this.#percentToTime(event1.detail), event1);\n    }\n    #onDragEnd(event1) {\n        const { seeking } = this.#media.$state;\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(seeking)) this.#seeking(this.#percentToTime(event1.detail), event1);\n        const percent = event1.detail;\n        this.#seek(this.#percentToTime(percent), percent, event1);\n        const { pauseWhileDragging } = this.$props;\n        if (pauseWhileDragging() && this.#playingBeforeDragStart) {\n            this.#media.remote.play(event1);\n            this.#playingBeforeDragStart = false;\n        }\n    }\n    #onValueChange(event1) {\n        const { dragging } = this.$state;\n        if (dragging() || !event1.trigger) return;\n        this.#onDragEnd(event1);\n    }\n    // -------------------------------------------------------------------------------------------\n    // Props\n    // -------------------------------------------------------------------------------------------\n    #getValue() {\n        const { currentTime } = this.#media.$state;\n        return this.#timeToPercent(currentTime());\n    }\n    #getStep() {\n        const value = this.$props.step() / this.#media.$state.duration() * 100;\n        return Number.isFinite(value) ? value : 1;\n    }\n    #getKeyStep() {\n        const value = this.$props.keyStep() / this.#media.$state.duration() * 100;\n        return Number.isFinite(value) ? value : 1;\n    }\n    #roundValue(value) {\n        return round(value, 3);\n    }\n    #isDisabled() {\n        const { disabled } = this.$props, { canSeek } = this.#media.$state;\n        return disabled() || !canSeek();\n    }\n    // -------------------------------------------------------------------------------------------\n    // ARIA\n    // -------------------------------------------------------------------------------------------\n    #getARIAValueNow() {\n        const { value } = this.$state;\n        return Math.round(value());\n    }\n    #getARIAValueText() {\n        const time = this.#percentToTime(this.$state.value()), { duration } = this.#media.$state;\n        return Number.isFinite(time) ? `${formatSpokenTime(time)} out of ${formatSpokenTime(duration())}` : \"live\";\n    }\n    // -------------------------------------------------------------------------------------------\n    // Format\n    // -------------------------------------------------------------------------------------------\n    #percentToTime(percent) {\n        const { duration } = this.#media.$state;\n        return round(percent / 100 * duration(), 5);\n    }\n    #timeToPercent(time) {\n        const { liveEdge, duration } = this.#media.$state, rate = Math.max(0, Math.min(1, liveEdge() ? 1 : Math.min(time, duration()) / duration()));\n        return Number.isNaN(rate) ? 0 : Number.isFinite(rate) ? rate * 100 : 100;\n    }\n    #formatValue(percent) {\n        const time = this.#percentToTime(percent), { live, duration } = this.#media.$state;\n        return Number.isFinite(time) ? (live() ? time - duration() : time).toFixed(0) : \"LIVE\";\n    }\n    #formatTime(percent, options) {\n        const time = this.#percentToTime(percent), { live, duration } = this.#media.$state, value = live() ? time - duration() : time;\n        return Number.isFinite(time) ? `${value < 0 ? \"-\" : \"\"}${formatTime(Math.abs(value), options)}` : \"LIVE\";\n    }\n}\nclass SliderChapters extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            disabled: false\n        };\n    }\n    #media;\n    #sliderState;\n    #updateScope;\n    #titleRef;\n    #refs;\n    #$track;\n    #$cues;\n    #activeIndex;\n    #activePointerIndex;\n    #bufferedIndex;\n    get cues() {\n        return this.#$cues();\n    }\n    get activeCue() {\n        return this.#$cues()[this.#activeIndex()] || null;\n    }\n    get activePointerCue() {\n        return this.#$cues()[this.#activePointerIndex()] || null;\n    }\n    onSetup() {\n        this.#media = useMediaContext();\n        this.#sliderState = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useState)(TimeSlider.state);\n    }\n    onAttach(el) {\n        watchActiveTextTrack(this.#media.textTracks, \"chapters\", this.#setTrack.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchSource.bind(this));\n    }\n    onConnect() {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>this.#reset.bind(this));\n    }\n    onDestroy() {\n        this.#setTrack(null);\n    }\n    setRefs(refs) {\n        this.#refs = refs;\n        this.#updateScope?.dispose();\n        if (this.#refs.length === 1) {\n            const el = this.#refs[0];\n            el.style.width = \"100%\";\n            el.style.setProperty(\"--chapter-fill\", \"var(--slider-fill)\");\n            el.style.setProperty(\"--chapter-progress\", \"var(--slider-progress)\");\n        } else if (this.#refs.length > 0) {\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.scoped)(()=>this.#watch(), this.#updateScope = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createScope)());\n        }\n    }\n    #setTrack(track) {\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#$track) === track) return;\n        this.#reset();\n        this.#$track.set(track);\n    }\n    #reset() {\n        this.#refs = [];\n        this.#$cues.set([]);\n        this.#activeIndex.set(-1);\n        this.#activePointerIndex.set(-1);\n        this.#bufferedIndex = 0;\n        this.#updateScope?.dispose();\n    }\n    #watch() {\n        if (!this.#refs.length) return;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchUpdates.bind(this));\n    }\n    #watchUpdates() {\n        const { hidden } = this.#sliderState;\n        if (hidden()) return;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchContainerWidths.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchFillPercent.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchPointerPercent.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchBufferedPercent.bind(this));\n    }\n    #watchContainerWidths() {\n        const cues = this.#$cues();\n        if (!cues.length) return;\n        let cue, { seekableStart, seekableEnd } = this.#media.$state, startTime = seekableStart(), endTime = seekableEnd() || cues[cues.length - 1].endTime, duration = endTime - startTime, remainingWidth = 100;\n        for(let i = 0; i < cues.length; i++){\n            cue = cues[i];\n            if (this.#refs[i]) {\n                const width = i === cues.length - 1 ? remainingWidth : round((cue.endTime - Math.max(startTime, cue.startTime)) / duration * 100, 3);\n                this.#refs[i].style.width = width + \"%\";\n                remainingWidth -= width;\n            }\n        }\n    }\n    #watchFillPercent() {\n        let { liveEdge, seekableStart, seekableEnd } = this.#media.$state, { fillPercent, value } = this.#sliderState, cues = this.#$cues(), isLiveEdge = liveEdge(), prevActiveIndex = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#activeIndex), currentChapter = cues[prevActiveIndex];\n        let currentActiveIndex = isLiveEdge ? this.#$cues.length - 1 : this.#findActiveChapterIndex(currentChapter ? currentChapter.startTime / seekableEnd() * 100 <= (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(value) ? prevActiveIndex : 0 : 0, fillPercent());\n        if (isLiveEdge || !currentChapter) {\n            this.#updateFillPercents(0, cues.length, 100);\n        } else if (currentActiveIndex > prevActiveIndex) {\n            this.#updateFillPercents(prevActiveIndex, currentActiveIndex, 100);\n        } else if (currentActiveIndex < prevActiveIndex) {\n            this.#updateFillPercents(currentActiveIndex + 1, prevActiveIndex + 1, 0);\n        }\n        const percent = isLiveEdge ? 100 : this.#calcPercent(cues[currentActiveIndex], fillPercent(), seekableStart(), this.#getEndTime(cues));\n        this.#updateFillPercent(this.#refs[currentActiveIndex], percent);\n        this.#activeIndex.set(currentActiveIndex);\n    }\n    #watchPointerPercent() {\n        let { hidden, pointerPercent } = this.#sliderState;\n        if (hidden()) {\n            this.#activePointerIndex.set(-1);\n            return;\n        }\n        const activeIndex = this.#findActiveChapterIndex(0, pointerPercent());\n        this.#activePointerIndex.set(activeIndex);\n    }\n    #updateFillPercents(start, end, percent) {\n        for(let i = start; i < end; i++)this.#updateFillPercent(this.#refs[i], percent);\n    }\n    #updateFillPercent(ref, percent) {\n        if (!ref) return;\n        ref.style.setProperty(\"--chapter-fill\", percent + \"%\");\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(ref, \"data-active\", percent > 0 && percent < 100);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(ref, \"data-ended\", percent === 100);\n    }\n    #findActiveChapterIndex(startIndex, percent) {\n        let chapterPercent = 0, cues = this.#$cues();\n        if (percent === 0) return 0;\n        else if (percent === 100) return cues.length - 1;\n        let { seekableStart } = this.#media.$state, startTime = seekableStart(), endTime = this.#getEndTime(cues);\n        for(let i = startIndex; i < cues.length; i++){\n            chapterPercent = this.#calcPercent(cues[i], percent, startTime, endTime);\n            if (chapterPercent >= 0 && chapterPercent < 100) return i;\n        }\n        return 0;\n    }\n    #watchBufferedPercent() {\n        this.#updateBufferedPercent(this.#bufferedPercent());\n    }\n    #updateBufferedPercent;\n    #bufferedPercent;\n    #calcMediaBufferedPercent() {\n        const { bufferedEnd, duration } = this.#media.$state;\n        return round(Math.min(bufferedEnd() / Math.max(duration(), 1), 1), 3) * 100;\n    }\n    #getEndTime(cues) {\n        const { seekableEnd } = this.#media.$state, endTime = seekableEnd();\n        return Number.isFinite(endTime) ? endTime : cues[cues.length - 1]?.endTime || 0;\n    }\n    #calcPercent(cue, percent, startTime, endTime) {\n        if (!cue) return 0;\n        const cues = this.#$cues();\n        if (cues.length === 0) return 0;\n        const duration = endTime - startTime, cueStartTime = Math.max(0, cue.startTime - startTime), cueEndTime = Math.min(endTime, cue.endTime) - startTime;\n        const startRatio = cueStartTime / duration, startPercent = startRatio * 100, endPercent = Math.min(1, startRatio + (cueEndTime - cueStartTime) / duration) * 100;\n        return Math.max(0, round(percent >= endPercent ? 100 : (percent - startPercent) / (endPercent - startPercent) * 100, 3));\n    }\n    #fillGaps(cues) {\n        let chapters = [], { seekableStart, seekableEnd, duration } = this.#media.$state, startTime = seekableStart(), endTime = seekableEnd();\n        cues = cues.filter((cue)=>cue.startTime <= endTime && cue.endTime >= startTime);\n        const firstCue = cues[0];\n        if (firstCue && firstCue.startTime > startTime) {\n            chapters.push(new window.VTTCue(startTime, firstCue.startTime, \"\"));\n        }\n        for(let i = 0; i < cues.length - 1; i++){\n            const currentCue = cues[i], nextCue = cues[i + 1];\n            chapters.push(currentCue);\n            if (nextCue) {\n                const timeDiff = nextCue.startTime - currentCue.endTime;\n                if (timeDiff > 0) {\n                    chapters.push(new window.VTTCue(currentCue.endTime, currentCue.endTime + timeDiff, \"\"));\n                }\n            }\n        }\n        const lastCue = cues[cues.length - 1];\n        if (lastCue) {\n            chapters.push(lastCue);\n            const endTime2 = duration();\n            if (endTime2 >= 0 && endTime2 - lastCue.endTime > 1) {\n                chapters.push(new window.VTTCue(lastCue.endTime, duration(), \"\"));\n            }\n        }\n        return chapters;\n    }\n    #watchSource() {\n        const { source } = this.#media.$state;\n        source();\n        this.#onTrackChange();\n    }\n    #onTrackChange() {\n        if (!this.scope) return;\n        const { disabled } = this.$props;\n        if (disabled()) {\n            this.#$cues.set([]);\n            this.#activeIndex.set(0);\n            this.#bufferedIndex = 0;\n            return;\n        }\n        const track = this.#$track();\n        if (track) {\n            const onCuesChange = this.#onCuesChange.bind(this);\n            onCuesChange();\n            new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(track).add(\"add-cue\", onCuesChange).add(\"remove-cue\", onCuesChange);\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchMediaDuration.bind(this));\n        }\n        this.#titleRef = this.#findChapterTitleRef();\n        if (this.#titleRef) (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onChapterTitleChange.bind(this));\n        return ()=>{\n            if (this.#titleRef) {\n                this.#titleRef.textContent = \"\";\n                this.#titleRef = null;\n            }\n        };\n    }\n    #watchMediaDuration() {\n        this.#media.$state.duration();\n        this.#onCuesChange();\n    }\n    #onCuesChange;\n    #onChapterTitleChange() {\n        const cue = this.activePointerCue || this.activeCue;\n        if (this.#titleRef) this.#titleRef.textContent = cue?.text || \"\";\n    }\n    #findParentSlider() {\n        let node = this.el;\n        while(node && node.getAttribute(\"role\") !== \"slider\"){\n            node = node.parentElement;\n        }\n        return node;\n    }\n    #findChapterTitleRef() {\n        const slider = this.#findParentSlider();\n        return slider ? slider.querySelector('[data-part=\"chapter-title\"]') : null;\n    }\n    constructor(...args){\n        super(...args), this.#titleRef = null, this.#refs = [], this.#$track = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null), this.#$cues = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)([]), this.#activeIndex = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(-1), this.#activePointerIndex = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(-1), this.#bufferedIndex = 0, this.#updateBufferedPercent = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.animationFrameThrottle)((bufferedPercent)=>{\n            let percent, cues = this.#$cues(), { seekableStart } = this.#media.$state, startTime = seekableStart(), endTime = this.#getEndTime(cues);\n            for(let i = this.#bufferedIndex; i < this.#refs.length; i++){\n                percent = this.#calcPercent(cues[i], bufferedPercent, startTime, endTime);\n                this.#refs[i]?.style.setProperty(\"--chapter-progress\", percent + \"%\");\n                if (percent < 100) {\n                    this.#bufferedIndex = i;\n                    break;\n                }\n            }\n        }), this.#bufferedPercent = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.computed)(this.#calcMediaBufferedPercent.bind(this)), this.#onCuesChange = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.functionDebounce)(()=>{\n            const track = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#$track);\n            if (!this.scope || !track || !track.cues.length) return;\n            this.#$cues.set(this.#fillGaps(track.cues));\n            this.#activeIndex.set(0);\n            this.#bufferedIndex = 0;\n        }, 150, true);\n    }\n}\nconst sliderchapters__proto = SliderChapters.prototype;\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(sliderchapters__proto, \"cues\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(sliderchapters__proto, \"activeCue\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(sliderchapters__proto, \"activePointerCue\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.method)(sliderchapters__proto, \"setRefs\");\nconst menuContext = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nfunction scrollIntoView(el, options) {\n    const scrolls = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.r)(el, options);\n    for (const { el: el2, top, left } of scrolls){\n        el2.scroll({\n            top,\n            left,\n            behavior: options.behavior\n        });\n    }\n}\nfunction scrollIntoCenter(el, options = {}) {\n    scrollIntoView(el, {\n        scrollMode: \"if-needed\",\n        block: \"center\",\n        inline: \"center\",\n        ...options\n    });\n}\nconst FOCUSABLE_ELEMENTS_SELECTOR = /* @__PURE__ */ [\n    \"a[href]\",\n    \"[tabindex]\",\n    \"input\",\n    \"select\",\n    \"button\"\n].map((selector)=>`${selector}:not([aria-hidden='true'])`).join(\",\");\nconst VALID_KEYS = /* @__PURE__ */ new Set([\n    \"Escape\",\n    \"Tab\",\n    \"ArrowUp\",\n    \"ArrowDown\",\n    \"Home\",\n    \"PageUp\",\n    \"End\",\n    \"PageDown\",\n    \"Enter\",\n    \" \"\n]);\nclass MenuFocusController {\n    #index;\n    #el;\n    #elements;\n    #delegate;\n    get items() {\n        return this.#elements;\n    }\n    constructor(delegate){\n        this.#index = -1;\n        this.#el = null;\n        this.#elements = [];\n        this.#delegate = delegate;\n    }\n    attachMenu(el) {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(el, \"focus\", this.#onFocus.bind(this));\n        this.#el = el;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            this.#el = null;\n        });\n    }\n    listen() {\n        if (!this.#el) return;\n        this.update();\n        new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(this.#el).add(\"keyup\", this.#onKeyUp.bind(this)).add(\"keydown\", this.#onKeyDown.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            this.#index = -1;\n            this.#elements = [];\n        });\n    }\n    update() {\n        this.#index = 0;\n        this.#elements = this.#getFocusableElements();\n    }\n    scroll(index = this.#findActiveIndex()) {\n        const element = this.#elements[index];\n        if (element) {\n            requestAnimationFrame(()=>{\n                requestAnimationFrame(()=>{\n                    scrollIntoCenter(element, {\n                        behavior: \"smooth\",\n                        boundary: (el)=>{\n                            return !el.hasAttribute(\"data-root\");\n                        }\n                    });\n                });\n            });\n        }\n    }\n    focusActive(scroll = true) {\n        const index = this.#findActiveIndex();\n        this.#focusAt(index >= 0 ? index : 0, scroll);\n    }\n    #focusAt(index, scroll = true) {\n        this.#index = index;\n        if (this.#elements[index]) {\n            this.#elements[index].focus({\n                preventScroll: true\n            });\n            if (scroll) this.scroll(index);\n        } else {\n            this.#el?.focus({\n                preventScroll: true\n            });\n        }\n    }\n    #findActiveIndex() {\n        return this.#elements.findIndex((el)=>document.activeElement === el || el.getAttribute(\"role\") === \"menuitemradio\" && el.getAttribute(\"aria-checked\") === \"true\");\n    }\n    #onFocus() {\n        if (this.#index >= 0) return;\n        this.update();\n        this.focusActive();\n    }\n    #validateKeyEvent(event1) {\n        const el = event1.target;\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.wasEnterKeyPressed)(event1) && el instanceof Element) {\n            const role = el.getAttribute(\"role\");\n            return !/a|input|select|button/.test(el.localName) && !role;\n        }\n        return VALID_KEYS.has(event1.key);\n    }\n    #onKeyUp(event1) {\n        if (!this.#validateKeyEvent(event1)) return;\n        event1.stopPropagation();\n        event1.preventDefault();\n    }\n    #onKeyDown(event1) {\n        if (!this.#validateKeyEvent(event1)) return;\n        event1.stopPropagation();\n        event1.preventDefault();\n        switch(event1.key){\n            case \"Escape\":\n                this.#delegate.closeMenu(event1);\n                break;\n            case \"Tab\":\n                this.#focusAt(this.#nextIndex(event1.shiftKey ? -1 : 1));\n                break;\n            case \"ArrowUp\":\n                this.#focusAt(this.#nextIndex(-1));\n                break;\n            case \"ArrowDown\":\n                this.#focusAt(this.#nextIndex(1));\n                break;\n            case \"Home\":\n            case \"PageUp\":\n                this.#focusAt(0);\n                break;\n            case \"End\":\n            case \"PageDown\":\n                this.#focusAt(this.#elements.length - 1);\n                break;\n        }\n    }\n    #nextIndex(delta) {\n        let index = this.#index;\n        do {\n            index = (index + delta + this.#elements.length) % this.#elements.length;\n        }while (this.#elements[index]?.offsetParent === null);\n        return index;\n    }\n    #getFocusableElements() {\n        if (!this.#el) return [];\n        const focusableElements = this.#el.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR), elements = [];\n        const is = (node)=>{\n            return node.getAttribute(\"role\") === \"menu\";\n        };\n        for (const el of focusableElements){\n            if (isHTMLElement(el) && el.offsetParent !== null && // does not have display: none\n            isElementParent(this.#el, el, is)) {\n                elements.push(el);\n            }\n        }\n        return elements;\n    }\n}\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind)=>{\n    var result = __getOwnPropDesc(target, key);\n    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = decorator(target, key, result) || result;\n    if (result) __defProp(target, key, result);\n    return result;\n};\nlet idCount = 0;\nclass Menu extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            showDelay: 0\n        };\n    }\n    #media;\n    #menuId;\n    #menuButtonId;\n    #expanded;\n    #disabled;\n    #trigger;\n    #content;\n    #parentMenu;\n    #submenus;\n    #menuObserver;\n    #popper;\n    #focus;\n    #isSliderActive;\n    #isTriggerDisabled;\n    #transitionCallbacks;\n    get triggerElement() {\n        return this.#trigger();\n    }\n    get contentElement() {\n        return this.#content();\n    }\n    get isSubmenu() {\n        return !!this.#parentMenu;\n    }\n    constructor(){\n        super(), this.#expanded = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false), this.#disabled = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false), this.#trigger = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null), this.#content = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null), this.#submenus = /* @__PURE__ */ new Set(), this.#menuObserver = null, this.#isSliderActive = false, this.#isTriggerDisabled = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false), this.#transitionCallbacks = /* @__PURE__ */ new Set(), this.#wasKeyboardExpand = false, this.#removeSubmenuBind = this.#removeSubmenu.bind(this), this.#isSubmenuOpen = false, this.#onSubmenuOpenBind = this.#onSubmenuOpen.bind(this), this.#onSubmenuCloseBind = this.#onSubmenuClose.bind(this), this.#onResize = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.animationFrameThrottle)(()=>{\n            const content = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#content);\n            if (!content || IS_SERVER) return;\n            let height = 0, styles = getComputedStyle(content), children = [\n                ...content.children\n            ];\n            for (const prop2 of [\n                \"paddingTop\",\n                \"paddingBottom\",\n                \"borderTopWidth\",\n                \"borderBottomWidth\"\n            ]){\n                height += parseFloat(styles[prop2]) || 0;\n            }\n            for (const child of children){\n                if (isHTMLElement(child) && child.style.display === \"contents\") {\n                    children.push(...child.children);\n                } else if (child.nodeType === 3) {\n                    height += parseFloat(getComputedStyle(child).fontSize);\n                } else if (isHTMLElement(child)) {\n                    if (!isElementVisible(child)) continue;\n                    const style = getComputedStyle(child);\n                    height += child.offsetHeight + (parseFloat(style.marginTop) || 0) + (parseFloat(style.marginBottom) || 0);\n                }\n            }\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(content, \"--menu-height\", height + \"px\");\n        }), this.#isTransitionActive = false;\n        const { showDelay } = this.$props;\n        this.#popper = new Popper({\n            trigger: this.#trigger,\n            content: this.#content,\n            showDelay,\n            listen: (trigger, show, hide)=>{\n                onPress(trigger, (event1)=>{\n                    if (this.#expanded()) hide(event1);\n                    else show(event1);\n                });\n                const closeTarget = this.#getCloseTarget();\n                if (closeTarget) {\n                    onPress(closeTarget, (event1)=>{\n                        event1.stopPropagation();\n                        hide(event1);\n                    });\n                }\n            },\n            onChange: this.#onExpandedChange.bind(this)\n        });\n    }\n    onSetup() {\n        this.#media = useMediaContext();\n        const currentIdCount = ++idCount;\n        this.#menuId = `media-menu-${currentIdCount}`;\n        this.#menuButtonId = `media-menu-button-${currentIdCount}`;\n        this.#focus = new MenuFocusController({\n            closeMenu: this.close.bind(this)\n        });\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(menuContext)) {\n            this.#parentMenu = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(menuContext);\n        }\n        this.#observeSliders();\n        this.setAttributes({\n            \"data-open\": this.#expanded,\n            \"data-root\": !this.isSubmenu,\n            \"data-submenu\": this.isSubmenu,\n            \"data-disabled\": this.#isDisabled.bind(this)\n        });\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(menuContext, {\n            button: this.#trigger,\n            content: this.#content,\n            expanded: this.#expanded,\n            hint: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(\"\"),\n            submenu: !!this.#parentMenu,\n            disable: this.#disable.bind(this),\n            attachMenuButton: this.#attachMenuButton.bind(this),\n            attachMenuItems: this.#attachMenuItems.bind(this),\n            attachObserver: this.#attachObserver.bind(this),\n            disableMenuButton: this.#disableMenuButton.bind(this),\n            addSubmenu: this.#addSubmenu.bind(this),\n            onTransitionEvent: (callback)=>{\n                this.#transitionCallbacks.add(callback);\n                (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n                    this.#transitionCallbacks.delete(callback);\n                });\n            }\n        });\n    }\n    onAttach(el) {\n        el.style.setProperty(\"display\", \"contents\");\n    }\n    onConnect(el) {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchExpanded.bind(this));\n        if (this.isSubmenu) {\n            this.#parentMenu?.addSubmenu(this);\n        }\n    }\n    onDestroy() {\n        this.#trigger.set(null);\n        this.#content.set(null);\n        this.#menuObserver = null;\n        this.#transitionCallbacks.clear();\n    }\n    #observeSliders() {\n        let sliderActiveTimer = -1, parentSliderObserver = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(sliderObserverContext) ? (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(sliderObserverContext) : null;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(sliderObserverContext, {\n            onDragStart: ()=>{\n                parentSliderObserver?.onDragStart?.();\n                window.clearTimeout(sliderActiveTimer);\n                sliderActiveTimer = -1;\n                this.#isSliderActive = true;\n            },\n            onDragEnd: ()=>{\n                parentSliderObserver?.onDragEnd?.();\n                sliderActiveTimer = window.setTimeout(()=>{\n                    this.#isSliderActive = false;\n                    sliderActiveTimer = -1;\n                }, 300);\n            }\n        });\n    }\n    #watchExpanded() {\n        const expanded = this.#isExpanded();\n        if (!this.isSubmenu) this.#onResize();\n        this.#updateMenuItemsHidden(expanded);\n        if (!expanded) return;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            const { height } = this.#media.$state, content = this.#content();\n            content && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setStyle)(content, \"--player-height\", height() + \"px\");\n        });\n        this.#focus.listen();\n        this.listen(\"pointerup\", this.#onPointerUp.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(window, \"pointerup\", this.#onWindowPointerUp.bind(this));\n    }\n    #attachMenuButton(button) {\n        const el = button.el, isMenuItem = this.isSubmenu, isARIADisabled = $ariaBool(this.#isDisabled.bind(this));\n        setAttributeIfEmpty(el, \"tabindex\", isMenuItem ? \"-1\" : \"0\");\n        setAttributeIfEmpty(el, \"role\", isMenuItem ? \"menuitem\" : \"button\");\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"id\", this.#menuButtonId);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"aria-haspopup\", \"menu\");\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"aria-expanded\", \"false\");\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-root\", !this.isSubmenu);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-submenu\", this.isSubmenu);\n        const watchAttrs = ()=>{\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-open\", this.#expanded());\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"aria-disabled\", isARIADisabled());\n        };\n        if (IS_SERVER) watchAttrs();\n        else (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(watchAttrs);\n        this.#trigger.set(el);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>{\n            this.#trigger.set(null);\n        });\n    }\n    #attachMenuItems(items) {\n        const el = items.el;\n        el.style.setProperty(\"display\", \"none\");\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"id\", this.#menuId);\n        setAttributeIfEmpty(el, \"role\", \"menu\");\n        setAttributeIfEmpty(el, \"tabindex\", \"-1\");\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-root\", !this.isSubmenu);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-submenu\", this.isSubmenu);\n        this.#content.set(el);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>this.#content.set(null));\n        const watchAttrs = ()=>(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-open\", this.#expanded());\n        if (IS_SERVER) watchAttrs();\n        else (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(watchAttrs);\n        this.#focus.attachMenu(el);\n        this.#updateMenuItemsHidden(false);\n        const onTransition = this.#onResizeTransition.bind(this);\n        if (!this.isSubmenu) {\n            items.listen(\"transitionstart\", onTransition);\n            items.listen(\"transitionend\", onTransition);\n            items.listen(\"animationend\", this.#onResize);\n            items.listen(\"vds-menu-resize\", this.#onResize);\n        } else {\n            this.#parentMenu?.onTransitionEvent(onTransition);\n        }\n    }\n    #attachObserver(observer) {\n        this.#menuObserver = observer;\n    }\n    #updateMenuItemsHidden(expanded) {\n        const content = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#content);\n        if (content) (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(content, \"aria-hidden\", (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.ariaBool)(!expanded));\n    }\n    #disableMenuButton(disabled) {\n        this.#isTriggerDisabled.set(disabled);\n    }\n    #wasKeyboardExpand;\n    #onExpandedChange(isExpanded, event1) {\n        this.#wasKeyboardExpand = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isKeyboardEvent)(event1);\n        event1?.stopPropagation();\n        if (this.#expanded() === isExpanded) return;\n        if (this.#isDisabled()) {\n            if (isExpanded) this.#popper.hide(event1);\n            return;\n        }\n        this.el?.dispatchEvent(new Event(\"vds-menu-resize\", {\n            bubbles: true,\n            composed: true\n        }));\n        const trigger = this.#trigger(), content = this.#content();\n        if (trigger) {\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(trigger, \"aria-controls\", isExpanded && this.#menuId);\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(trigger, \"aria-expanded\", (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.ariaBool)(isExpanded));\n        }\n        if (content) (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(content, \"aria-labelledby\", isExpanded && this.#menuButtonId);\n        this.#expanded.set(isExpanded);\n        this.#toggleMediaControls(event1);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.tick)();\n        if (this.#wasKeyboardExpand) {\n            if (isExpanded) content?.focus();\n            else trigger?.focus();\n            for (const el of [\n                this.el,\n                content\n            ]){\n                el && el.setAttribute(\"data-keyboard\", \"\");\n            }\n        } else {\n            for (const el of [\n                this.el,\n                content\n            ]){\n                el && el.removeAttribute(\"data-keyboard\");\n            }\n        }\n        this.dispatch(isExpanded ? \"open\" : \"close\", {\n            trigger: event1\n        });\n        if (isExpanded) {\n            if (!this.isSubmenu && this.#media.activeMenu !== this) {\n                this.#media.activeMenu?.close(event1);\n                this.#media.activeMenu = this;\n            }\n            this.#menuObserver?.onOpen?.(event1);\n        } else {\n            if (this.isSubmenu) {\n                for (const el of this.#submenus)el.close(event1);\n            } else {\n                this.#media.activeMenu = null;\n            }\n            this.#menuObserver?.onClose?.(event1);\n        }\n        if (isExpanded) {\n            requestAnimationFrame(this.#updateFocus.bind(this));\n        }\n    }\n    #updateFocus() {\n        if (this.#isTransitionActive || this.#isSubmenuOpen) return;\n        this.#focus.update();\n        requestAnimationFrame(()=>{\n            if (this.#wasKeyboardExpand) {\n                this.#focus.focusActive();\n            } else {\n                this.#focus.scroll();\n            }\n        });\n    }\n    #isExpanded() {\n        return !this.#isDisabled() && this.#expanded();\n    }\n    #isDisabled() {\n        return this.#disabled() || this.#isTriggerDisabled();\n    }\n    #disable(disabled) {\n        this.#disabled.set(disabled);\n    }\n    #onPointerUp(event1) {\n        const content = this.#content();\n        if (this.#isSliderActive || content && isEventInside(content, event1)) {\n            return;\n        }\n        event1.stopPropagation();\n    }\n    #onWindowPointerUp(event1) {\n        const content = this.#content();\n        if (this.#isSliderActive || content && isEventInside(content, event1)) {\n            return;\n        }\n        this.close(event1);\n    }\n    #getCloseTarget() {\n        const target = this.el?.querySelector('[data-part=\"close-target\"]');\n        return this.el && target && isElementParent(this.el, target, (node)=>node.getAttribute(\"role\") === \"menu\") ? target : null;\n    }\n    #toggleMediaControls(trigger) {\n        if (this.isSubmenu) return;\n        if (this.#expanded()) this.#media.remote.pauseControls(trigger);\n        else this.#media.remote.resumeControls(trigger);\n    }\n    #addSubmenu(menu) {\n        this.#submenus.add(menu);\n        new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(menu).add(\"open\", this.#onSubmenuOpenBind).add(\"close\", this.#onSubmenuCloseBind);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this.#removeSubmenuBind);\n    }\n    #removeSubmenuBind;\n    #removeSubmenu(menu) {\n        this.#submenus.delete(menu);\n    }\n    #isSubmenuOpen;\n    #onSubmenuOpenBind;\n    #onSubmenuOpen(event1) {\n        this.#isSubmenuOpen = true;\n        const content = this.#content();\n        if (this.isSubmenu) {\n            this.triggerElement?.setAttribute(\"aria-hidden\", \"true\");\n        }\n        for (const target of this.#submenus){\n            if (target !== event1.target) {\n                for (const el of [\n                    target.el,\n                    target.triggerElement\n                ]){\n                    el?.setAttribute(\"aria-hidden\", \"true\");\n                }\n            }\n        }\n        if (content) {\n            const el = event1.target.el;\n            for (const child of content.children){\n                if (child.contains(el)) {\n                    child.setAttribute(\"data-open\", \"\");\n                } else if (child !== el) {\n                    child.setAttribute(\"data-hidden\", \"\");\n                }\n            }\n        }\n    }\n    #onSubmenuCloseBind;\n    #onSubmenuClose(event1) {\n        this.#isSubmenuOpen = false;\n        const content = this.#content();\n        if (this.isSubmenu) {\n            this.triggerElement?.setAttribute(\"aria-hidden\", \"false\");\n        }\n        for (const target of this.#submenus){\n            for (const el of [\n                target.el,\n                target.triggerElement\n            ]){\n                el?.setAttribute(\"aria-hidden\", \"false\");\n            }\n        }\n        if (content) {\n            for (const child of content.children){\n                child.removeAttribute(\"data-open\");\n                child.removeAttribute(\"data-hidden\");\n            }\n        }\n    }\n    #onResize;\n    #isTransitionActive;\n    #onResizeTransition(event1) {\n        const content = this.#content();\n        if (content && event1.propertyName === \"height\") {\n            this.#isTransitionActive = event1.type === \"transitionstart\";\n            (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(content, \"data-transition\", this.#isTransitionActive ? \"height\" : null);\n            if (this.#expanded()) this.#updateFocus();\n        }\n        for (const callback of this.#transitionCallbacks)callback(event1);\n    }\n    open(trigger) {\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#expanded)) return;\n        this.#popper.show(trigger);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.tick)();\n    }\n    close(trigger) {\n        if (!(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#expanded)) return;\n        this.#popper.hide(trigger);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.tick)();\n    }\n}\n__decorateClass([\n    _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], Menu.prototype, \"triggerElement\");\n__decorateClass([\n    _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], Menu.prototype, \"contentElement\");\n__decorateClass([\n    _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop\n], Menu.prototype, \"isSubmenu\");\n__decorateClass([\n    _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.method\n], Menu.prototype, \"open\");\n__decorateClass([\n    _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.method\n], Menu.prototype, \"close\");\nclass MenuButton extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            disabled: false\n        };\n    }\n    #menu;\n    #hintEl;\n    get expanded() {\n        return this.#menu?.expanded() ?? false;\n    }\n    constructor(){\n        super(), this.#hintEl = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null);\n        new FocusVisibleController();\n    }\n    onSetup() {\n        this.#menu = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(menuContext);\n    }\n    onAttach(el) {\n        this.#menu.attachMenuButton(this);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchDisabled.bind(this));\n        setAttributeIfEmpty(el, \"type\", \"button\");\n    }\n    onConnect(el) {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchHintEl.bind(this));\n        this.#onMutation();\n        const mutations = new MutationObserver(this.#onMutation.bind(this));\n        mutations.observe(el, {\n            attributeFilter: [\n                \"data-part\"\n            ],\n            childList: true,\n            subtree: true\n        });\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>mutations.disconnect());\n        onPress(el, (trigger)=>{\n            this.dispatch(\"select\", {\n                trigger\n            });\n        });\n    }\n    #watchDisabled() {\n        this.#menu.disableMenuButton(this.$props.disabled());\n    }\n    #watchHintEl() {\n        const el = this.#hintEl();\n        if (!el) return;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(()=>{\n            const text = this.#menu.hint();\n            if (text) el.textContent = text;\n        });\n    }\n    #onMutation() {\n        const hintEl = this.el?.querySelector('[data-part=\"hint\"]');\n        this.#hintEl.set(hintEl ?? null);\n    }\n}\nconst menubutton__proto = MenuButton.prototype;\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(menubutton__proto, \"expanded\");\nclass MenuItem extends MenuButton {\n}\nclass MenuPortal extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            container: null,\n            disabled: false\n        };\n    }\n    #target;\n    #media;\n    onSetup() {\n        this.#media = useMediaContext();\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(menuPortalContext, {\n            attach: this.#attachElement.bind(this)\n        });\n    }\n    onAttach(el) {\n        el.style.setProperty(\"display\", \"contents\");\n    }\n    // Need this so connect scope is defined.\n    onConnect(el) {}\n    onDestroy() {\n        this.#target?.remove();\n        this.#target = null;\n    }\n    #attachElement(el) {\n        this.#portal(false);\n        this.#target = el;\n        requestScopedAnimationFrame(()=>{\n            requestScopedAnimationFrame(()=>{\n                if (!this.connectScope) return;\n                (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchDisabled.bind(this));\n            });\n        });\n    }\n    #watchDisabled() {\n        const { fullscreen } = this.#media.$state, { disabled } = this.$props;\n        this.#portal(disabled() === \"fullscreen\" ? !fullscreen() : !disabled());\n    }\n    #portal(shouldPortal) {\n        if (!this.#target) return;\n        let container = this.#getContainer(this.$props.container());\n        if (!container) return;\n        const isPortalled = this.#target.parentElement === container;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this.#target, \"data-portal\", shouldPortal);\n        if (shouldPortal) {\n            if (!isPortalled) {\n                this.#target.remove();\n                container.append(this.#target);\n            }\n        } else if (isPortalled && this.#target.parentElement === container) {\n            this.#target.remove();\n            this.el?.append(this.#target);\n        }\n    }\n    #getContainer(selector) {\n        if (isHTMLElement(selector)) return selector;\n        return selector ? document.querySelector(selector) : document.body;\n    }\n    constructor(...args){\n        super(...args), this.#target = null;\n    }\n}\nconst menuPortalContext = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nclass MenuItems extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            placement: null,\n            offset: 0,\n            alignOffset: 0\n        };\n    }\n    #menu;\n    constructor(){\n        super();\n        new FocusVisibleController();\n        const { placement } = this.$props;\n        this.setAttributes({\n            \"data-placement\": placement\n        });\n    }\n    onAttach(el) {\n        this.#menu = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(menuContext);\n        this.#menu.attachMenuItems(this);\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(menuPortalContext)) {\n            const portal = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(menuPortalContext);\n            if (portal) {\n                (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(menuPortalContext, null);\n                portal.attach(el);\n                (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(()=>portal.attach(null));\n            }\n        }\n    }\n    onConnect(el) {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchPlacement.bind(this));\n    }\n    #watchPlacement() {\n        const { expanded } = this.#menu;\n        if (!this.el || !expanded()) return;\n        const placement = this.$props.placement();\n        if (!placement) return;\n        Object.assign(this.el.style, {\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            width: \"max-content\"\n        });\n        const { offset: mainOffset, alignOffset } = this.$props;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(autoPlacement(this.el, this.#getButton(), placement, {\n            offsetVarName: \"media-menu\",\n            xOffset: alignOffset(),\n            yOffset: mainOffset()\n        }));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this.#hide.bind(this));\n    }\n    #hide() {\n        if (!this.el) return;\n        this.el.removeAttribute(\"style\");\n        this.el.style.display = \"none\";\n    }\n    #getButton() {\n        return this.#menu.button();\n    }\n}\nconst radioControllerContext = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nclass RadioGroupController extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.ViewController {\n    #group;\n    #value;\n    #controller;\n    get values() {\n        return Array.from(this.#group).map((radio)=>radio.value());\n    }\n    get value() {\n        return this.#value();\n    }\n    set value(value) {\n        this.#onChange(value);\n    }\n    onSetup() {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.provideContext)(radioControllerContext, {\n            add: this.#addRadio.bind(this),\n            remove: this.#removeRadio.bind(this)\n        });\n    }\n    onAttach(el) {\n        const isMenuItem = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(menuContext);\n        if (!isMenuItem) setAttributeIfEmpty(el, \"role\", \"radiogroup\");\n        this.setAttributes({\n            value: this.#value\n        });\n    }\n    onDestroy() {\n        this.#group.clear();\n    }\n    #addRadio(radio) {\n        if (this.#group.has(radio)) return;\n        this.#group.add(radio);\n        radio.onCheck = this.#onChangeBind;\n        radio.check(radio.value() === this.#value());\n    }\n    #removeRadio(radio) {\n        radio.onCheck = null;\n        this.#group.delete(radio);\n    }\n    #onChangeBind;\n    #onChange(newValue, trigger) {\n        const currentValue = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#value);\n        if (!newValue || newValue === currentValue) return;\n        const currentRadio = this.#findRadio(currentValue), newRadio = this.#findRadio(newValue);\n        currentRadio?.check(false, trigger);\n        newRadio?.check(true, trigger);\n        this.#value.set(newValue);\n        this.onValueChange?.(newValue, trigger);\n    }\n    #findRadio(newValue) {\n        for (const radio of this.#group){\n            if (newValue === (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(radio.value)) return radio;\n        }\n        return null;\n    }\n    constructor(...args){\n        super(...args), this.#group = /* @__PURE__ */ new Set(), this.#value = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(\"\"), this.#controller = null, this.#onChangeBind = this.#onChange.bind(this);\n    }\n}\nclass RadioGroup extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            value: \"\"\n        };\n    }\n    #controller;\n    /**\n   * A list of radio values that belong this group.\n   */ get values() {\n        return this.#controller.values;\n    }\n    /**\n   * The radio value that is checked in this group.\n   */ get value() {\n        return this.#controller.value;\n    }\n    set value(newValue) {\n        this.#controller.value = newValue;\n    }\n    constructor(){\n        super();\n        this.#controller = new RadioGroupController();\n        this.#controller.onValueChange = this.#onValueChange.bind(this);\n    }\n    onSetup() {\n        if (IS_SERVER) this.#watchValue();\n        else (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchValue.bind(this));\n    }\n    #watchValue() {\n        this.#controller.value = this.$props.value();\n    }\n    #onValueChange(value, trigger) {\n        const event1 = this.createEvent(\"change\", {\n            detail: value,\n            trigger\n        });\n        this.dispatch(event1);\n    }\n}\nconst radiogroup__proto = RadioGroup.prototype;\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(radiogroup__proto, \"values\");\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(radiogroup__proto, \"value\");\nclass Radio extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            value: \"\"\n        };\n    }\n    #checked;\n    #controller;\n    /**\n   * Whether this radio is currently checked.\n   */ get checked() {\n        return this.#checked();\n    }\n    constructor(){\n        super(), this.#checked = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(false), this.#controller = {\n            value: this.$props.value,\n            check: this.#check.bind(this),\n            onCheck: null\n        };\n        new FocusVisibleController();\n    }\n    onSetup() {\n        this.setAttributes({\n            value: this.$props.value,\n            \"data-checked\": this.#checked,\n            \"aria-checked\": $ariaBool(this.#checked)\n        });\n    }\n    onAttach(el) {\n        const isMenuItem = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.hasProvidedContext)(menuContext);\n        setAttributeIfEmpty(el, \"tabindex\", isMenuItem ? \"-1\" : \"0\");\n        setAttributeIfEmpty(el, \"role\", isMenuItem ? \"menuitemradio\" : \"radio\");\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchValue.bind(this));\n    }\n    onConnect(el) {\n        this.#addToGroup();\n        onPress(el, this.#onPress.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(this.#onDisconnect.bind(this));\n    }\n    #onDisconnect() {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.scoped)(()=>{\n            const group = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(radioControllerContext);\n            group.remove(this.#controller);\n        }, this.connectScope);\n    }\n    #addToGroup() {\n        const group = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useContext)(radioControllerContext);\n        group.add(this.#controller);\n    }\n    #watchValue() {\n        const { value } = this.$props, newValue = value();\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#checked)) {\n            this.#controller.onCheck?.(newValue);\n        }\n    }\n    #onPress(event1) {\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#checked)) return;\n        this.#onChange(true, event1);\n        this.#onSelect(event1);\n        this.#controller.onCheck?.((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$props.value), event1);\n    }\n    #check(value, trigger) {\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#checked) === value) return;\n        this.#onChange(value, trigger);\n    }\n    #onChange(value, trigger) {\n        this.#checked.set(value);\n        this.dispatch(\"change\", {\n            detail: value,\n            trigger\n        });\n    }\n    #onSelect(trigger) {\n        this.dispatch(\"select\", {\n            trigger\n        });\n    }\n}\nconst radio__proto = Radio.prototype;\n(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.prop)(radio__proto, \"checked\");\nclass Gesture extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            disabled: false,\n            event: void 0,\n            action: void 0\n        };\n    }\n    #media;\n    #provider;\n    onSetup() {\n        this.#media = useMediaContext();\n        const { event: event1, action } = this.$props;\n        this.setAttributes({\n            event: event1,\n            action\n        });\n    }\n    onAttach(el) {\n        el.setAttribute(\"data-media-gesture\", \"\");\n        el.style.setProperty(\"pointer-events\", \"none\");\n    }\n    onConnect(el) {\n        this.#provider = this.#media.player.el?.querySelector(\"[data-media-provider]\");\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#attachListener.bind(this));\n    }\n    #attachListener() {\n        let eventType = this.$props.event(), disabled = this.$props.disabled();\n        if (!this.#provider || !eventType || disabled) return;\n        if (/^dbl/.test(eventType)) {\n            eventType = eventType.split(/^dbl/)[1];\n        }\n        if (eventType === \"pointerup\" || eventType === \"pointerdown\") {\n            const pointer = this.#media.$state.pointer();\n            if (pointer === \"coarse\") {\n                eventType = eventType === \"pointerup\" ? \"touchend\" : \"touchstart\";\n            }\n        }\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(this.#provider, eventType, this.#acceptEvent.bind(this), {\n            passive: false\n        });\n    }\n    #presses;\n    #pressTimerId;\n    #acceptEvent(event1) {\n        if (this.$props.disabled() || (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isPointerEvent)(event1) && (event1.button !== 0 || this.#media.activeMenu) || (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isTouchEvent)(event1) && this.#media.activeMenu || isTouchPinchEvent(event1) || !this.#inBounds(event1)) {\n            return;\n        }\n        event1.MEDIA_GESTURE = true;\n        event1.preventDefault();\n        const eventType = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$props.event), isDblEvent = eventType?.startsWith(\"dbl\");\n        if (!isDblEvent) {\n            if (this.#presses === 0) {\n                setTimeout(()=>{\n                    if (this.#presses === 1) this.#handleEvent(event1);\n                }, 250);\n            }\n        } else if (this.#presses === 1) {\n            queueMicrotask(()=>this.#handleEvent(event1));\n            clearTimeout(this.#pressTimerId);\n            this.#presses = 0;\n            return;\n        }\n        if (this.#presses === 0) {\n            this.#pressTimerId = window.setTimeout(()=>{\n                this.#presses = 0;\n            }, 275);\n        }\n        this.#presses++;\n    }\n    #handleEvent(event1) {\n        this.el.setAttribute(\"data-triggered\", \"\");\n        requestAnimationFrame(()=>{\n            if (this.#isTopLayer()) {\n                this.#performAction((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.$props.action), event1);\n            }\n            requestAnimationFrame(()=>{\n                this.el.removeAttribute(\"data-triggered\");\n            });\n        });\n    }\n    /** Validate event occurred in gesture bounds. */ #inBounds(event1) {\n        if (!this.el) return false;\n        if ((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isPointerEvent)(event1) || (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isMouseEvent)(event1) || (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isTouchEvent)(event1)) {\n            const touch = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isTouchEvent)(event1) ? event1.changedTouches[0] ?? event1.touches[0] : void 0;\n            const clientX = touch?.clientX ?? event1.clientX;\n            const clientY = touch?.clientY ?? event1.clientY;\n            const rect = this.el.getBoundingClientRect();\n            const inBounds = clientY >= rect.top && clientY <= rect.bottom && clientX >= rect.left && clientX <= rect.right;\n            return event1.type.includes(\"leave\") ? !inBounds : inBounds;\n        }\n        return true;\n    }\n    /** Validate gesture has the highest z-index in this triggered group. */ #isTopLayer() {\n        const gestures = this.#media.player.el.querySelectorAll(\"[data-media-gesture][data-triggered]\");\n        return Array.from(gestures).sort((a, b)=>+getComputedStyle(b).zIndex - +getComputedStyle(a).zIndex)[0] === this.el;\n    }\n    #performAction(action, trigger) {\n        if (!action) return;\n        const willTriggerEvent = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.DOMEvent(\"will-trigger\", {\n            detail: action,\n            cancelable: true,\n            trigger\n        });\n        this.dispatchEvent(willTriggerEvent);\n        if (willTriggerEvent.defaultPrevented) return;\n        const [method, value] = action.replace(/:([a-z])/, \"-$1\").split(\":\");\n        if (action.includes(\":fullscreen\")) {\n            this.#media.remote.toggleFullscreen(\"prefer-media\", trigger);\n        } else if (action.includes(\"seek:\")) {\n            this.#media.remote.seek((0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(this.#media.$state.currentTime) + (+value || 0), trigger);\n        } else {\n            this.#media.remote[(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.kebabToCamelCase)(method)](trigger);\n        }\n        this.dispatch(\"trigger\", {\n            detail: action,\n            trigger\n        });\n    }\n    constructor(...args){\n        super(...args), this.#provider = null, this.#presses = 0, this.#pressTimerId = -1;\n    }\n}\nclass CaptionsTextRenderer {\n    #track;\n    #renderer;\n    #events;\n    constructor(renderer){\n        this.priority = 10;\n        this.#track = null;\n        this.#renderer = renderer;\n    }\n    attach() {}\n    canRender() {\n        return true;\n    }\n    detach() {\n        this.#events?.abort();\n        this.#events = void 0;\n        this.#renderer.reset();\n        this.#track = null;\n    }\n    changeTrack(track) {\n        if (!track || this.#track === track) return;\n        this.#events?.abort();\n        this.#events = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(track);\n        if (track.readyState < 2) {\n            this.#renderer.reset();\n            this.#events.add(\"load\", ()=>this.#changeTrack(track), {\n                once: true\n            });\n        } else {\n            this.#changeTrack(track);\n        }\n        this.#events.add(\"add-cue\", (event1)=>{\n            this.#renderer.addCue(event1.detail);\n        }).add(\"remove-cue\", (event1)=>{\n            this.#renderer.removeCue(event1.detail);\n        });\n        this.#track = track;\n    }\n    #changeTrack(track) {\n        this.#renderer.changeTrack({\n            cues: [\n                ...track.cues\n            ],\n            regions: [\n                ...track.regions\n            ]\n        });\n    }\n}\nclass Captions extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            textDir: \"ltr\",\n            exampleText: \"Captions look like this.\"\n        };\n    }\n    #media;\n    static{\n        this.lib = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null);\n    }\n    onSetup() {\n        this.#media = useMediaContext();\n        this.setAttributes({\n            \"aria-hidden\": $ariaBool(this.#isHidden.bind(this))\n        });\n    }\n    onAttach(el) {\n        el.style.setProperty(\"pointer-events\", \"none\");\n    }\n    onConnect(el) {\n        if (!Captions.lib()) {\n            __webpack_require__.e(/*! import() */ \"vendor-chunks/media-captions\").then(__webpack_require__.bind(__webpack_require__, /*! media-captions */ \"(ssr)/./node_modules/media-captions/dist/dev.js\")).then((lib)=>Captions.lib.set(lib));\n        }\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchViewType.bind(this));\n    }\n    #isHidden() {\n        const { textTrack, remotePlaybackState, iOSControls } = this.#media.$state, track = textTrack();\n        return iOSControls() || remotePlaybackState() === \"connected\" || !track || !isTrackCaptionKind(track);\n    }\n    #watchViewType() {\n        if (!Captions.lib()) return;\n        const { viewType } = this.#media.$state;\n        if (viewType() === \"audio\") {\n            return this.#setupAudioView();\n        } else {\n            return this.#setupVideoView();\n        }\n    }\n    #setupAudioView() {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onTrackChange.bind(this));\n        this.#listenToFontStyleChanges(null);\n        return ()=>{\n            this.el.textContent = \"\";\n        };\n    }\n    #onTrackChange() {\n        if (this.#isHidden()) return;\n        this.#onCueChange();\n        const { textTrack } = this.#media.$state;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(textTrack(), \"cue-change\", this.#onCueChange.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onUpdateTimedNodes.bind(this));\n    }\n    #onCueChange() {\n        this.el.textContent = \"\";\n        if (this.#hideExampleTimer >= 0) {\n            this.#removeExample();\n        }\n        const { realCurrentTime, textTrack } = this.#media.$state, { renderVTTCueString } = Captions.lib(), time = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(realCurrentTime), activeCues = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.peek)(textTrack).activeCues;\n        for (const cue of activeCues){\n            const displayEl = this.#createCueDisplayElement(), cueEl = this.#createCueElement();\n            cueEl.innerHTML = renderVTTCueString(cue, time);\n            displayEl.append(cueEl);\n            this.el.append(cueEl);\n        }\n    }\n    #onUpdateTimedNodes() {\n        const { realCurrentTime } = this.#media.$state, { updateTimedVTTCueNodes } = Captions.lib();\n        updateTimedVTTCueNodes(this.el, realCurrentTime());\n    }\n    #setupVideoView() {\n        const { CaptionsRenderer } = Captions.lib(), renderer = new CaptionsRenderer(this.el), textRenderer = new CaptionsTextRenderer(renderer);\n        this.#media.textRenderers.add(textRenderer);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchTextDirection.bind(this, renderer));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchMediaTime.bind(this, renderer));\n        this.#listenToFontStyleChanges(renderer);\n        return ()=>{\n            this.el.textContent = \"\";\n            this.#media.textRenderers.remove(textRenderer);\n            renderer.destroy();\n        };\n    }\n    #watchTextDirection(renderer) {\n        renderer.dir = this.$props.textDir();\n    }\n    #watchMediaTime(renderer) {\n        if (this.#isHidden()) return;\n        const { realCurrentTime, textTrack } = this.#media.$state;\n        renderer.currentTime = realCurrentTime();\n        if (this.#hideExampleTimer >= 0 && textTrack()?.activeCues[0]) {\n            this.#removeExample();\n        }\n    }\n    #listenToFontStyleChanges(renderer) {\n        const player = this.#media.player;\n        if (!player) return;\n        const onChange = this.#onFontStyleChange.bind(this, renderer);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(player, \"vds-font-change\", onChange);\n    }\n    #onFontStyleChange(renderer) {\n        if (this.#hideExampleTimer >= 0) {\n            this.#hideExample();\n            return;\n        }\n        const { textTrack } = this.#media.$state;\n        if (!textTrack()?.activeCues[0]) {\n            this.#showExample();\n        } else {\n            renderer?.update(true);\n        }\n    }\n    #showExample() {\n        const display = this.#createCueDisplayElement();\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(display, \"data-example\", \"\");\n        const cue = this.#createCueElement();\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(cue, \"data-example\", \"\");\n        cue.textContent = this.$props.exampleText();\n        display?.append(cue);\n        this.el?.append(display);\n        this.el?.setAttribute(\"data-example\", \"\");\n        this.#hideExample();\n    }\n    #hideExampleTimer;\n    #hideExample() {\n        window.clearTimeout(this.#hideExampleTimer);\n        this.#hideExampleTimer = window.setTimeout(this.#removeExample.bind(this), 2500);\n    }\n    #removeExample() {\n        this.el?.removeAttribute(\"data-example\");\n        if (this.el?.querySelector(\"[data-example]\")) this.el.textContent = \"\";\n        this.#hideExampleTimer = -1;\n    }\n    #createCueDisplayElement() {\n        const el = document.createElement(\"div\");\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-part\", \"cue-display\");\n        return el;\n    }\n    #createCueElement() {\n        const el = document.createElement(\"div\");\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(el, \"data-part\", \"cue\");\n        return el;\n    }\n    constructor(...args){\n        super(...args), this.#hideExampleTimer = -1;\n    }\n}\nclass Poster extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            src: null,\n            alt: null,\n            crossOrigin: null\n        };\n    }\n    static{\n        this.state = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.State({\n            img: null,\n            src: null,\n            alt: null,\n            crossOrigin: null,\n            loading: true,\n            error: null,\n            hidden: false\n        });\n    }\n    #media;\n    onSetup() {\n        this.#media = useMediaContext();\n        this.#watchSrc();\n        this.#watchAlt();\n        this.#watchCrossOrigin();\n        this.#watchHidden();\n    }\n    onAttach(el) {\n        el.style.setProperty(\"pointer-events\", \"none\");\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchImg.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchSrc.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchAlt.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchCrossOrigin.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchHidden.bind(this));\n        const { started } = this.#media.$state;\n        this.setAttributes({\n            \"data-visible\": ()=>!started() && !this.$state.hidden(),\n            \"data-loading\": this.#isLoading.bind(this),\n            \"data-error\": this.#hasError.bind(this),\n            \"data-hidden\": this.$state.hidden\n        });\n    }\n    onConnect(el) {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onPreconnect.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#onLoadStart.bind(this));\n    }\n    #hasError() {\n        const { error } = this.$state;\n        return !(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.isNull)(error());\n    }\n    #onPreconnect() {\n        const { canLoadPoster, poster } = this.#media.$state;\n        if (!canLoadPoster() && poster()) preconnect(poster(), \"preconnect\");\n    }\n    #watchHidden() {\n        const { src } = this.$props, { poster, nativeControls } = this.#media.$state;\n        this.el && (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this.el, \"display\", nativeControls() ? \"none\" : null);\n        this.$state.hidden.set(this.#hasError() || !(src() || poster()) || nativeControls());\n    }\n    #isLoading() {\n        const { loading, hidden } = this.$state;\n        return !hidden() && loading();\n    }\n    #watchImg() {\n        const img = this.$state.img();\n        if (!img) return;\n        new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(img).add(\"load\", this.#onLoad.bind(this)).add(\"error\", this.#onError.bind(this));\n        if (img.complete) this.#onLoad();\n    }\n    #prevSrc;\n    #watchSrc() {\n        const { poster: defaultPoster } = this.#media.$props, { canLoadPoster, providedPoster, inferredPoster } = this.#media.$state;\n        const src = this.$props.src() || \"\", poster = src || defaultPoster() || inferredPoster();\n        if (this.#prevSrc === providedPoster()) {\n            providedPoster.set(src);\n        }\n        this.$state.src.set(canLoadPoster() && poster.length ? poster : null);\n        this.#prevSrc = src;\n    }\n    #watchAlt() {\n        const { src } = this.$props, { alt } = this.$state, { poster } = this.#media.$state;\n        alt.set(src() || poster() ? this.$props.alt() : null);\n    }\n    #watchCrossOrigin() {\n        const { crossOrigin: crossOriginProp } = this.$props, { crossOrigin: crossOriginState } = this.$state, { crossOrigin: mediaCrossOrigin, poster: src } = this.#media.$state, crossOrigin = crossOriginProp() !== null ? crossOriginProp() : mediaCrossOrigin();\n        crossOriginState.set(/ytimg\\.com|vimeo/.test(src() || \"\") ? null : crossOrigin === true ? \"anonymous\" : crossOrigin);\n    }\n    #onLoadStart() {\n        const { loading, error } = this.$state, { canLoadPoster, poster } = this.#media.$state;\n        loading.set(canLoadPoster() && !!poster());\n        error.set(null);\n    }\n    #onLoad() {\n        const { loading, error } = this.$state;\n        loading.set(false);\n        error.set(null);\n    }\n    #onError(event1) {\n        const { loading, error } = this.$state;\n        loading.set(false);\n        error.set(event1);\n    }\n    constructor(...args){\n        super(...args), this.#prevSrc = \"\";\n    }\n}\nclass Time extends _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.Component {\n    static{\n        this.props = {\n            type: \"current\",\n            showHours: false,\n            padHours: null,\n            padMinutes: null,\n            remainder: false,\n            toggle: false,\n            hidden: false\n        };\n    }\n    static{\n        this.state = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.State({\n            timeText: \"\",\n            hidden: false\n        });\n    }\n    #media;\n    #invert;\n    #isVisible;\n    #isIntersecting;\n    onSetup() {\n        this.#media = useMediaContext();\n        this.#watchTime();\n        const { type } = this.$props;\n        this.setAttributes({\n            \"data-type\": type,\n            \"data-remainder\": this.#shouldInvert.bind(this)\n        });\n        new IntersectionObserverController({\n            callback: this.#onIntersectionChange.bind(this)\n        }).attach(this);\n    }\n    onAttach(el) {\n        if (!el.hasAttribute(\"role\")) (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchRole.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchTime.bind(this));\n    }\n    onConnect(el) {\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.onDispose)(observeVisibility(el, this.#isVisible.set));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchHidden.bind(this));\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchToggle.bind(this));\n    }\n    #onIntersectionChange(entries) {\n        this.#isIntersecting.set(entries[0].isIntersecting);\n    }\n    #watchHidden() {\n        const { hidden } = this.$props;\n        this.$state.hidden.set(hidden() || !this.#isVisible() || !this.#isIntersecting());\n    }\n    #watchToggle() {\n        if (!this.$props.toggle()) {\n            this.#invert.set(null);\n            return;\n        }\n        if (this.el) {\n            onPress(this.el, this.#onToggle.bind(this));\n        }\n    }\n    #watchTime() {\n        const { hidden, timeText } = this.$state, { duration } = this.#media.$state;\n        if (hidden()) return;\n        const { type, padHours, padMinutes, showHours } = this.$props, seconds = this.#getSeconds(type()), $duration = duration(), shouldInvert = this.#shouldInvert();\n        if (!Number.isFinite(seconds + $duration)) {\n            timeText.set(\"LIVE\");\n            return;\n        }\n        const time = shouldInvert ? Math.max(0, $duration - seconds) : seconds, formattedTime = formatTime(time, {\n            padHrs: padHours(),\n            padMins: padMinutes(),\n            showHrs: showHours()\n        });\n        timeText.set((shouldInvert ? \"-\" : \"\") + formattedTime);\n    }\n    #watchRole() {\n        if (!this.el) return;\n        const { toggle } = this.$props;\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this.el, \"role\", toggle() ? \"timer\" : null);\n        (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.setAttribute)(this.el, \"tabindex\", toggle() ? 0 : null);\n    }\n    #getSeconds(type) {\n        const { bufferedEnd, duration, currentTime } = this.#media.$state;\n        switch(type){\n            case \"buffered\":\n                return bufferedEnd();\n            case \"duration\":\n                return duration();\n            default:\n                return currentTime();\n        }\n    }\n    #shouldInvert() {\n        return this.$props.remainder() && this.#invert() !== false;\n    }\n    #onToggle(event1) {\n        event1.preventDefault();\n        if (this.#invert() === null) {\n            this.#invert.set(!this.$props.remainder());\n            return;\n        }\n        this.#invert.set((v)=>!v);\n    }\n    constructor(...args){\n        super(...args), this.#invert = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(null), this.#isVisible = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(true), this.#isIntersecting = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(true);\n    }\n}\nclass MediaPlayerInstance extends MediaPlayer {\n}\nclass MediaProviderInstance extends MediaProvider {\n}\nclass MediaAnnouncerInstance extends MediaAnnouncer {\n}\nclass ControlsInstance extends Controls {\n}\nclass ControlsGroupInstance extends ControlsGroup {\n}\nclass ToggleButtonInstance extends ToggleButton {\n}\nclass CaptionButtonInstance extends CaptionButton {\n}\nclass FullscreenButtonInstance extends FullscreenButton {\n}\nclass LiveButtonInstance extends LiveButton {\n}\nclass MuteButtonInstance extends MuteButton {\n}\nclass PIPButtonInstance extends PIPButton {\n}\nclass PlayButtonInstance extends PlayButton {\n}\nclass AirPlayButtonInstance extends AirPlayButton {\n}\nclass GoogleCastButtonInstance extends GoogleCastButton {\n}\nclass SeekButtonInstance extends SeekButton {\n}\nclass TooltipInstance extends Tooltip {\n}\nclass TooltipTriggerInstance extends TooltipTrigger {\n}\nclass TooltipContentInstance extends TooltipContent {\n}\nclass SliderInstance extends Slider {\n}\nclass TimeSliderInstance extends TimeSlider {\n}\nclass VolumeSliderInstance extends VolumeSlider {\n}\nclass AudioGainSliderInstance extends AudioGainSlider {\n}\nclass SpeedSliderInstance extends SpeedSlider {\n}\nclass QualitySliderInstance extends QualitySlider {\n}\nclass SliderThumbnailInstance extends SliderThumbnail {\n}\nclass SliderValueInstance extends SliderValue {\n}\nclass SliderVideoInstance extends SliderVideo {\n}\nclass SliderPreviewInstance extends SliderPreview {\n}\nclass SliderChaptersInstance extends SliderChapters {\n}\nclass MenuInstance extends Menu {\n}\nclass MenuButtonInstance extends MenuButton {\n}\nclass MenuItemsInstance extends MenuItems {\n}\nclass MenuItemInstance extends MenuItem {\n}\nclass MenuPortalInstance extends MenuPortal {\n}\nclass RadioGroupInstance extends RadioGroup {\n}\nclass RadioInstance extends Radio {\n}\nclass CaptionsInstance extends Captions {\n}\nclass GestureInstance extends Gesture {\n}\nclass PosterInstance extends Poster {\n}\nclass ThumbnailInstance extends Thumbnail {\n}\nclass TimeInstance extends Time {\n}\nconst Slot = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { children, ...slotProps } = props;\n    const childrenArray = react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(children);\n    const slottable = childrenArray.find(isSlottable);\n    if (slottable) {\n        const newElement = slottable.props.children;\n        const newChildren = childrenArray.map((child)=>{\n            if (child === slottable) {\n                if (react__WEBPACK_IMPORTED_MODULE_0__.Children.count(newElement) > 1) return react__WEBPACK_IMPORTED_MODULE_0__.Children.only(null);\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(newElement) ? newElement.props.children : null;\n            } else {\n                return child;\n            }\n        });\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlotClone, {\n            ...slotProps,\n            ref: forwardedRef\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(newElement) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(newElement, void 0, newChildren) : null);\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SlotClone, {\n        ...slotProps,\n        ref: forwardedRef\n    }, children);\n});\nSlot.displayName = \"Slot\";\nconst SlotClone = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { children, ...slotProps } = props;\n    if (/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(children)) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(children, {\n            ...mergeProps(slotProps, children.props),\n            ref: forwardedRef ? (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.composeRefs)(forwardedRef, children.ref) : children.ref\n        });\n    }\n    return react__WEBPACK_IMPORTED_MODULE_0__.Children.count(children) > 1 ? react__WEBPACK_IMPORTED_MODULE_0__.Children.only(null) : null;\n});\nSlotClone.displayName = \"SlotClone\";\nconst Slottable = ({ children })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n};\nfunction isSlottable(child) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child) && child.type === Slottable;\n}\nfunction mergeProps(slotProps, childProps) {\n    const overrideProps = {\n        ...childProps\n    };\n    for(const propName in childProps){\n        const slotPropValue = slotProps[propName];\n        const childPropValue = childProps[propName];\n        const isHandler = /^on[A-Z]/.test(propName);\n        if (isHandler) {\n            if (slotPropValue && childPropValue) {\n                overrideProps[propName] = (...args)=>{\n                    childPropValue(...args);\n                    slotPropValue(...args);\n                };\n            } else if (slotPropValue) {\n                overrideProps[propName] = slotPropValue;\n            }\n        } else if (propName === \"style\") {\n            overrideProps[propName] = {\n                ...slotPropValue,\n                ...childPropValue\n            };\n        } else if (propName === \"className\") {\n            overrideProps[propName] = [\n                slotPropValue,\n                childPropValue\n            ].filter(Boolean).join(\" \");\n        }\n    }\n    return {\n        ...slotProps,\n        ...overrideProps\n    };\n}\nconst NODES = [\n    \"button\",\n    \"div\",\n    \"span\",\n    \"img\",\n    \"video\",\n    \"audio\"\n];\nconst Primitive = NODES.reduce((primitives, node)=>{\n    const Node1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n        const { asChild, ...primitiveProps } = props;\n        const Comp = asChild ? Slot : node;\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Comp, {\n            ...primitiveProps,\n            ref: forwardedRef\n        });\n    });\n    Node1.displayName = `Primitive.${node}`;\n    return {\n        ...primitives,\n        [node]: Node1\n    };\n}, {});\nfunction isRemotionProvider(provider) {\n    return provider?.$$PROVIDER_TYPE === \"REMOTION\";\n}\nfunction isRemotionSrc(src) {\n    return src?.type === \"video/remotion\";\n}\nconst sliderStateRecord = SliderInstance.state.record, initialSliderStore = Object.keys(sliderStateRecord).reduce((store, prop)=>({\n        ...store,\n        [prop] () {\n            return sliderStateRecord[prop];\n        }\n    }), {});\nfunction useSliderState(prop, ref) {\n    const $state = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useStateContext)(sliderState);\n    if (!$state && !ref) {\n        console.warn(`[vidstack] \\`useSliderState\\` requires \\`RefObject<SliderInstance>\\` argument if called outside of a slider component`);\n    }\n    return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)((ref?.current?.$state || $state || initialSliderStore)[prop]);\n}\nfunction useSliderStore(ref) {\n    const $state = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useStateContext)(sliderState);\n    if (!$state && !ref) {\n        console.warn(`[vidstack] \\`useSliderStore\\` requires \\`RefObject<SliderInstance>\\` argument if called outside of a slider component`);\n    }\n    return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useSignalRecord)(ref?.current ? ref.current.$state : $state || initialSliderStore);\n}\nconst mediaStateRecord = MediaPlayerInstance.state.record, initialMediaStore = Object.keys(mediaStateRecord).reduce((store, prop)=>({\n        ...store,\n        [prop] () {\n            return mediaStateRecord[prop];\n        }\n    }), {});\nfunction useMediaState(prop, ref) {\n    const $state = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useStateContext)(mediaState);\n    if (!$state && !ref) {\n        console.warn(`[vidstack] \\`useMediaState\\` requires \\`RefObject<MediaPlayerInstance>\\` argument if called outside the \\`<MediaPlayer>\\` component`);\n    }\n    return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)((ref?.current?.$state || $state || initialMediaStore)[prop]);\n}\nfunction useMediaStore(ref) {\n    const $state = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useStateContext)(mediaState);\n    if (!$state && !ref) {\n        console.warn(`[vidstack] \\`useMediaStore\\` requires \\`RefObject<MediaPlayerInstance>\\` argument if called outside the \\`<MediaPlayer>\\` component`);\n    }\n    return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useSignalRecord)(ref?.current ? ref.current.$state : $state || initialMediaStore);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-DUlCophs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Component: () => (/* binding */ Component),\n/* harmony export */   DOMEvent: () => (/* binding */ DOMEvent),\n/* harmony export */   EventsController: () => (/* binding */ EventsController),\n/* harmony export */   EventsTarget: () => (/* binding */ EventsTarget),\n/* harmony export */   Icon$0: () => (/* binding */ Icon$0),\n/* harmony export */   Icon$104: () => (/* binding */ Icon$104),\n/* harmony export */   Icon$105: () => (/* binding */ Icon$105),\n/* harmony export */   Icon$11: () => (/* binding */ Icon$11),\n/* harmony export */   Icon$13: () => (/* binding */ Icon$13),\n/* harmony export */   Icon$16: () => (/* binding */ Icon$16),\n/* harmony export */   Icon$19: () => (/* binding */ Icon$19),\n/* harmony export */   Icon$22: () => (/* binding */ Icon$22),\n/* harmony export */   Icon$24: () => (/* binding */ Icon$24),\n/* harmony export */   Icon$26: () => (/* binding */ Icon$26),\n/* harmony export */   Icon$27: () => (/* binding */ Icon$27),\n/* harmony export */   Icon$31: () => (/* binding */ Icon$31),\n/* harmony export */   Icon$33: () => (/* binding */ Icon$33),\n/* harmony export */   Icon$34: () => (/* binding */ Icon$34),\n/* harmony export */   Icon$35: () => (/* binding */ Icon$35),\n/* harmony export */   Icon$39: () => (/* binding */ Icon$39),\n/* harmony export */   Icon$40: () => (/* binding */ Icon$40),\n/* harmony export */   Icon$5: () => (/* binding */ Icon$5),\n/* harmony export */   Icon$53: () => (/* binding */ Icon$53),\n/* harmony export */   Icon$54: () => (/* binding */ Icon$54),\n/* harmony export */   Icon$56: () => (/* binding */ Icon$56),\n/* harmony export */   Icon$59: () => (/* binding */ Icon$59),\n/* harmony export */   Icon$60: () => (/* binding */ Icon$60),\n/* harmony export */   Icon$61: () => (/* binding */ Icon$61),\n/* harmony export */   Icon$62: () => (/* binding */ Icon$62),\n/* harmony export */   Icon$63: () => (/* binding */ Icon$63),\n/* harmony export */   Icon$74: () => (/* binding */ Icon$74),\n/* harmony export */   Icon$77: () => (/* binding */ Icon$77),\n/* harmony export */   Icon$8: () => (/* binding */ Icon$8),\n/* harmony export */   Icon$81: () => (/* binding */ Icon$81),\n/* harmony export */   Icon$88: () => (/* binding */ Icon$88),\n/* harmony export */   State: () => (/* binding */ State),\n/* harmony export */   ViewController: () => (/* binding */ ViewController),\n/* harmony export */   animationFrameThrottle: () => (/* binding */ animationFrameThrottle),\n/* harmony export */   appendTriggerEvent: () => (/* binding */ appendTriggerEvent),\n/* harmony export */   ariaBool: () => (/* binding */ ariaBool),\n/* harmony export */   camelToKebabCase: () => (/* binding */ camelToKebabCase),\n/* harmony export */   chromecast: () => (/* binding */ chromecast),\n/* harmony export */   composeRefs: () => (/* binding */ composeRefs),\n/* harmony export */   computed: () => (/* binding */ computed),\n/* harmony export */   createContext: () => (/* binding */ createContext),\n/* harmony export */   createDisposalBin: () => (/* binding */ createDisposalBin),\n/* harmony export */   createReactComponent: () => (/* binding */ createReactComponent),\n/* harmony export */   createScope: () => (/* binding */ createScope),\n/* harmony export */   deferredPromise: () => (/* binding */ deferredPromise),\n/* harmony export */   effect: () => (/* binding */ effect),\n/* harmony export */   findTriggerEvent: () => (/* binding */ findTriggerEvent),\n/* harmony export */   fscreen: () => (/* binding */ fscreen),\n/* harmony export */   functionDebounce: () => (/* binding */ functionDebounce),\n/* harmony export */   functionThrottle: () => (/* binding */ functionThrottle),\n/* harmony export */   getScope: () => (/* binding */ getScope),\n/* harmony export */   hasProvidedContext: () => (/* binding */ hasProvidedContext),\n/* harmony export */   hasTriggerEvent: () => (/* binding */ hasTriggerEvent),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isBoolean: () => (/* binding */ isBoolean),\n/* harmony export */   isDOMNode: () => (/* binding */ isDOMNode),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isKeyboardClick: () => (/* binding */ isKeyboardClick),\n/* harmony export */   isKeyboardEvent: () => (/* binding */ isKeyboardEvent),\n/* harmony export */   isMouseEvent: () => (/* binding */ isMouseEvent),\n/* harmony export */   isNil: () => (/* binding */ isNil),\n/* harmony export */   isNull: () => (/* binding */ isNull),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isPointerEvent: () => (/* binding */ isPointerEvent),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isTouchEvent: () => (/* binding */ isTouchEvent),\n/* harmony export */   isUndefined: () => (/* binding */ isUndefined),\n/* harmony export */   isWriteSignal: () => (/* binding */ isWriteSignal),\n/* harmony export */   kebabToCamelCase: () => (/* binding */ kebabToCamelCase),\n/* harmony export */   keysOf: () => (/* binding */ keysOf),\n/* harmony export */   listenEvent: () => (/* binding */ listenEvent),\n/* harmony export */   method: () => (/* binding */ method),\n/* harmony export */   noop: () => (/* binding */ noop),\n/* harmony export */   onDispose: () => (/* binding */ onDispose),\n/* harmony export */   peek: () => (/* binding */ peek),\n/* harmony export */   prop: () => (/* binding */ prop),\n/* harmony export */   provideContext: () => (/* binding */ provideContext),\n/* harmony export */   r: () => (/* binding */ r),\n/* harmony export */   scoped: () => (/* binding */ scoped),\n/* harmony export */   setAttribute: () => (/* binding */ setAttribute),\n/* harmony export */   setStyle: () => (/* binding */ setStyle),\n/* harmony export */   signal: () => (/* binding */ signal),\n/* harmony export */   tick: () => (/* binding */ tick),\n/* harmony export */   toggleClass: () => (/* binding */ toggleClass),\n/* harmony export */   untrack: () => (/* binding */ untrack),\n/* harmony export */   uppercaseFirstChar: () => (/* binding */ uppercaseFirstChar),\n/* harmony export */   useContext: () => (/* binding */ useContext),\n/* harmony export */   useReactContext: () => (/* binding */ useReactContext),\n/* harmony export */   useReactScope: () => (/* binding */ useReactScope),\n/* harmony export */   useSignal: () => (/* binding */ useSignal),\n/* harmony export */   useSignalRecord: () => (/* binding */ useSignalRecord),\n/* harmony export */   useState: () => (/* binding */ useState),\n/* harmony export */   useStateContext: () => (/* binding */ useStateContext),\n/* harmony export */   waitIdlePeriod: () => (/* binding */ waitIdlePeriod),\n/* harmony export */   waitTimeout: () => (/* binding */ waitTimeout),\n/* harmony export */   walkTriggerEventChain: () => (/* binding */ walkTriggerEventChain),\n/* harmony export */   wasEnterKeyPressed: () => (/* binding */ wasEnterKeyPressed)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Component,DOMEvent,EventsController,EventsTarget,Icon$0,Icon$104,Icon$105,Icon$11,Icon$13,Icon$16,Icon$19,Icon$22,Icon$24,Icon$26,Icon$27,Icon$31,Icon$33,Icon$34,Icon$35,Icon$39,Icon$40,Icon$5,Icon$53,Icon$54,Icon$56,Icon$59,Icon$60,Icon$61,Icon$62,Icon$63,Icon$74,Icon$77,Icon$8,Icon$81,Icon$88,State,ViewController,animationFrameThrottle,appendTriggerEvent,ariaBool,camelToKebabCase,chromecast,composeRefs,computed,createContext,createDisposalBin,createReactComponent,createScope,deferredPromise,effect,findTriggerEvent,fscreen,functionDebounce,functionThrottle,getScope,hasProvidedContext,hasTriggerEvent,isArray,isBoolean,isDOMNode,isFunction,isKeyboardClick,isKeyboardEvent,isMouseEvent,isNil,isNull,isNumber,isObject,isPointerEvent,isString,isTouchEvent,isUndefined,isWriteSignal,kebabToCamelCase,keysOf,listenEvent,method,noop,onDispose,peek,prop,provideContext,r,scoped,setAttribute,setStyle,signal,tick,toggleClass,untrack,uppercaseFirstChar,useContext,useReactContext,useReactScope,useSignal,useSignalRecord,useState,useStateContext,waitIdlePeriod,waitTimeout,walkTriggerEventChain,wasEnterKeyPressed auto */ \nconst IS_SERVER = typeof document === \"undefined\";\nconst SCOPE = Symbol(\"SCOPE\");\nlet scheduledEffects = false, runningEffects = false, currentScope = null, currentObserver = null, currentObservers = null, currentObserversIndex = 0, effects = [], defaultContext = {};\nconst NOOP = ()=>{}, STATE_CLEAN = 0, STATE_CHECK = 1, STATE_DIRTY = 2, STATE_DISPOSED = 3;\nfunction flushEffects() {\n    scheduledEffects = true;\n    queueMicrotask(runEffects);\n}\nfunction runEffects() {\n    if (!effects.length) {\n        scheduledEffects = false;\n        return;\n    }\n    runningEffects = true;\n    for(let i = 0; i < effects.length; i++){\n        if (effects[i]._state !== STATE_CLEAN) runTop(effects[i]);\n    }\n    effects = [];\n    scheduledEffects = false;\n    runningEffects = false;\n}\nfunction runTop(node) {\n    let ancestors = [\n        node\n    ];\n    while(node = node[SCOPE]){\n        if (node._effect && node._state !== STATE_CLEAN) ancestors.push(node);\n    }\n    for(let i = ancestors.length - 1; i >= 0; i--){\n        updateCheck(ancestors[i]);\n    }\n}\nfunction root(init) {\n    const scope = createScope();\n    return compute(scope, !init.length ? init : init.bind(null, dispose.bind(scope)), null);\n}\nfunction peek(fn) {\n    return compute(currentScope, fn, null);\n}\nfunction untrack(fn) {\n    return compute(null, fn, null);\n}\nfunction tick() {\n    if (!runningEffects) runEffects();\n}\nfunction getScope() {\n    return currentScope;\n}\nfunction scoped(run2, scope) {\n    try {\n        return compute(scope, run2, null);\n    } catch (error) {\n        handleError(scope, error);\n        return;\n    }\n}\nfunction getContext(key, scope = currentScope) {\n    return scope?._context[key];\n}\nfunction setContext(key, value, scope = currentScope) {\n    if (scope) scope._context = {\n        ...scope._context,\n        [key]: value\n    };\n}\nfunction onDispose(disposable) {\n    if (!disposable || !currentScope) return disposable || NOOP;\n    const node = currentScope;\n    if (!node._disposal) {\n        node._disposal = disposable;\n    } else if (Array.isArray(node._disposal)) {\n        node._disposal.push(disposable);\n    } else {\n        node._disposal = [\n            node._disposal,\n            disposable\n        ];\n    }\n    return function removeDispose() {\n        if (node._state === STATE_DISPOSED) return;\n        disposable.call(null);\n        if (isFunction$1(node._disposal)) {\n            node._disposal = null;\n        } else if (Array.isArray(node._disposal)) {\n            node._disposal.splice(node._disposal.indexOf(disposable), 1);\n        }\n    };\n}\nfunction dispose(self = true) {\n    if (this._state === STATE_DISPOSED) return;\n    if (this._children) {\n        if (Array.isArray(this._children)) {\n            for(let i = this._children.length - 1; i >= 0; i--){\n                dispose.call(this._children[i]);\n            }\n        } else {\n            dispose.call(this._children);\n        }\n    }\n    if (self) {\n        const parent = this[SCOPE];\n        if (parent) {\n            if (Array.isArray(parent._children)) {\n                parent._children.splice(parent._children.indexOf(this), 1);\n            } else {\n                parent._children = null;\n            }\n        }\n        disposeNode(this);\n    }\n}\nfunction disposeNode(node) {\n    node._state = STATE_DISPOSED;\n    if (node._disposal) emptyDisposal(node);\n    if (node._sources) removeSourceObservers(node, 0);\n    node[SCOPE] = null;\n    node._sources = null;\n    node._observers = null;\n    node._children = null;\n    node._context = defaultContext;\n    node._handlers = null;\n}\nfunction emptyDisposal(scope) {\n    try {\n        if (Array.isArray(scope._disposal)) {\n            for(let i = scope._disposal.length - 1; i >= 0; i--){\n                const callable = scope._disposal[i];\n                callable.call(callable);\n            }\n        } else {\n            scope._disposal.call(scope._disposal);\n        }\n        scope._disposal = null;\n    } catch (error) {\n        handleError(scope, error);\n    }\n}\nfunction compute(scope, compute2, observer) {\n    const prevScope = currentScope, prevObserver = currentObserver;\n    currentScope = scope;\n    currentObserver = observer;\n    try {\n        return compute2.call(scope);\n    } finally{\n        currentScope = prevScope;\n        currentObserver = prevObserver;\n    }\n}\nfunction handleError(scope, error) {\n    if (!scope || !scope._handlers) throw error;\n    let i = 0, len = scope._handlers.length, currentError = error;\n    for(i = 0; i < len; i++){\n        try {\n            scope._handlers[i](currentError);\n            break;\n        } catch (error2) {\n            currentError = error2;\n        }\n    }\n    if (i === len) throw currentError;\n}\nfunction read() {\n    if (this._state === STATE_DISPOSED) return this._value;\n    if (currentObserver && !this._effect) {\n        if (!currentObservers && currentObserver._sources && currentObserver._sources[currentObserversIndex] == this) {\n            currentObserversIndex++;\n        } else if (!currentObservers) currentObservers = [\n            this\n        ];\n        else currentObservers.push(this);\n    }\n    if (this._compute) updateCheck(this);\n    return this._value;\n}\nfunction write(newValue) {\n    const value = isFunction$1(newValue) ? newValue(this._value) : newValue;\n    if (this._changed(this._value, value)) {\n        this._value = value;\n        if (this._observers) {\n            for(let i = 0; i < this._observers.length; i++){\n                notify(this._observers[i], STATE_DIRTY);\n            }\n        }\n    }\n    return this._value;\n}\nconst ScopeNode = function Scope() {\n    this[SCOPE] = null;\n    this._children = null;\n    if (currentScope) currentScope.append(this);\n};\nconst ScopeProto = ScopeNode.prototype;\nScopeProto._context = defaultContext;\nScopeProto._handlers = null;\nScopeProto._compute = null;\nScopeProto._disposal = null;\nScopeProto.append = function(child) {\n    child[SCOPE] = this;\n    if (!this._children) {\n        this._children = child;\n    } else if (Array.isArray(this._children)) {\n        this._children.push(child);\n    } else {\n        this._children = [\n            this._children,\n            child\n        ];\n    }\n    child._context = child._context === defaultContext ? this._context : {\n        ...this._context,\n        ...child._context\n    };\n    if (this._handlers) {\n        child._handlers = !child._handlers ? this._handlers : [\n            ...child._handlers,\n            ...this._handlers\n        ];\n    }\n};\nScopeProto.dispose = function() {\n    dispose.call(this);\n};\nfunction createScope() {\n    return new ScopeNode();\n}\nconst ComputeNode = function Computation(initialValue, compute2, options) {\n    ScopeNode.call(this);\n    this._state = compute2 ? STATE_DIRTY : STATE_CLEAN;\n    this._init = false;\n    this._effect = false;\n    this._sources = null;\n    this._observers = null;\n    this._value = initialValue;\n    this.id = options?.id ?? (this._compute ? \"computed\" : \"signal\");\n    if (compute2) this._compute = compute2;\n    if (options && options.dirty) this._changed = options.dirty;\n};\nconst ComputeProto = ComputeNode.prototype;\nObject.setPrototypeOf(ComputeProto, ScopeProto);\nComputeProto._changed = isNotEqual;\nComputeProto.call = read;\nfunction createComputation(initialValue, compute2, options) {\n    return new ComputeNode(initialValue, compute2, options);\n}\nfunction isNotEqual(a, b) {\n    return a !== b;\n}\nfunction isFunction$1(value) {\n    return typeof value === \"function\";\n}\nfunction updateCheck(node) {\n    if (node._state === STATE_CHECK) {\n        for(let i = 0; i < node._sources.length; i++){\n            updateCheck(node._sources[i]);\n            if (node._state === STATE_DIRTY) {\n                break;\n            }\n        }\n    }\n    if (node._state === STATE_DIRTY) update(node);\n    else node._state = STATE_CLEAN;\n}\nfunction cleanup(node) {\n    if (node._children) dispose.call(node, false);\n    if (node._disposal) emptyDisposal(node);\n    node._handlers = node[SCOPE] ? node[SCOPE]._handlers : null;\n}\nfunction update(node) {\n    let prevObservers = currentObservers, prevObserversIndex = currentObserversIndex;\n    currentObservers = null;\n    currentObserversIndex = 0;\n    try {\n        cleanup(node);\n        const result = compute(node, node._compute, node);\n        updateObservers(node);\n        if (!node._effect && node._init) {\n            write.call(node, result);\n        } else {\n            node._value = result;\n            node._init = true;\n        }\n    } catch (error) {\n        if (!node._init && typeof node._value === \"undefined\") {\n            console.error(`computed \\`${node.id}\\` threw error during first run, this can be fatal.\n\nSolutions:\n\n1. Set the \\`initial\\` option to silence this error`, \"\\n2. Or, use an `effect` if the return value is not being used\", \"\\n\\n\", error);\n        }\n        updateObservers(node);\n        handleError(node, error);\n    } finally{\n        currentObservers = prevObservers;\n        currentObserversIndex = prevObserversIndex;\n        node._state = STATE_CLEAN;\n    }\n}\nfunction updateObservers(node) {\n    if (currentObservers) {\n        if (node._sources) removeSourceObservers(node, currentObserversIndex);\n        if (node._sources && currentObserversIndex > 0) {\n            node._sources.length = currentObserversIndex + currentObservers.length;\n            for(let i = 0; i < currentObservers.length; i++){\n                node._sources[currentObserversIndex + i] = currentObservers[i];\n            }\n        } else {\n            node._sources = currentObservers;\n        }\n        let source;\n        for(let i = currentObserversIndex; i < node._sources.length; i++){\n            source = node._sources[i];\n            if (!source._observers) source._observers = [\n                node\n            ];\n            else source._observers.push(node);\n        }\n    } else if (node._sources && currentObserversIndex < node._sources.length) {\n        removeSourceObservers(node, currentObserversIndex);\n        node._sources.length = currentObserversIndex;\n    }\n}\nfunction notify(node, state) {\n    if (node._state >= state) return;\n    if (node._effect && node._state === STATE_CLEAN) {\n        effects.push(node);\n        if (!scheduledEffects) flushEffects();\n    }\n    node._state = state;\n    if (node._observers) {\n        for(let i = 0; i < node._observers.length; i++){\n            notify(node._observers[i], STATE_CHECK);\n        }\n    }\n}\nfunction removeSourceObservers(node, index) {\n    let source, swap;\n    for(let i = index; i < node._sources.length; i++){\n        source = node._sources[i];\n        if (source._observers) {\n            swap = source._observers.indexOf(node);\n            source._observers[swap] = source._observers[source._observers.length - 1];\n            source._observers.pop();\n        }\n    }\n}\nfunction signal(initialValue, options) {\n    const node = createComputation(initialValue, null, options), signal2 = read.bind(node);\n    signal2.node = node;\n    signal2[SCOPE] = true;\n    signal2.set = write.bind(node);\n    return signal2;\n}\nfunction isReadSignal(fn) {\n    return isFunction$1(fn) && SCOPE in fn;\n}\nfunction computed(compute2, options) {\n    const node = createComputation(options?.initial, compute2, options), signal2 = read.bind(node);\n    signal2[SCOPE] = true;\n    signal2.node = node;\n    return signal2;\n}\nfunction effect$1(effect2, options) {\n    const signal2 = createComputation(null, function runEffect() {\n        let effectResult = effect2();\n        isFunction$1(effectResult) && onDispose(effectResult);\n        return null;\n    }, {\n        id: options?.id ?? \"effect\"\n    });\n    signal2._effect = true;\n    update(signal2);\n    {\n        return function stopEffect() {\n            dispose.call(signal2, true);\n        };\n    }\n}\nfunction isWriteSignal(fn) {\n    return isReadSignal(fn) && \"set\" in fn;\n}\nfunction noop(...args) {}\nfunction isNull(value) {\n    return value === null;\n}\nfunction isUndefined(value) {\n    return typeof value === \"undefined\";\n}\nfunction isNil(value) {\n    return isNull(value) || isUndefined(value);\n}\nfunction isObject(value) {\n    return value?.constructor === Object;\n}\nfunction isNumber(value) {\n    return typeof value === \"number\" && !Number.isNaN(value);\n}\nfunction isString(value) {\n    return typeof value === \"string\";\n}\nfunction isBoolean(value) {\n    return typeof value === \"boolean\";\n}\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nconst effect = IS_SERVER ? serverEffect : effect$1;\nfunction serverEffect(effect2, options) {\n    if (typeof process !== \"undefined\" && \"development\" === \"test\") {}\n    return noop;\n}\nconst EVENT = IS_SERVER ? class Event2 {\n} : Event, DOM_EVENT = Symbol(\"DOM_EVENT\");\nclass DOMEvent extends EVENT {\n    /**\n   * The preceding event that was responsible for this event being fired.\n   */ get trigger() {\n        return this.triggers.source;\n    }\n    /**\n   * The origin event that lead to this event being fired.\n   */ get originEvent() {\n        return this.triggers.origin;\n    }\n    /**\n   * Whether the origin event was triggered by the user.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted}\n   */ get isOriginTrusted() {\n        return this.triggers.origin?.isTrusted ?? false;\n    }\n    constructor(type, ...init){\n        super(type, init[0]), this[DOM_EVENT] = true, /**\n   * The event trigger chain.\n   */ this.triggers = new EventTriggers();\n        this.detail = init[0]?.detail;\n        const trigger = init[0]?.trigger;\n        if (trigger) this.triggers.add(trigger);\n    }\n}\nclass EventTriggers {\n    get source() {\n        return this.chain[0];\n    }\n    get origin() {\n        return this.chain[this.chain.length - 1];\n    }\n    /**\n   * Appends the event to the end of the chain.\n   */ add(event) {\n        this.chain.push(event);\n        if (isDOMEvent(event)) {\n            this.chain.push(...event.triggers);\n        }\n    }\n    /**\n   * Removes the event from the chain and returns it (if found).\n   */ remove(event) {\n        return this.chain.splice(this.chain.indexOf(event), 1)[0];\n    }\n    /**\n   * Returns whether the chain contains the given `event`.\n   */ has(event) {\n        return this.chain.some((e)=>e === event);\n    }\n    /**\n   * Returns whether the chain contains the given event type.\n   */ hasType(type) {\n        return !!this.findType(type);\n    }\n    /**\n   * Returns the first event with the given `type` found in the chain.\n   */ findType(type) {\n        return this.chain.find((e)=>e.type === type);\n    }\n    /**\n   * Walks an event chain on a given `event`, and invokes the given `callback` for each trigger event.\n   */ walk(callback) {\n        for (const event of this.chain){\n            const returnValue = callback(event);\n            if (returnValue) return [\n                event,\n                returnValue\n            ];\n        }\n    }\n    [Symbol.iterator]() {\n        return this.chain.values();\n    }\n    constructor(){\n        this.chain = [];\n    }\n}\nfunction isDOMEvent(event) {\n    return !!event?.[DOM_EVENT];\n}\nfunction walkTriggerEventChain(event, callback) {\n    if (!isDOMEvent(event)) return;\n    return event.triggers.walk(callback);\n}\nfunction findTriggerEvent(event, type) {\n    return isDOMEvent(event) ? event.triggers.findType(type) : void 0;\n}\nfunction hasTriggerEvent(event, type) {\n    return !!findTriggerEvent(event, type);\n}\nfunction appendTriggerEvent(event, trigger) {\n    if (trigger) event.triggers.add(trigger);\n}\nclass EventsTarget extends EventTarget {\n    addEventListener(type, callback, options) {\n        return super.addEventListener(type, callback, options);\n    }\n    removeEventListener(type, callback, options) {\n        return super.removeEventListener(type, callback, options);\n    }\n}\nfunction listenEvent(target, type, handler1, options) {\n    if (IS_SERVER) return noop;\n    target.addEventListener(type, handler1, options);\n    return onDispose(()=>target.removeEventListener(type, handler1, options));\n}\nclass EventsController {\n    #target;\n    #controller;\n    get signal() {\n        return this.#controller.signal;\n    }\n    constructor(target){\n        this.#target = target;\n        this.#controller = new AbortController();\n        onDispose(this.abort.bind(this));\n    }\n    add(type, handler1, options) {\n        if (this.signal.aborted) throw Error(\"aborted\");\n        this.#target.addEventListener(type, handler1, {\n            ...options,\n            signal: options?.signal ? anySignal(this.signal, options.signal) : this.signal\n        });\n        return this;\n    }\n    remove(type, handler1) {\n        this.#target.removeEventListener(type, handler1);\n        return this;\n    }\n    abort(reason) {\n        this.#controller.abort(reason);\n    }\n}\nfunction anySignal(...signals) {\n    const controller = new AbortController(), options = {\n        signal: controller.signal\n    };\n    function onAbort(event) {\n        controller.abort(event.target.reason);\n    }\n    for (const signal2 of signals){\n        if (signal2.aborted) {\n            controller.abort(signal2.reason);\n            break;\n        }\n        signal2.addEventListener(\"abort\", onAbort, options);\n    }\n    return controller.signal;\n}\nfunction isPointerEvent(event) {\n    return !!event?.type.startsWith(\"pointer\");\n}\nfunction isTouchEvent(event) {\n    return !!event?.type.startsWith(\"touch\");\n}\nfunction isMouseEvent(event) {\n    return /^(click|mouse)/.test(event?.type ?? \"\");\n}\nfunction isKeyboardEvent(event) {\n    return !!event?.type.startsWith(\"key\");\n}\nfunction wasEnterKeyPressed(event) {\n    return isKeyboardEvent(event) && event.key === \"Enter\";\n}\nfunction isKeyboardClick(event) {\n    return isKeyboardEvent(event) && (event.key === \"Enter\" || event.key === \" \");\n}\nfunction isDOMNode(node) {\n    return node instanceof Node;\n}\nfunction setAttribute(host, name, value) {\n    if (!host) return;\n    else if (!value && value !== \"\" && value !== 0) {\n        host.removeAttribute(name);\n    } else {\n        const attrValue = value === true ? \"\" : value + \"\";\n        if (host.getAttribute(name) !== attrValue) {\n            host.setAttribute(name, attrValue);\n        }\n    }\n}\nfunction setStyle(host, property, value) {\n    if (!host) return;\n    else if (!value && value !== 0) {\n        host.style.removeProperty(property);\n    } else {\n        host.style.setProperty(property, value + \"\");\n    }\n}\nfunction toggleClass(host, name, value) {\n    host.classList[value ? \"add\" : \"remove\"](name);\n}\nfunction unwrapDeep(fn) {\n    let value = fn;\n    while(typeof value === \"function\")value = value.call(this);\n    return value;\n}\nfunction createContext(provide) {\n    return {\n        id: Symbol(),\n        provide\n    };\n}\nfunction provideContext(context, value, scope = getScope()) {\n    if (!scope) {\n        throw Error(\"[maverick] attempting to provide context outside root\");\n    }\n    const hasProvidedValue = !isUndefined(value);\n    if (!hasProvidedValue && !context.provide) {\n        throw Error(\"[maverick] context can not be provided without a value or `provide` function\");\n    }\n    setContext(context.id, hasProvidedValue ? value : context.provide?.(), scope);\n}\nfunction useContext(context) {\n    const value = getContext(context.id);\n    if (isUndefined(value)) {\n        throw Error(\"[maverick] attempting to use context without providing first\");\n    }\n    return value;\n}\nfunction hasProvidedContext(context) {\n    return !isUndefined(getContext(context.id));\n}\nconst PROPS = /* @__PURE__ */ Symbol(\"PROPS\");\nconst METHODS = /* @__PURE__ */ Symbol(\"METHODS\");\nconst ON_DISPATCH = /* @__PURE__ */ Symbol(\"ON_DISPATCH\");\nconst EMPTY_PROPS = {};\nclass Instance {\n    #setupCallbacks;\n    #attachCallbacks;\n    #connectCallbacks;\n    #destroyCallbacks;\n    constructor(Component2, scope, init){\n        /* @internal */ this[ON_DISPATCH] = null;\n        this.$el = signal(null);\n        this.el = null;\n        this.scope = null;\n        this.attachScope = null;\n        this.connectScope = null;\n        this.component = null;\n        this.destroyed = false;\n        this.props = EMPTY_PROPS;\n        this.attrs = null;\n        this.styles = null;\n        this.#setupCallbacks = [];\n        this.#attachCallbacks = [];\n        this.#connectCallbacks = [];\n        this.#destroyCallbacks = [];\n        this.scope = scope;\n        if (init?.scope) init.scope.append(scope);\n        let stateFactory = Component2.state, props = Component2.props;\n        if (stateFactory) {\n            this.$state = stateFactory.create();\n            this.state = new Proxy(this.$state, {\n                get: (_, prop2)=>this.$state[prop2]()\n            });\n            provideContext(stateFactory, this.$state);\n        }\n        if (props) {\n            this.props = createInstanceProps(props);\n            if (init?.props) {\n                for (const prop2 of Object.keys(init.props)){\n                    this.props[prop2]?.set(init.props[prop2]);\n                }\n            }\n        }\n        onDispose(this.destroy.bind(this));\n    }\n    setup() {\n        scoped(()=>{\n            for (const callback of this.#setupCallbacks)callback();\n        }, this.scope);\n    }\n    attach(el) {\n        if (this.el) return;\n        this.el = el;\n        this.$el.set(el);\n        {\n            el.$$COMPONENT_NAME = this.component?.constructor.name;\n        }\n        scoped(()=>{\n            this.attachScope = createScope();\n            scoped(()=>{\n                for (const callback of this.#attachCallbacks)callback(this.el);\n                this.#attachAttrs();\n                this.#attachStyles();\n            }, this.attachScope);\n        }, this.scope);\n        el.dispatchEvent(new Event(\"attached\"));\n    }\n    detach() {\n        this.attachScope?.dispose();\n        this.attachScope = null;\n        this.connectScope = null;\n        if (this.el) {\n            this.el.$$COMPONENT_NAME = null;\n        }\n        this.el = null;\n        this.$el.set(null);\n    }\n    connect() {\n        if (!this.el || !this.attachScope || !this.#connectCallbacks.length) return;\n        scoped(()=>{\n            this.connectScope = createScope();\n            scoped(()=>{\n                for (const callback of this.#connectCallbacks)callback(this.el);\n            }, this.connectScope);\n        }, this.attachScope);\n    }\n    disconnect() {\n        this.connectScope?.dispose();\n        this.connectScope = null;\n    }\n    destroy() {\n        if (this.destroyed) return;\n        this.destroyed = true;\n        scoped(()=>{\n            for (const callback of this.#destroyCallbacks)callback(this.el);\n        }, this.scope);\n        const el = this.el;\n        this.detach();\n        this.scope.dispose();\n        this.#setupCallbacks.length = 0;\n        this.#attachCallbacks.length = 0;\n        this.#connectCallbacks.length = 0;\n        this.#destroyCallbacks.length = 0;\n        this.component = null;\n        this.attrs = null;\n        this.styles = null;\n        this.props = EMPTY_PROPS;\n        this.scope = null;\n        this.state = EMPTY_PROPS;\n        this.$state = null;\n        if (el) delete el.$;\n    }\n    addHooks(target) {\n        if (target.onSetup) this.#setupCallbacks.push(target.onSetup.bind(target));\n        if (target.onAttach) this.#attachCallbacks.push(target.onAttach.bind(target));\n        if (target.onConnect) this.#connectCallbacks.push(target.onConnect.bind(target));\n        if (target.onDestroy) this.#destroyCallbacks.push(target.onDestroy.bind(target));\n    }\n    #attachAttrs() {\n        if (!this.attrs) return;\n        for (const name of Object.keys(this.attrs)){\n            if (IS_SERVER) {\n                setAttribute(this.el, name, unwrapDeep.call(this.component, this.attrs[name]));\n            } else if (isFunction(this.attrs[name])) {\n                effect(this.#setAttr.bind(this, name));\n            } else {\n                setAttribute(this.el, name, this.attrs[name]);\n            }\n        }\n    }\n    #attachStyles() {\n        if (!this.styles) return;\n        for (const name of Object.keys(this.styles)){\n            if (IS_SERVER) {\n                setStyle(this.el, name, unwrapDeep.call(this.component, this.styles[name]));\n            } else if (isFunction(this.styles[name])) {\n                effect(this.#setStyle.bind(this, name));\n            } else {\n                setStyle(this.el, name, this.styles[name]);\n            }\n        }\n    }\n    #setAttr(name) {\n        setAttribute(this.el, name, this.attrs[name].call(this.component));\n    }\n    #setStyle(name) {\n        setStyle(this.el, name, this.styles[name].call(this.component));\n    }\n}\nfunction createInstanceProps(props) {\n    const $props = {};\n    for (const name of Object.keys(props)){\n        const def = props[name];\n        $props[name] = signal(def, def);\n    }\n    return $props;\n}\nlet currentInstance = {\n    $$: null\n};\nfunction createComponent(Component2, init) {\n    return root(()=>{\n        currentInstance.$$ = new Instance(Component2, getScope(), init);\n        const component = new Component2();\n        currentInstance.$$.component = component;\n        currentInstance.$$ = null;\n        return component;\n    });\n}\nclass ViewController extends EventTarget {\n    get el() {\n        return this.$$.el;\n    }\n    get $el() {\n        return this.$$.$el();\n    }\n    get scope() {\n        return this.$$.scope;\n    }\n    get attachScope() {\n        return this.$$.attachScope;\n    }\n    get connectScope() {\n        return this.$$.connectScope;\n    }\n    /** @internal */ get $props() {\n        return this.$$.props;\n    }\n    /** @internal */ get $state() {\n        return this.$$.$state;\n    }\n    get state() {\n        return this.$$.state;\n    }\n    constructor(){\n        super();\n        if (currentInstance.$$) this.attach(currentInstance);\n    }\n    attach({ $$ }) {\n        this.$$ = $$;\n        $$.addHooks(this);\n        return this;\n    }\n    addEventListener(type, callback, options) {\n        if (!this.el) {\n            const name = this.constructor.name;\n            console.warn(`[maverick] adding event listener to \\`${name}\\` before element is attached`);\n        }\n        this.listen(type, callback, options);\n    }\n    removeEventListener(type, callback, options) {\n        this.el?.removeEventListener(type, callback, options);\n    }\n    /**\n   * The given callback is invoked when the component is ready to be set up.\n   *\n   * - This hook will run once.\n   * - This hook is called both client-side and server-side.\n   * - It's safe to use context inside this hook.\n   * - The host element has not attached yet - wait for `onAttach`.\n   */ /**\n   * This method can be used to specify attributes that should be set on the host element. Any\n   * attributes that are assigned to a function will be considered a signal and updated accordingly.\n   */ setAttributes(attributes) {\n        if (!this.$$.attrs) this.$$.attrs = {};\n        Object.assign(this.$$.attrs, attributes);\n    }\n    /**\n   * This method can be used to specify styles that should set be set on the host element. Any\n   * styles that are assigned to a function will be considered a signal and updated accordingly.\n   */ setStyles(styles) {\n        if (!this.$$.styles) this.$$.styles = {};\n        Object.assign(this.$$.styles, styles);\n    }\n    /**\n   * This method is used to satisfy the CSS variables contract specified on the current\n   * component. Other CSS variables can be set via the `setStyles` method.\n   */ setCSSVars(vars) {\n        this.setStyles(vars);\n    }\n    /**\n   * Type-safe utility for creating component DOM events.\n   */ createEvent(type, ...init) {\n        return new DOMEvent(type, init[0]);\n    }\n    /**\n   * Creates a `DOMEvent` and dispatches it from the host element. This method is typed to\n   * match all component events.\n   */ dispatch(type, ...init) {\n        if (IS_SERVER || !this.el) return false;\n        const event = type instanceof Event ? type : new DOMEvent(type, init[0]);\n        Object.defineProperty(event, \"target\", {\n            get: ()=>this.$$.component\n        });\n        return untrack(()=>{\n            this.$$[ON_DISPATCH]?.(event);\n            return this.el.dispatchEvent(event);\n        });\n    }\n    dispatchEvent(event) {\n        return this.dispatch(event);\n    }\n    /**\n   * Adds an event listener for the given `type` and returns a function which can be invoked to\n   * remove the event listener.\n   *\n   * - The listener is removed if the current scope is disposed.\n   * - This method is safe to use on the server (noop).\n   */ listen(type, handler1, options) {\n        if (IS_SERVER || !this.el) return noop;\n        return listenEvent(this.el, type, handler1, options);\n    }\n}\nclass Component extends ViewController {\n    subscribe(callback) {\n        if (!this.state) {\n            const name = this.constructor.name;\n            throw Error(`[maverick] component \\`${name}\\` can not be subscribed to because it has no internal state`);\n        }\n        return scoped(()=>effect(()=>callback(this.state)), this.$$.scope);\n    }\n    destroy() {\n        this.$$.destroy();\n    }\n}\nfunction prop(target, propertyKey, descriptor) {\n    if (!target[PROPS]) target[PROPS] = /* @__PURE__ */ new Set();\n    target[PROPS].add(propertyKey);\n}\nfunction method(target, propertyKey, descriptor) {\n    if (!target[METHODS]) target[METHODS] = /* @__PURE__ */ new Set();\n    target[METHODS].add(propertyKey);\n}\nclass State {\n    #descriptors;\n    constructor(record){\n        this.id = Symbol(\"STATE\");\n        this.record = record;\n        this.#descriptors = Object.getOwnPropertyDescriptors(record);\n    }\n    create() {\n        const store = {}, state = new Proxy(store, {\n            get: (_, prop2)=>store[prop2]()\n        });\n        for (const name of Object.keys(this.record)){\n            const getter = this.#descriptors[name].get;\n            store[name] = getter ? computed(getter.bind(state)) : signal(this.record[name]);\n        }\n        return store;\n    }\n    reset(record, filter) {\n        for (const name of Object.keys(record)){\n            if (!this.#descriptors[name].get && (!filter || filter(name))) {\n                record[name].set(this.record[name]);\n            }\n        }\n    }\n}\nfunction useState(state) {\n    return useContext(state);\n}\nfunction camelToKebabCase(str) {\n    return str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nfunction kebabToCamelCase(str) {\n    return str.replace(/-./g, (x)=>x[1].toUpperCase());\n}\nfunction kebabToPascalCase(str) {\n    return kebabToTitleCase(str).replace(/\\s/g, \"\");\n}\nfunction kebabToTitleCase(str) {\n    return uppercaseFirstChar(str.replace(/-./g, (x)=>\" \" + x[1].toUpperCase()));\n}\nfunction uppercaseFirstChar(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst ReactScopeContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    current: null\n});\nReactScopeContext.displayName = \"Scope\";\nfunction WithScope(scope, ...children) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ReactScopeContext.Provider, {\n        value: scope\n    }, ...children);\n}\nfunction useReactScope() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(ReactScopeContext).current;\n}\nfunction useReactContext(context) {\n    const scope = useReactScope();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"useReactContext.useMemo\": ()=>getContext(context.id, scope)\n    }[\"useReactContext.useMemo\"], [\n        scope\n    ]);\n}\nfunction setRef(ref, value) {\n    if (typeof ref === \"function\") {\n        ref(value);\n    } else if (ref) {\n        ref.current = value;\n    }\n}\nfunction composeRefs(...refs) {\n    return (node)=>refs.forEach((ref)=>setRef(ref, node));\n}\nfunction createClientComponent(Component2, options) {\n    const forwardComponent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardRef)=>{\n        let parentScopeRef = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ReactScopeContext), scopeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), stateRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n        if (!stateRef.current) {\n            const state2 = createInternalState(), component = initComponent(Component2, state2, props, parentScopeRef.current);\n            state2.component = component;\n            stateRef.current = state2;\n            scopeRef.current = component.scope;\n        }\n        function onAttach() {\n            let state2 = stateRef.current, scope = parentScopeRef.current;\n            window.cancelAnimationFrame(state2.destroyId);\n            state2.destroyId = -1;\n            if (state2.component.$$.destroyed) {\n                const component = initComponent(Component2, state2, props, scope);\n                state2.component = component;\n                state2.attached = false;\n                state2.forwardRef = false;\n                scopeRef.current = component.scope;\n            }\n            if (state2.el) {\n                attachToHost(state2, state2.el);\n            }\n            if (!state2.forwardRef) {\n                setRef(forwardRef, state2.component);\n                state2.forwardRef = true;\n            }\n            return ()=>detachFromHost(state2);\n        }\n        function onRefChange(el) {\n            const state2 = stateRef.current;\n            if (!state2.forwardRef) {\n                state2.el = el;\n                return;\n            }\n            window.cancelAnimationFrame(state2.refChangeId);\n            state2.refChangeId = window.requestAnimationFrame(()=>{\n                const state3 = stateRef.current;\n                state3.refChangeId = -1;\n                if (state3.el === el) return;\n                detachFromHost(state3);\n                if (el) attachToHost(state3, el);\n                state3.el = el;\n            });\n        }\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n            \"createClientComponent.forwardComponent.useEffect\": ()=>{\n                const state2 = stateRef.current;\n                window.cancelAnimationFrame(state2.destroyId);\n                state2.destroyId = -1;\n                return function onDestroy() {\n                    if (!isFunction(props.children)) return;\n                    window.cancelAnimationFrame(state2.refChangeId);\n                    state2.refChangeId = -1;\n                    window.cancelAnimationFrame(state2.connectId);\n                    state2.connectId = -1;\n                    window.cancelAnimationFrame(state2.destroyId);\n                    state2.destroyId = window.requestAnimationFrame({\n                        \"createClientComponent.forwardComponent.useEffect.onDestroy\": ()=>{\n                            state2.destroyId = -1;\n                            detachFromHost(state2);\n                            state2.component.$$.destroy();\n                            state2.component.$$[ON_DISPATCH] = null;\n                            state2.callbacks = {};\n                            state2.domCallbacks = {};\n                            scopeRef.current = null;\n                        }\n                    }[\"createClientComponent.forwardComponent.useEffect.onDestroy\"]);\n                };\n            }\n        }[\"createClientComponent.forwardComponent.useEffect\"], []);\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(tick);\n        let state = stateRef.current, { children, ...renderProps } = props, attrs = {}, prevPropNames = state.prevProps, newPropNames = Object.keys(renderProps);\n        state.callbacks = {};\n        for (const name of [\n            ...prevPropNames,\n            ...newPropNames\n        ]){\n            if (options.props.has(name)) {\n                state.component.$props[name].set(// If the prop was removed we'll use the default value provided on Component creation.\n                isUndefined(renderProps[name]) ? Component2.props?.[name] : renderProps[name]);\n            } else if (options.events?.has(name) || options.eventsRE?.test(name)) {\n                state.callbacks[name] = renderProps[name];\n            } else if (options.domEvents?.has(name) || options.domEventsRE?.test(name)) {\n                let type = camelToKebabCase(name.slice(2));\n                state.domCallbacks[type] = renderProps[name];\n                if (!newPropNames.includes(name)) {\n                    state.el?.removeEventListener(type, state.onDOMEvent);\n                    state.listening?.delete(type);\n                } else if (state.el && !state.listening?.has(type)) {\n                    if (!state.listening) state.listening = /* @__PURE__ */ new Set();\n                    state.listening.add(type);\n                    state.el.addEventListener(type, state.onDOMEvent);\n                }\n            } else {\n                attrs[name] = renderProps[name];\n            }\n        }\n        state.prevProps = newPropNames;\n        return WithScope(scopeRef, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AttachEffect, {\n            effect: onAttach\n        }), isFunction(children) ? children?.({\n            ...attrs,\n            suppressHydrationWarning: true,\n            ref: onRefChange\n        }, state.component) : children);\n    });\n    forwardComponent.displayName = Component2.name + \"Bridge\";\n    return forwardComponent;\n}\nfunction AttachEffect({ effect: effect2 }) {\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(effect2, []);\n    return null;\n}\nconst eventTypeToCallbackName = /* @__PURE__ */ new Map();\nfunction createInternalState() {\n    const state = {\n        el: null,\n        prevProps: [],\n        callbacks: {},\n        domCallbacks: {},\n        refChangeId: -1,\n        connectId: -1,\n        destroyId: -1,\n        attached: false,\n        forwardRef: false,\n        listening: null,\n        onDOMEvent (event) {\n            const args = !isUndefined(event.detail) ? [\n                event.detail,\n                event\n            ] : [\n                event\n            ];\n            state.domCallbacks[event.type]?.(...args);\n        }\n    };\n    return state;\n}\nfunction attachToHost(state, el) {\n    if (state.el === el && state.attached) return;\n    else if (state.attached) detachFromHost(state);\n    if (state.domCallbacks) {\n        if (!state.listening) state.listening = /* @__PURE__ */ new Set();\n        for (const type of Object.keys(state.domCallbacks)){\n            if (state.listening.has(type)) continue;\n            el.addEventListener(type, state.onDOMEvent);\n            state.listening.add(type);\n        }\n    }\n    state.component.$$.attach(el);\n    state.connectId = window.requestAnimationFrame(()=>{\n        state.component.$$.connect();\n        state.connectId = -1;\n    });\n    state.attached = true;\n}\nfunction detachFromHost(state) {\n    if (!state.attached) return;\n    window.cancelAnimationFrame(state.connectId);\n    state.connectId = -1;\n    state.component.$$.detach();\n    state.attached = false;\n    if (state.el && state.listening) {\n        for (const type of state.listening){\n            state.el.removeEventListener(type, state.onDOMEvent);\n        }\n        state.listening.clear();\n    }\n}\nfunction onDispatch(event) {\n    let callbackProp = eventTypeToCallbackName.get(event.type), args = !isUndefined(event.detail) ? [\n        event.detail,\n        event\n    ] : [\n        event\n    ];\n    if (!callbackProp) {\n        eventTypeToCallbackName.set(event.type, callbackProp = `on${kebabToPascalCase(event.type)}`);\n    }\n    this.callbacks[callbackProp]?.(...args);\n}\nfunction initComponent(Component2, state, props, scope) {\n    const component = createComponent(Component2, {\n        props,\n        scope\n    });\n    component.$$[ON_DISPATCH] = onDispatch.bind(state);\n    component.$$.setup();\n    return component;\n}\nfunction escape(value, isAttr = false) {\n    const type = typeof value;\n    if (type !== \"string\") {\n        if (!isAttr && type === \"function\") return escape(value());\n        if (isAttr && type === \"boolean\") return value + \"\";\n        return value;\n    }\n    const delimeter = isAttr ? '\"' : \"<\", escapeDelimeter = isAttr ? \"&quot;\" : \"&lt;\";\n    let iDelimeter = value.indexOf(delimeter), isAmpersand = value.indexOf(\"&\");\n    if (iDelimeter < 0 && isAmpersand < 0) return value;\n    let left = 0, out = \"\";\n    while(iDelimeter >= 0 && isAmpersand >= 0){\n        if (iDelimeter < isAmpersand) {\n            if (left < iDelimeter) out += value.substring(left, iDelimeter);\n            out += escapeDelimeter;\n            left = iDelimeter + 1;\n            iDelimeter = value.indexOf(delimeter, left);\n        } else {\n            if (left < isAmpersand) out += value.substring(left, isAmpersand);\n            out += \"&amp;\";\n            left = isAmpersand + 1;\n            isAmpersand = value.indexOf(\"&\", left);\n        }\n    }\n    if (iDelimeter >= 0) {\n        do {\n            if (left < iDelimeter) out += value.substring(left, iDelimeter);\n            out += escapeDelimeter;\n            left = iDelimeter + 1;\n            iDelimeter = value.indexOf(delimeter, left);\n        }while (iDelimeter >= 0);\n    } else while(isAmpersand >= 0){\n        if (left < isAmpersand) out += value.substring(left, isAmpersand);\n        out += \"&amp;\";\n        left = isAmpersand + 1;\n        isAmpersand = value.indexOf(\"&\", left);\n    }\n    return left < value.length ? out + value.substring(left) : out;\n}\nconst SETUP = /* @__PURE__ */ Symbol(\"SETUP\");\nconst classSplitRE = /\\s+/;\nfunction parseClassAttr(tokens, attrValue) {\n    const classes = attrValue.trim().split(classSplitRE);\n    for (const token of classes)tokens.add(token);\n}\nconst styleSplitRE = /\\s*:\\s*/;\nconst stylesDelimeterRE = /\\s*;\\s*/;\nfunction parseStyleAttr(tokens, attrValue) {\n    const styles = attrValue.trim().split(stylesDelimeterRE);\n    for(let i = 0; i < styles.length; i++){\n        if (styles[i] === \"\") continue;\n        const [name, value] = styles[i].split(styleSplitRE);\n        tokens.set(name, value);\n    }\n}\nclass MaverickServerElement {\n    get $props() {\n        return this.$.$$.props;\n    }\n    get $state() {\n        return this.$.$$.$state;\n    }\n    get state() {\n        return this.$.state;\n    }\n    constructor(component){\n        this.keepAlive = false;\n        this.forwardKeepAlive = true;\n        this.attributes = new ServerAttributes();\n        this.style = new ServerStyle();\n        this.classList = new ServerClassList();\n        this.$ = component;\n    }\n    setup() {\n        const instance = this.$.$$;\n        scoped(()=>{\n            if (this.hasAttribute(\"class\")) {\n                parseClassAttr(this.classList.tokens, this.getAttribute(\"class\"));\n            }\n            if (this.hasAttribute(\"style\")) {\n                parseStyleAttr(this.style.tokens, this.getAttribute(\"style\"));\n            }\n            instance.setup();\n            instance.attach(this);\n            if (this.classList.length > 0) {\n                this.setAttribute(\"class\", this.classList.toString());\n            }\n            if (this.style.length > 0) {\n                this.setAttribute(\"style\", this.style.toString());\n            }\n            if (this.keepAlive) {\n                this.setAttribute(\"keep-alive\", \"\");\n            }\n        }, instance.scope);\n    }\n    getAttribute(name) {\n        return this.attributes.getAttribute(name);\n    }\n    setAttribute(name, value) {\n        this.attributes.setAttribute(name, value);\n    }\n    hasAttribute(name) {\n        return this.attributes.hasAttribute(name);\n    }\n    removeAttribute(name) {\n        return this.attributes.removeAttribute(name);\n    }\n    [SETUP]() {}\n    addEventListener() {}\n    removeEventListener() {}\n    dispatchEvent() {\n        return false;\n    }\n    subscribe() {\n        return noop;\n    }\n    destroy() {\n        this.$.destroy();\n    }\n}\nclass ServerAttributes {\n    #tokens;\n    get length() {\n        return this.#tokens.size;\n    }\n    get tokens() {\n        return this.#tokens;\n    }\n    getAttribute(name) {\n        return this.#tokens.get(name) ?? null;\n    }\n    hasAttribute(name) {\n        return this.#tokens.has(name);\n    }\n    setAttribute(name, value) {\n        this.#tokens.set(name, value + \"\");\n    }\n    removeAttribute(name) {\n        this.#tokens.delete(name);\n    }\n    toString() {\n        if (this.#tokens.size === 0) return \"\";\n        let result = \"\";\n        for (const [name, value] of this.#tokens){\n            result += ` ${name}=\"${escape(value, true)}\"`;\n        }\n        return result;\n    }\n    constructor(){\n        this.#tokens = /* @__PURE__ */ new Map();\n    }\n}\nclass ServerStyle {\n    #tokens;\n    get length() {\n        return this.#tokens.size;\n    }\n    get tokens() {\n        return this.#tokens;\n    }\n    getPropertyValue(prop2) {\n        return this.#tokens.get(prop2) ?? \"\";\n    }\n    setProperty(prop2, value) {\n        this.#tokens.set(prop2, value ?? \"\");\n    }\n    removeProperty(prop2) {\n        const value = this.#tokens.get(prop2);\n        this.#tokens.delete(prop2);\n        return value ?? \"\";\n    }\n    toString() {\n        if (this.#tokens.size === 0) return \"\";\n        let result = \"\";\n        for (const [name, value] of this.#tokens){\n            result += `${name}: ${value};`;\n        }\n        return result;\n    }\n    constructor(){\n        this.#tokens = /* @__PURE__ */ new Map();\n    }\n}\nclass ServerClassList {\n    #tokens;\n    get length() {\n        return this.#tokens.size;\n    }\n    get tokens() {\n        return this.#tokens;\n    }\n    add(...tokens) {\n        for (const token of tokens){\n            this.#tokens.add(token);\n        }\n    }\n    contains(token) {\n        return this.#tokens.has(token);\n    }\n    remove(token) {\n        this.#tokens.delete(token);\n    }\n    replace(token, newToken) {\n        if (!this.#tokens.has(token)) return false;\n        this.#tokens.delete(token);\n        this.#tokens.add(newToken);\n        return true;\n    }\n    toggle(token, force) {\n        if (force !== true && (this.#tokens.has(token) || force === false)) {\n            this.#tokens.delete(token);\n            return false;\n        } else {\n            this.#tokens.add(token);\n            return true;\n        }\n    }\n    toString() {\n        return Array.from(this.#tokens).join(\" \");\n    }\n    constructor(){\n        this.#tokens = /* @__PURE__ */ new Set();\n    }\n}\nconst attrsToProps = {\n    acceptcharset: \"acceptCharset\",\n    \"accept-charset\": \"acceptCharset\",\n    accesskey: \"accessKey\",\n    allowfullscreen: \"allowFullScreen\",\n    autocapitalize: \"autoCapitalize\",\n    autocomplete: \"autoComplete\",\n    autocorrect: \"autoCorrect\",\n    autofocus: \"autoFocus\",\n    autoplay: \"autoPlay\",\n    autosave: \"autoSave\",\n    cellpadding: \"cellPadding\",\n    cellspacing: \"cellSpacing\",\n    charset: \"charSet\",\n    class: \"className\",\n    classid: \"classID\",\n    classname: \"className\",\n    colspan: \"colSpan\",\n    contenteditable: \"contentEditable\",\n    contextmenu: \"contextMenu\",\n    controlslist: \"controlsList\",\n    crossorigin: \"crossOrigin\",\n    dangerouslysetinnerhtml: \"dangerouslySetInnerHTML\",\n    datetime: \"dateTime\",\n    defaultchecked: \"defaultChecked\",\n    defaultvalue: \"defaultValue\",\n    disablepictureinpicture: \"disablePictureInPicture\",\n    disableremoteplayback: \"disableRemotePlayback\",\n    enctype: \"encType\",\n    enterkeyhint: \"enterKeyHint\",\n    fetchpriority: \"fetchPriority\",\n    for: \"htmlFor\",\n    formmethod: \"formMethod\",\n    formaction: \"formAction\",\n    formenctype: \"formEncType\",\n    formnovalidate: \"formNoValidate\",\n    formtarget: \"formTarget\",\n    frameborder: \"frameBorder\",\n    hreflang: \"hrefLang\",\n    htmlfor: \"htmlFor\",\n    httpequiv: \"httpEquiv\",\n    \"http-equiv\": \"httpEquiv\",\n    imagesizes: \"imageSizes\",\n    imagesrcset: \"imageSrcSet\",\n    innerhtml: \"innerHTML\",\n    inputmode: \"inputMode\",\n    itemid: \"itemID\",\n    itemprop: \"itemProp\",\n    itemref: \"itemRef\",\n    itemscope: \"itemScope\",\n    itemtype: \"itemType\",\n    keyparams: \"keyParams\",\n    keytype: \"keyType\",\n    marginwidth: \"marginWidth\",\n    marginheight: \"marginHeight\",\n    maxlength: \"maxLength\",\n    mediagroup: \"mediaGroup\",\n    minlength: \"minLength\",\n    nomodule: \"noModule\",\n    novalidate: \"noValidate\",\n    playsinline: \"playsInline\",\n    radiogroup: \"radioGroup\",\n    readonly: \"readOnly\",\n    referrerpolicy: \"referrerPolicy\",\n    rowspan: \"rowSpan\",\n    spellcheck: \"spellCheck\",\n    srcdoc: \"srcDoc\",\n    srclang: \"srcLang\",\n    srcset: \"srcSet\",\n    tabindex: \"tabIndex\",\n    usemap: \"useMap\"\n};\nfunction createServerComponent(Component2, options) {\n    function ServerComponent(props) {\n        let scope = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ReactScopeContext), component = createComponent(Component2, {\n            props,\n            scope: scope.current\n        }), host = new MaverickServerElement(component), attrs = {}, { style = {}, children, forwardRef, ...renderProps } = props;\n        if (options.props.size) {\n            for (const prop2 of Object.keys(renderProps)){\n                if (!options.props.has(prop2)) attrs[prop2] = renderProps[prop2];\n            }\n        } else {\n            attrs = renderProps;\n        }\n        host.setup();\n        if (host.hasAttribute(\"style\")) {\n            for (const [name, value] of host.style.tokens){\n                style[name.startsWith(\"--\") ? name : kebabToCamelCase(name)] = value;\n            }\n            host.removeAttribute(\"style\");\n        }\n        for (const [attrName, attrValue] of host.attributes.tokens){\n            const propName = attrsToProps[attrName];\n            if (propName) {\n                if (!(propName in attrs)) {\n                    attrs[propName] = attrValue;\n                }\n                host.removeAttribute(attrName);\n            }\n        }\n        return WithScope({\n            current: component.$$.scope\n        }, isFunction(children) ? children?.({\n            ...Object.fromEntries(host.attributes.tokens),\n            ...attrs,\n            style\n        }, component) : children, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(()=>{\n            host.destroy();\n            return null;\n        }));\n    }\n    ServerComponent.displayName = Component2.name + \"Bridge\";\n    return ServerComponent;\n}\nfunction useStateContext(state) {\n    return useReactContext(state);\n}\nfunction useSignal(signal2, key) {\n    const [, scheduleReactUpdate] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useSignal.useEffect\": ()=>{\n            return effect$1({\n                \"useSignal.useEffect\": ()=>{\n                    signal2();\n                    scheduleReactUpdate({});\n                }\n            }[\"useSignal.useEffect\"]);\n        }\n    }[\"useSignal.useEffect\"], [\n        key ?? signal2\n    ]);\n    return signal2();\n}\nfunction ariaBool(value) {\n    return value ? \"true\" : \"false\";\n}\nfunction createDisposalBin() {\n    const disposal = /* @__PURE__ */ new Set();\n    return {\n        add (...callbacks) {\n            for (const callback of callbacks)disposal.add(callback);\n        },\n        empty () {\n            for (const callback of disposal)callback();\n            disposal.clear();\n        }\n    };\n}\nfunction keysOf(obj) {\n    return Object.keys(obj);\n}\nfunction deferredPromise() {\n    let resolve, reject;\n    const promise = new Promise((res, rej)=>{\n        resolve = res;\n        reject = rej;\n    });\n    return {\n        promise,\n        resolve,\n        reject\n    };\n}\nfunction waitTimeout(delay) {\n    return new Promise((resolve)=>setTimeout(resolve, delay));\n}\nfunction animationFrameThrottle(func) {\n    if (IS_SERVER) return noop;\n    let id = -1, lastArgs;\n    function throttle(...args) {\n        lastArgs = args;\n        if (id >= 0) return;\n        id = window.requestAnimationFrame(()=>{\n            func.apply(this, lastArgs);\n            id = -1;\n            lastArgs = void 0;\n        });\n    }\n    return throttle;\n}\nconst requestIdleCallback = IS_SERVER ? noop :  false ? 0 : noop;\nfunction waitIdlePeriod(callback, options) {\n    if (IS_SERVER) return Promise.resolve();\n    return new Promise((resolve)=>{\n        requestIdleCallback((deadline)=>{\n            callback?.(deadline);\n            resolve();\n        }, options);\n    });\n}\nfunction useSignalRecord($state) {\n    const [, scheduleReactUpdate] = react__WEBPACK_IMPORTED_MODULE_0__.useState(), tracking = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    if (tracking.current == null) {\n        tracking.current = {\n            state: {},\n            $update: signal({}),\n            props: /* @__PURE__ */ new Set()\n        };\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useSignalRecord.useEffect\": ()=>{\n            let { state, $update, props } = tracking.current;\n            return effect({\n                \"useSignalRecord.useEffect\": ()=>{\n                    for (const prop2 of props){\n                        const value = $state[prop2]();\n                        state[prop2] = isArray(value) ? [\n                            ...value\n                        ] : value;\n                    }\n                    $update();\n                    scheduleReactUpdate({});\n                }\n            }[\"useSignalRecord.useEffect\"]);\n        }\n    }[\"useSignalRecord.useEffect\"], [\n        $state\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"useSignalRecord.useMemo\": ()=>{\n            let { state, $update, props } = tracking.current, scheduledUpdate = false;\n            props.clear();\n            return new Proxy(state, {\n                get (_, prop2) {\n                    if (!props.has(prop2) && prop2 in $state) {\n                        props.add(prop2);\n                        const value = $state[prop2]();\n                        state[prop2] = isArray(value) ? [\n                            ...value\n                        ] : value;\n                        if (!scheduledUpdate) {\n                            $update.set({});\n                            scheduledUpdate = true;\n                            queueMicrotask({\n                                \"useSignalRecord.useMemo\": ()=>scheduledUpdate = false\n                            }[\"useSignalRecord.useMemo\"]);\n                        }\n                    }\n                    return state[prop2];\n                },\n                set (_, prop2, newValue) {\n                    if (!(prop2 in $state)) state[prop2] = newValue;\n                    return true;\n                }\n            });\n        }\n    }[\"useSignalRecord.useMemo\"], [\n        $state\n    ]);\n}\nfunction createReactComponent(Component2, options) {\n    if (IS_SERVER) {\n        return createServerComponent(Component2, {\n            props: new Set(Object.keys(Component2.props || {}))\n        });\n    } else {\n        return createClientComponent(Component2, {\n            props: new Set(Object.keys(Component2.props || {})),\n            events: new Set(options?.events),\n            eventsRE: options?.eventsRegex,\n            domEvents: options?.domEvents,\n            domEventsRE: options?.domEventsRegex\n        });\n    }\n}\nvar key = {\n    fullscreenEnabled: 0,\n    fullscreenElement: 1,\n    requestFullscreen: 2,\n    exitFullscreen: 3,\n    fullscreenchange: 4,\n    fullscreenerror: 5,\n    fullscreen: 6\n};\nvar webkit = [\n    \"webkitFullscreenEnabled\",\n    \"webkitFullscreenElement\",\n    \"webkitRequestFullscreen\",\n    \"webkitExitFullscreen\",\n    \"webkitfullscreenchange\",\n    \"webkitfullscreenerror\",\n    \"-webkit-full-screen\"\n];\nvar moz = [\n    \"mozFullScreenEnabled\",\n    \"mozFullScreenElement\",\n    \"mozRequestFullScreen\",\n    \"mozCancelFullScreen\",\n    \"mozfullscreenchange\",\n    \"mozfullscreenerror\",\n    \"-moz-full-screen\"\n];\nvar ms = [\n    \"msFullscreenEnabled\",\n    \"msFullscreenElement\",\n    \"msRequestFullscreen\",\n    \"msExitFullscreen\",\n    \"MSFullscreenChange\",\n    \"MSFullscreenError\",\n    \"-ms-fullscreen\"\n];\nvar document$1 =  false ? 0 : {};\nvar vendor = \"fullscreenEnabled\" in document$1 && Object.keys(key) || webkit[0] in document$1 && webkit || moz[0] in document$1 && moz || ms[0] in document$1 && ms || [];\nvar fscreen = {\n    requestFullscreen: function(element) {\n        return element[vendor[key.requestFullscreen]]();\n    },\n    requestFullscreenFunction: function(element) {\n        return element[vendor[key.requestFullscreen]];\n    },\n    get exitFullscreen () {\n        return document$1[vendor[key.exitFullscreen]].bind(document$1);\n    },\n    get fullscreenPseudoClass () {\n        return \":\" + vendor[key.fullscreen];\n    },\n    addEventListener: function(type, handler1, options) {\n        return document$1.addEventListener(vendor[key[type]], handler1, options);\n    },\n    removeEventListener: function(type, handler1, options) {\n        return document$1.removeEventListener(vendor[key[type]], handler1, options);\n    },\n    get fullscreenEnabled () {\n        return Boolean(document$1[vendor[key.fullscreenEnabled]]);\n    },\n    set fullscreenEnabled (val){},\n    get fullscreenElement () {\n        return document$1[vendor[key.fullscreenElement]];\n    },\n    set fullscreenElement (val){},\n    get onfullscreenchange () {\n        return document$1[(\"on\" + vendor[key.fullscreenchange]).toLowerCase()];\n    },\n    set onfullscreenchange (handler){\n        return document$1[(\"on\" + vendor[key.fullscreenchange]).toLowerCase()] = handler;\n    },\n    get onfullscreenerror () {\n        return document$1[(\"on\" + vendor[key.fullscreenerror]).toLowerCase()];\n    },\n    set onfullscreenerror (handler){\n        return document$1[(\"on\" + vendor[key.fullscreenerror]).toLowerCase()] = handler;\n    }\n};\nvar functionThrottle = throttle;\nfunction throttle(fn, interval, options) {\n    var timeoutId = null;\n    var throttledFn = null;\n    var leading = options && options.leading;\n    var trailing = options && options.trailing;\n    if (leading == null) {\n        leading = true; // default\n    }\n    if (trailing == null) {\n        trailing = !leading; //default\n    }\n    if (leading == true) {\n        trailing = false; // forced because there should be invocation per call\n    }\n    var cancel = function() {\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n            timeoutId = null;\n        }\n    };\n    var flush = function() {\n        var call = throttledFn;\n        cancel();\n        if (call) {\n            call();\n        }\n    };\n    var throttleWrapper = function() {\n        var callNow = leading && !timeoutId;\n        var context = this;\n        var args = arguments;\n        throttledFn = function() {\n            return fn.apply(context, args);\n        };\n        if (!timeoutId) {\n            timeoutId = setTimeout(function() {\n                timeoutId = null;\n                if (trailing) {\n                    return throttledFn();\n                }\n            }, interval);\n        }\n        if (callNow) {\n            callNow = false;\n            return throttledFn();\n        }\n    };\n    throttleWrapper.cancel = cancel;\n    throttleWrapper.flush = flush;\n    return throttleWrapper;\n}\nvar functionDebounce = debounce;\nfunction debounce(fn, wait, callFirst) {\n    var timeout = null;\n    var debouncedFn = null;\n    var clear = function() {\n        if (timeout) {\n            clearTimeout(timeout);\n            debouncedFn = null;\n            timeout = null;\n        }\n    };\n    var flush = function() {\n        var call = debouncedFn;\n        clear();\n        if (call) {\n            call();\n        }\n    };\n    var debounceWrapper = function() {\n        if (!wait) {\n            return fn.apply(this, arguments);\n        }\n        var context = this;\n        var args = arguments;\n        var callNow = callFirst && !timeout;\n        clear();\n        debouncedFn = function() {\n            fn.apply(context, args);\n        };\n        timeout = setTimeout(function() {\n            timeout = null;\n            if (!callNow) {\n                var call = debouncedFn;\n                debouncedFn = null;\n                return call();\n            }\n        }, wait);\n        if (callNow) {\n            return debouncedFn();\n        }\n    };\n    debounceWrapper.cancel = clear;\n    debounceWrapper.flush = flush;\n    return debounceWrapper;\n}\nconst t = (t2)=>\"object\" == typeof t2 && null != t2 && 1 === t2.nodeType, e = (t2, e2)=>(!e2 || \"hidden\" !== t2) && \"visible\" !== t2 && \"clip\" !== t2, n = (t2, n2)=>{\n    if (t2.clientHeight < t2.scrollHeight || t2.clientWidth < t2.scrollWidth) {\n        const o2 = getComputedStyle(t2, null);\n        return e(o2.overflowY, n2) || e(o2.overflowX, n2) || ((t3)=>{\n            const e2 = ((t4)=>{\n                if (!t4.ownerDocument || !t4.ownerDocument.defaultView) return null;\n                try {\n                    return t4.ownerDocument.defaultView.frameElement;\n                } catch (t5) {\n                    return null;\n                }\n            })(t3);\n            return !!e2 && (e2.clientHeight < t3.scrollHeight || e2.clientWidth < t3.scrollWidth);\n        })(t2);\n    }\n    return false;\n}, o = (t2, e2, n2, o2, l2, r2, i, s)=>r2 < t2 && i > e2 || r2 > t2 && i < e2 ? 0 : r2 <= t2 && s <= n2 || i >= e2 && s >= n2 ? r2 - t2 - o2 : i > e2 && s < n2 || r2 < t2 && s > n2 ? i - e2 + l2 : 0, l = (t2)=>{\n    const e2 = t2.parentElement;\n    return null == e2 ? t2.getRootNode().host || null : e2;\n}, r = (e2, r2)=>{\n    var i, s, d, h;\n    if (\"undefined\" == typeof document) return [];\n    const { scrollMode: c, block: f, inline: u, boundary: a, skipOverflowHiddenElements: g } = r2, p = \"function\" == typeof a ? a : (t2)=>t2 !== a;\n    if (!t(e2)) throw new TypeError(\"Invalid target\");\n    const m = document.scrollingElement || document.documentElement, w = [];\n    let W = e2;\n    for(; t(W) && p(W);){\n        if (W = l(W), W === m) {\n            w.push(W);\n            break;\n        }\n        null != W && W === document.body && n(W) && !n(document.documentElement) || null != W && n(W, g) && w.push(W);\n    }\n    const b = null != (s = null == (i = window.visualViewport) ? void 0 : i.width) ? s : innerWidth, H = null != (h = null == (d = window.visualViewport) ? void 0 : d.height) ? h : innerHeight, { scrollX: y, scrollY: M } = window, { height: v, width: E, top: x, right: C, bottom: I, left: R } = e2.getBoundingClientRect(), { top: T, right: B, bottom: F, left: V } = ((t2)=>{\n        const e3 = window.getComputedStyle(t2);\n        return {\n            top: parseFloat(e3.scrollMarginTop) || 0,\n            right: parseFloat(e3.scrollMarginRight) || 0,\n            bottom: parseFloat(e3.scrollMarginBottom) || 0,\n            left: parseFloat(e3.scrollMarginLeft) || 0\n        };\n    })(e2);\n    let k = \"start\" === f || \"nearest\" === f ? x - T : \"end\" === f ? I + F : x + v / 2 - T + F, D = \"center\" === u ? R + E / 2 - V + B : \"end\" === u ? C + B : R - V;\n    const L = [];\n    for(let t2 = 0; t2 < w.length; t2++){\n        const e3 = w[t2], { height: l2, width: r3, top: i2, right: s2, bottom: d2, left: h2 } = e3.getBoundingClientRect();\n        if (\"if-needed\" === c && x >= 0 && R >= 0 && I <= H && C <= b && (e3 === m && !n(e3) || x >= i2 && I <= d2 && R >= h2 && C <= s2)) return L;\n        const a2 = getComputedStyle(e3), g2 = parseInt(a2.borderLeftWidth, 10), p2 = parseInt(a2.borderTopWidth, 10), W2 = parseInt(a2.borderRightWidth, 10), T2 = parseInt(a2.borderBottomWidth, 10);\n        let B2 = 0, F2 = 0;\n        const V2 = \"offsetWidth\" in e3 ? e3.offsetWidth - e3.clientWidth - g2 - W2 : 0, S = \"offsetHeight\" in e3 ? e3.offsetHeight - e3.clientHeight - p2 - T2 : 0, X = \"offsetWidth\" in e3 ? 0 === e3.offsetWidth ? 0 : r3 / e3.offsetWidth : 0, Y = \"offsetHeight\" in e3 ? 0 === e3.offsetHeight ? 0 : l2 / e3.offsetHeight : 0;\n        if (m === e3) B2 = \"start\" === f ? k : \"end\" === f ? k - H : \"nearest\" === f ? o(M, M + H, H, p2, T2, M + k, M + k + v, v) : k - H / 2, F2 = \"start\" === u ? D : \"center\" === u ? D - b / 2 : \"end\" === u ? D - b : o(y, y + b, b, g2, W2, y + D, y + D + E, E), B2 = Math.max(0, B2 + M), F2 = Math.max(0, F2 + y);\n        else {\n            B2 = \"start\" === f ? k - i2 - p2 : \"end\" === f ? k - d2 + T2 + S : \"nearest\" === f ? o(i2, d2, l2, p2, T2 + S, k, k + v, v) : k - (i2 + l2 / 2) + S / 2, F2 = \"start\" === u ? D - h2 - g2 : \"center\" === u ? D - (h2 + r3 / 2) + V2 / 2 : \"end\" === u ? D - s2 + W2 + V2 : o(h2, s2, r3, g2, W2 + V2, D, D + E, E);\n            const { scrollLeft: t3, scrollTop: n2 } = e3;\n            B2 = 0 === Y ? 0 : Math.max(0, Math.min(n2 + B2 / Y, e3.scrollHeight - l2 / Y + S)), F2 = 0 === X ? 0 : Math.max(0, Math.min(t3 + F2 / X, e3.scrollWidth - r3 / X + V2)), k += n2 - B2, D += t3 - F2;\n        }\n        L.push({\n            el: e3,\n            top: B2,\n            left: F2\n        });\n    }\n    return L;\n};\nvar Icon$0 = `<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15.0007 28.7923C15.0007 29.0152 14.9774 29.096 14.9339 29.1775C14.8903 29.259 14.8263 29.323 14.7449 29.3665C14.6634 29.4101 14.5826 29.4333 14.3597 29.4333H12.575C12.3521 29.4333 12.2713 29.4101 12.1898 29.3665C12.1083 29.323 12.0443 29.259 12.0008 29.1775C11.9572 29.096 11.934 29.0152 11.934 28.7923V12.2993L5.97496 12.3C5.75208 12.3 5.67125 12.2768 5.58977 12.2332C5.50829 12.1896 5.44434 12.1257 5.40077 12.0442C5.35719 11.9627 5.33398 11.8819 5.33398 11.659V9.87429C5.33398 9.65141 5.35719 9.57059 5.40077 9.48911C5.44434 9.40762 5.50829 9.34368 5.58977 9.3001C5.67125 9.25652 5.75208 9.23332 5.97496 9.23332H26.0263C26.2492 9.23332 26.33 9.25652 26.4115 9.3001C26.493 9.34368 26.557 9.40762 26.6005 9.48911C26.6441 9.57059 26.6673 9.65141 26.6673 9.87429V11.659C26.6673 11.8819 26.6441 11.9627 26.6005 12.0442C26.557 12.1257 26.493 12.1896 26.4115 12.2332C26.33 12.2768 26.2492 12.3 26.0263 12.3L20.067 12.2993L20.0673 28.7923C20.0673 29.0152 20.0441 29.096 20.0005 29.1775C19.957 29.259 19.893 29.323 19.8115 29.3665C19.73 29.4101 19.6492 29.4333 19.4263 29.4333H17.6416C17.4187 29.4333 17.3379 29.4101 17.2564 29.3665C17.175 29.323 17.111 29.259 17.0674 29.1775C17.0239 29.096 17.0007 29.0152 17.0007 28.7923L17 22.7663H15L15.0007 28.7923Z\" fill=\"currentColor\"/> <path d=\"M16.0007 7.89998C17.4734 7.89998 18.6673 6.70608 18.6673 5.23332C18.6673 3.76056 17.4734 2.56665 16.0007 2.56665C14.5279 2.56665 13.334 3.76056 13.334 5.23332C13.334 6.70608 14.5279 7.89998 16.0007 7.89998Z\" fill=\"currentColor\"/>`;\nvar Icon$5 = `<path d=\"M5.33334 6.00001C5.33334 5.63182 5.63181 5.33334 6 5.33334H26C26.3682 5.33334 26.6667 5.63182 26.6667 6.00001V20.6667C26.6667 21.0349 26.3682 21.3333 26 21.3333H23.7072C23.4956 21.3333 23.2966 21.233 23.171 21.0628L22.1859 19.7295C21.8607 19.2894 22.1749 18.6667 22.7221 18.6667H23.3333C23.7015 18.6667 24 18.3682 24 18V8.66668C24 8.29849 23.7015 8.00001 23.3333 8.00001H8.66667C8.29848 8.00001 8 8.29849 8 8.66668V18C8 18.3682 8.29848 18.6667 8.66667 18.6667H9.29357C9.84072 18.6667 10.1549 19.2894 9.82976 19.7295L8.84467 21.0628C8.71898 21.233 8.52 21.3333 8.30848 21.3333H6C5.63181 21.3333 5.33334 21.0349 5.33334 20.6667V6.00001Z\" fill=\"currentColor\"/> <path d=\"M8.78528 25.6038C8.46013 26.0439 8.77431 26.6667 9.32147 26.6667L22.6785 26.6667C23.2256 26.6667 23.5398 26.0439 23.2146 25.6038L16.5358 16.5653C16.2693 16.2046 15.73 16.2047 15.4635 16.5653L8.78528 25.6038Z\" fill=\"currentColor\"/>`;\nvar Icon$8 = `<path d=\"M17.4853 18.9093C17.4853 19.0281 17.6289 19.0875 17.7129 19.0035L22.4185 14.2979C22.6788 14.0376 23.1009 14.0376 23.3613 14.2979L24.7755 15.7122C25.0359 15.9725 25.0359 16.3946 24.7755 16.655L16.2902 25.1403C16.0299 25.4006 15.6078 25.4006 15.3474 25.1403L13.9332 23.726L13.9319 23.7247L6.86189 16.6547C6.60154 16.3944 6.60154 15.9723 6.86189 15.7119L8.2761 14.2977C8.53645 14.0373 8.95856 14.0373 9.21891 14.2977L13.9243 19.0031C14.0083 19.0871 14.1519 19.0276 14.1519 18.9088L14.1519 6.00004C14.1519 5.63185 14.4504 5.33337 14.8186 5.33337L16.8186 5.33337C17.1868 5.33337 17.4853 5.63185 17.4853 6.00004L17.4853 18.9093Z\" fill=\"currentColor\"/>`;\nvar Icon$11 = `<path d=\"M13.0908 14.3334C12.972 14.3334 12.9125 14.1898 12.9965 14.1058L17.7021 9.40022C17.9625 9.13987 17.9625 8.71776 17.7021 8.45741L16.2879 7.04319C16.0275 6.78284 15.6054 6.78284 15.3451 7.04319L6.8598 15.5285C6.59945 15.7888 6.59945 16.2109 6.8598 16.4713L8.27401 17.8855L8.27536 17.8868L15.3453 24.9568C15.6057 25.2172 16.0278 25.2172 16.2881 24.9568L17.7024 23.5426C17.9627 23.2822 17.9627 22.8601 17.7024 22.5998L12.9969 17.8944C12.9129 17.8104 12.9724 17.6668 13.0912 17.6668L26 17.6668C26.3682 17.6668 26.6667 17.3683 26.6667 17.0001V15.0001C26.6667 14.6319 26.3682 14.3334 26 14.3334L13.0908 14.3334Z\" fill=\"currentColor\"/>`;\nvar Icon$13 = `<path d=\"M14.1521 13.0929C14.1521 12.9741 14.0085 12.9147 13.9245 12.9987L9.21891 17.7043C8.95856 17.9646 8.53645 17.9646 8.2761 17.7043L6.86189 16.29C6.60154 16.0297 6.60154 15.6076 6.86189 15.3472L15.3472 6.86195C15.6075 6.6016 16.0296 6.6016 16.29 6.86195L17.7042 8.27616L17.7055 8.27751L24.7755 15.3475C25.0359 15.6078 25.0359 16.0299 24.7755 16.2903L23.3613 17.7045C23.1009 17.9649 22.6788 17.9649 22.4185 17.7045L17.7131 12.9991C17.6291 12.9151 17.4855 12.9746 17.4855 13.0934V26.0022C17.4855 26.3704 17.187 26.6688 16.8188 26.6688H14.8188C14.4506 26.6688 14.1521 26.3704 14.1521 26.0022L14.1521 13.0929Z\" fill=\"currentColor\"/>`;\nvar Icon$16 = `<path d=\"M16.6927 25.3346C16.3245 25.3346 16.026 25.0361 16.026 24.6679L16.026 7.3346C16.026 6.96641 16.3245 6.66794 16.6927 6.66794L18.6927 6.66794C19.0609 6.66794 19.3594 6.96642 19.3594 7.3346L19.3594 24.6679C19.3594 25.0361 19.0609 25.3346 18.6927 25.3346H16.6927Z\" fill=\"currentColor\"/> <path d=\"M24.026 25.3346C23.6578 25.3346 23.3594 25.0361 23.3594 24.6679L23.3594 7.3346C23.3594 6.96641 23.6578 6.66794 24.026 6.66794L26.026 6.66794C26.3942 6.66794 26.6927 6.96642 26.6927 7.3346V24.6679C26.6927 25.0361 26.3942 25.3346 26.026 25.3346H24.026Z\" fill=\"currentColor\"/> <path d=\"M5.48113 23.9407C5.38584 24.2963 5.59689 24.6619 5.95254 24.7572L7.88439 25.2748C8.24003 25.3701 8.60559 25.159 8.70089 24.8034L13.1871 8.06067C13.2824 7.70503 13.0713 7.33947 12.7157 7.24417L10.7838 6.72654C10.4282 6.63124 10.0626 6.8423 9.96733 7.19794L5.48113 23.9407Z\" fill=\"currentColor\"/>`;\nvar Icon$19 = `<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M24.9266 7.57992C25.015 7.60672 25.0886 7.64746 25.2462 7.80506L26.956 9.51488C27.1136 9.67248 27.1543 9.74604 27.1811 9.83447C27.2079 9.9229 27.2079 10.0133 27.1811 10.1018C27.1543 10.1902 27.1136 10.2638 26.956 10.4214L13.1822 24.1951C13.0246 24.3527 12.951 24.3935 12.8626 24.4203C12.797 24.4402 12.7304 24.4453 12.6642 24.4357L12.7319 24.4203C12.6435 24.4471 12.553 24.4471 12.4646 24.4203C12.3762 24.3935 12.3026 24.3527 12.145 24.1951L5.04407 17.0942C4.88647 16.9366 4.84573 16.863 4.81893 16.7746C4.79213 16.6862 4.79213 16.5957 4.81893 16.5073C4.84573 16.4189 4.88647 16.3453 5.04407 16.1877L6.7539 14.4779C6.9115 14.3203 6.98506 14.2796 7.07349 14.2528C7.16191 14.226 7.25235 14.226 7.34078 14.2528C7.42921 14.2796 7.50277 14.3203 7.66037 14.4779L12.6628 19.4808L24.3397 7.80506C24.4973 7.64746 24.5709 7.60672 24.6593 7.57992C24.7477 7.55311 24.8382 7.55311 24.9266 7.57992Z\" fill=\"currentColor\"/>`;\nvar Icon$22 = `<path d=\"M17.947 16.095C17.999 16.043 17.999 15.9585 17.947 15.9065L11.6295 9.58899C11.3691 9.32864 11.3691 8.90653 11.6295 8.64618L13.2323 7.04341C13.4926 6.78306 13.9147 6.78306 14.1751 7.04341L21.0289 13.8973C21.0392 13.9064 21.0493 13.9158 21.0591 13.9257L22.6619 15.5285C22.9223 15.7888 22.9223 16.2109 22.6619 16.4713L14.1766 24.9565C13.9163 25.2169 13.4942 25.2169 13.2338 24.9565L11.631 23.3538C11.3707 23.0934 11.3707 22.6713 11.631 22.411L17.947 16.095Z\" fill=\"currentColor\"/>`;\nvar Icon$24 = `<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M6 7C5.63181 7 5.33333 7.29848 5.33333 7.66667V14.8667C5.33333 14.9403 5.39361 14.9999 5.46724 15.0009C10.8844 15.0719 15.2614 19.449 15.3325 24.8661C15.3334 24.9397 15.393 25 15.4667 25H26C26.3682 25 26.6667 24.7015 26.6667 24.3333V7.66667C26.6667 7.29848 26.3682 7 26 7H6ZM17.0119 22.2294C17.0263 22.29 17.0802 22.3333 17.1425 22.3333H23.3333C23.7015 22.3333 24 22.0349 24 21.6667V10.3333C24 9.96514 23.7015 9.66667 23.3333 9.66667H8.66667C8.29848 9.66667 8 9.96514 8 10.3333V13.1909C8 13.2531 8.04332 13.3071 8.10392 13.3214C12.5063 14.3618 15.9715 17.827 17.0119 22.2294Z\" fill=\"currentColor\"/> <path d=\"M13.2 25C13.2736 25 13.3334 24.9398 13.3322 24.8661C13.2615 20.5544 9.77889 17.0718 5.46718 17.0011C5.39356 16.9999 5.33333 17.0597 5.33333 17.1333V18.8667C5.33333 18.9403 5.39348 18.9999 5.4671 19.0015C8.67465 19.0716 11.2617 21.6587 11.3319 24.8662C11.3335 24.9399 11.393 25 11.4667 25H13.2Z\" fill=\"currentColor\"/> <path d=\"M5.33333 21.1333C5.33333 21.0597 5.39332 20.9998 5.46692 21.0022C7.57033 21.0712 9.26217 22.763 9.33114 24.8664C9.33356 24.94 9.27364 25 9.2 25H6C5.63181 25 5.33333 24.7015 5.33333 24.3333V21.1333Z\" fill=\"currentColor\"/>`;\nvar chromecast = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    default: Icon$24\n});\nvar Icon$26 = `<path d=\"M8 28.0003C8 27.6321 8.29848 27.3336 8.66667 27.3336H23.3333C23.7015 27.3336 24 27.6321 24 28.0003V29.3336C24 29.7018 23.7015 30.0003 23.3333 30.0003H8.66667C8.29848 30.0003 8 29.7018 8 29.3336V28.0003Z\" fill=\"currentColor\"/> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M4.66602 6.66699C4.29783 6.66699 3.99935 6.96547 3.99935 7.33366V24.667C3.99935 25.0352 4.29783 25.3337 4.66602 25.3337H27.3327C27.7009 25.3337 27.9994 25.0352 27.9994 24.667V7.33366C27.9994 6.96547 27.7009 6.66699 27.3327 6.66699H4.66602ZM8.66659 21.3333C8.2984 21.3333 7.99992 21.0349 7.99992 20.6667V11.3333C7.99992 10.9651 8.2984 10.6667 8.66659 10.6667H13.9999C14.3681 10.6667 14.6666 10.9651 14.6666 11.3333V12.6667C14.6666 13.0349 14.3681 13.3333 13.9999 13.3333H10.7999C10.7263 13.3333 10.6666 13.393 10.6666 13.4667V18.5333C10.6666 18.607 10.7263 18.6667 10.7999 18.6667H13.9999C14.3681 18.6667 14.6666 18.9651 14.6666 19.3333V20.6667C14.6666 21.0349 14.3681 21.3333 13.9999 21.3333H8.66659ZM17.9999 21.3333C17.6317 21.3333 17.3333 21.0349 17.3333 20.6667V11.3333C17.3333 10.9651 17.6317 10.6667 17.9999 10.6667H23.3333C23.7014 10.6667 23.9999 10.9651 23.9999 11.3333V12.6667C23.9999 13.0349 23.7014 13.3333 23.3333 13.3333H20.1333C20.0596 13.3333 19.9999 13.393 19.9999 13.4667V18.5333C19.9999 18.607 20.0596 18.6667 20.1333 18.6667H23.3333C23.7014 18.6667 23.9999 18.9651 23.9999 19.3333V20.6667C23.9999 21.0349 23.7014 21.3333 23.3333 21.3333H17.9999Z\" fill=\"currentColor\"/>`;\nvar Icon$27 = `<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M4.6661 6.66699C4.29791 6.66699 3.99943 6.96547 3.99943 7.33366V24.667C3.99943 25.0352 4.29791 25.3337 4.6661 25.3337H27.3328C27.701 25.3337 27.9994 25.0352 27.9994 24.667V7.33366C27.9994 6.96547 27.701 6.66699 27.3328 6.66699H4.6661ZM8.66667 21.3333C8.29848 21.3333 8 21.0349 8 20.6667V11.3333C8 10.9651 8.29848 10.6667 8.66667 10.6667H14C14.3682 10.6667 14.6667 10.9651 14.6667 11.3333V12.6667C14.6667 13.0349 14.3682 13.3333 14 13.3333H10.8C10.7264 13.3333 10.6667 13.393 10.6667 13.4667V18.5333C10.6667 18.607 10.7264 18.6667 10.8 18.6667H14C14.3682 18.6667 14.6667 18.9651 14.6667 19.3333V20.6667C14.6667 21.0349 14.3682 21.3333 14 21.3333H8.66667ZM18 21.3333C17.6318 21.3333 17.3333 21.0349 17.3333 20.6667V11.3333C17.3333 10.9651 17.6318 10.6667 18 10.6667H23.3333C23.7015 10.6667 24 10.9651 24 11.3333V12.6667C24 13.0349 23.7015 13.3333 23.3333 13.3333H20.1333C20.0597 13.3333 20 13.393 20 13.4667V18.5333C20 18.607 20.0597 18.6667 20.1333 18.6667H23.3333C23.7015 18.6667 24 18.9651 24 19.3333V20.6667C24 21.0349 23.7015 21.3333 23.3333 21.3333H18Z\" fill=\"currentColor\"/>`;\nvar Icon$31 = `<path d=\"M14.2225 13.7867C14.3065 13.8706 14.4501 13.8112 14.4501 13.6924V5.99955C14.4501 5.63136 14.7486 5.33289 15.1167 5.33289H16.8501C17.2183 5.33289 17.5167 5.63136 17.5167 5.99955V13.6916C17.5167 13.8104 17.6604 13.8699 17.7444 13.7859L19.9433 11.5869C20.2037 11.3266 20.6258 11.3266 20.8861 11.5869L22.1118 12.8126C22.3722 13.0729 22.3722 13.4951 22.1118 13.7554L16.4549 19.4123C16.1946 19.6726 15.772 19.6731 15.5116 19.4128L9.85479 13.7559C9.59444 13.4956 9.59444 13.0734 9.85479 12.8131L11.0804 11.5874C11.3408 11.3271 11.7629 11.3271 12.0233 11.5874L14.2225 13.7867Z\" fill=\"currentColor\"/> <path d=\"M5.99998 20.267C5.63179 20.267 5.33331 20.5654 5.33331 20.9336V25.9997C5.33331 26.3678 5.63179 26.6663 5.99998 26.6663H26C26.3682 26.6663 26.6666 26.3678 26.6666 25.9997V20.9336C26.6666 20.5654 26.3682 20.267 26 20.267H24.2666C23.8985 20.267 23.6 20.5654 23.6 20.9336V22.9333C23.6 23.3014 23.3015 23.5999 22.9333 23.5999H9.06638C8.69819 23.5999 8.39972 23.3014 8.39972 22.9333V20.9336C8.39972 20.5654 8.10124 20.267 7.73305 20.267H5.99998Z\" fill=\"currentColor\"/>`;\nvar Icon$33 = `<path d=\"M16 20C18.2091 20 20 18.2092 20 16C20 13.7909 18.2091 12 16 12C13.7909 12 12 13.7909 12 16C12 18.2092 13.7909 20 16 20Z\" fill=\"currentColor\"/> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M28 16.0058C28 18.671 23.5 25.3334 16 25.3334C8.5 25.3334 4 18.6762 4 16.0058C4 13.3354 8.50447 6.66669 16 6.66669C23.4955 6.66669 28 13.3406 28 16.0058ZM25.3318 15.9934C25.3328 16.0017 25.3328 16.0099 25.3318 16.0182C25.3274 16.0571 25.3108 16.1728 25.2485 16.3708C25.1691 16.6229 25.0352 16.9462 24.8327 17.3216C24.4264 18.0749 23.7969 18.9398 22.9567 19.754C21.2791 21.3798 18.9148 22.6667 16 22.6667C13.0845 22.6667 10.7202 21.3805 9.04298 19.7557C8.20295 18.9419 7.57362 18.0773 7.16745 17.3241C6.96499 16.9486 6.83114 16.6252 6.75172 16.3729C6.67942 16.1431 6.66856 16.0243 6.66695 16.0066L6.66695 16.005C6.66859 15.9871 6.67951 15.8682 6.75188 15.6383C6.83145 15.3854 6.96554 15.0614 7.16831 14.6853C7.57507 13.9306 8.20514 13.0644 9.04577 12.249C10.7245 10.6208 13.0886 9.33335 16 9.33335C18.9108 9.33335 21.2748 10.6215 22.9539 12.2507C23.7947 13.0664 24.4249 13.933 24.8318 14.6877C25.0346 15.0639 25.1688 15.3878 25.2483 15.6404C25.3107 15.8386 25.3274 15.9545 25.3318 15.9934Z\" fill=\"currentColor\"/>`;\nvar Icon$34 = `<path d=\"M15.8747 8.11857C16.3148 7.79342 16.9375 8.10759 16.9375 8.65476V14.2575C16.9375 14.3669 17.0621 14.4297 17.1501 14.3647L25.6038 8.11857C26.0439 7.79342 26.6667 8.10759 26.6667 8.65476V23.3451C26.6667 23.8923 26.0439 24.2064 25.6038 23.8813L17.1501 17.6346C17.0621 17.5695 16.9375 17.6324 16.9375 17.7418L16.9375 23.3451C16.9375 23.8923 16.3147 24.2064 15.8747 23.8813L5.93387 16.5358C5.57322 16.2693 5.57323 15.7299 5.93389 15.4634L15.8747 8.11857Z\" fill=\"currentColor\"/>`;\nvar Icon$35 = `<path d=\"M16.1253 8.11866C15.6852 7.7935 15.0625 8.10768 15.0625 8.65484V14.2576C15.0625 14.367 14.9379 14.4298 14.8499 14.3648L6.39615 8.11866C5.95607 7.7935 5.33331 8.10768 5.33331 8.65484V23.3452C5.33331 23.8923 5.9561 24.2065 6.39617 23.8813L14.8499 17.6347C14.9379 17.5696 15.0625 17.6325 15.0625 17.7419L15.0625 23.3452C15.0625 23.8923 15.6853 24.2065 16.1253 23.8813L26.0661 16.5358C26.4268 16.2694 26.4268 15.73 26.0661 15.4635L16.1253 8.11866Z\" fill=\"currentColor\"/>`;\nvar Icon$39 = `<path d=\"M19.3334 13.3333C18.9652 13.3333 18.6667 13.0349 18.6667 12.6667L18.6667 7.33333C18.6667 6.96514 18.9652 6.66666 19.3334 6.66666H21.3334C21.7015 6.66666 22 6.96514 22 7.33333V9.86666C22 9.9403 22.0597 10 22.1334 10L24.6667 10C25.0349 10 25.3334 10.2985 25.3334 10.6667V12.6667C25.3334 13.0349 25.0349 13.3333 24.6667 13.3333L19.3334 13.3333Z\" fill=\"currentColor\"/> <path d=\"M13.3334 19.3333C13.3334 18.9651 13.0349 18.6667 12.6667 18.6667H7.33335C6.96516 18.6667 6.66669 18.9651 6.66669 19.3333V21.3333C6.66669 21.7015 6.96516 22 7.33335 22H9.86669C9.94032 22 10 22.0597 10 22.1333L10 24.6667C10 25.0349 10.2985 25.3333 10.6667 25.3333H12.6667C13.0349 25.3333 13.3334 25.0349 13.3334 24.6667L13.3334 19.3333Z\" fill=\"currentColor\"/> <path d=\"M18.6667 24.6667C18.6667 25.0349 18.9652 25.3333 19.3334 25.3333H21.3334C21.7015 25.3333 22 25.0349 22 24.6667V22.1333C22 22.0597 22.0597 22 22.1334 22H24.6667C25.0349 22 25.3334 21.7015 25.3334 21.3333V19.3333C25.3334 18.9651 25.0349 18.6667 24.6667 18.6667L19.3334 18.6667C18.9652 18.6667 18.6667 18.9651 18.6667 19.3333L18.6667 24.6667Z\" fill=\"currentColor\"/> <path d=\"M10.6667 13.3333H12.6667C13.0349 13.3333 13.3334 13.0349 13.3334 12.6667L13.3334 10.6667V7.33333C13.3334 6.96514 13.0349 6.66666 12.6667 6.66666H10.6667C10.2985 6.66666 10 6.96514 10 7.33333L10 9.86666C10 9.9403 9.94033 10 9.86669 10L7.33335 10C6.96516 10 6.66669 10.2985 6.66669 10.6667V12.6667C6.66669 13.0349 6.96516 13.3333 7.33335 13.3333L10.6667 13.3333Z\" fill=\"currentColor\"/>`;\nvar Icon$40 = `<path d=\"M25.3299 7.26517C25.2958 6.929 25.0119 6.66666 24.6667 6.66666H19.3334C18.9652 6.66666 18.6667 6.96514 18.6667 7.33333V9.33333C18.6667 9.70152 18.9652 10 19.3334 10L21.8667 10C21.9403 10 22 10.0597 22 10.1333V12.6667C22 13.0349 22.2985 13.3333 22.6667 13.3333H24.6667C25.0349 13.3333 25.3334 13.0349 25.3334 12.6667V7.33333C25.3334 7.31032 25.3322 7.28758 25.3299 7.26517Z\" fill=\"currentColor\"/> <path d=\"M22 21.8667C22 21.9403 21.9403 22 21.8667 22L19.3334 22C18.9652 22 18.6667 22.2985 18.6667 22.6667V24.6667C18.6667 25.0349 18.9652 25.3333 19.3334 25.3333L24.6667 25.3333C25.0349 25.3333 25.3334 25.0349 25.3334 24.6667V19.3333C25.3334 18.9651 25.0349 18.6667 24.6667 18.6667H22.6667C22.2985 18.6667 22 18.9651 22 19.3333V21.8667Z\" fill=\"currentColor\"/> <path d=\"M12.6667 22H10.1334C10.0597 22 10 21.9403 10 21.8667V19.3333C10 18.9651 9.70154 18.6667 9.33335 18.6667H7.33335C6.96516 18.6667 6.66669 18.9651 6.66669 19.3333V24.6667C6.66669 25.0349 6.96516 25.3333 7.33335 25.3333H12.6667C13.0349 25.3333 13.3334 25.0349 13.3334 24.6667V22.6667C13.3334 22.2985 13.0349 22 12.6667 22Z\" fill=\"currentColor\"/> <path d=\"M10 12.6667V10.1333C10 10.0597 10.0597 10 10.1334 10L12.6667 10C13.0349 10 13.3334 9.70152 13.3334 9.33333V7.33333C13.3334 6.96514 13.0349 6.66666 12.6667 6.66666H7.33335C6.96516 6.66666 6.66669 6.96514 6.66669 7.33333V12.6667C6.66669 13.0349 6.96516 13.3333 7.33335 13.3333H9.33335C9.70154 13.3333 10 13.0349 10 12.6667Z\" fill=\"currentColor\"/>`;\nvar Icon$53 = `<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M26.6667 5.99998C26.6667 5.63179 26.3682 5.33331 26 5.33331H11.3333C10.9651 5.33331 10.6667 5.63179 10.6667 5.99998V17.5714C10.6667 17.6694 10.5644 17.7342 10.4741 17.6962C9.91823 17.4625 9.30754 17.3333 8.66667 17.3333C6.08934 17.3333 4 19.4226 4 22C4 24.5773 6.08934 26.6666 8.66667 26.6666C11.244 26.6666 13.3333 24.5773 13.3333 22V8.66665C13.3333 8.29846 13.6318 7.99998 14 7.99998L23.3333 7.99998C23.7015 7.99998 24 8.29846 24 8.66665V14.9048C24 15.0027 23.8978 15.0675 23.8075 15.0296C23.2516 14.7958 22.6409 14.6666 22 14.6666C19.4227 14.6666 17.3333 16.756 17.3333 19.3333C17.3333 21.9106 19.4227 24 22 24C24.5773 24 26.6667 21.9106 26.6667 19.3333V5.99998ZM22 21.3333C23.1046 21.3333 24 20.4379 24 19.3333C24 18.2287 23.1046 17.3333 22 17.3333C20.8954 17.3333 20 18.2287 20 19.3333C20 20.4379 20.8954 21.3333 22 21.3333ZM8.66667 24C9.77124 24 10.6667 23.1045 10.6667 22C10.6667 20.8954 9.77124 20 8.66667 20C7.5621 20 6.66667 20.8954 6.66667 22C6.66667 23.1045 7.5621 24 8.66667 24Z\" fill=\"currentColor\"/>`;\nvar Icon$54 = `<path d=\"M17.5091 24.6594C17.5091 25.2066 16.8864 25.5208 16.4463 25.1956L9.44847 20.0252C9.42553 20.0083 9.39776 19.9991 9.36923 19.9991H4.66667C4.29848 19.9991 4 19.7006 4 19.3325V12.6658C4 12.2976 4.29848 11.9991 4.66667 11.9991H9.37115C9.39967 11.9991 9.42745 11.99 9.45039 11.973L16.4463 6.8036C16.8863 6.47842 17.5091 6.79259 17.5091 7.33977L17.5091 24.6594Z\" fill=\"currentColor\"/> <path d=\"M28.8621 13.6422C29.1225 13.3818 29.1225 12.9597 28.8621 12.6994L27.9193 11.7566C27.659 11.4962 27.2368 11.4962 26.9765 11.7566L24.7134 14.0197C24.6613 14.0717 24.5769 14.0717 24.5248 14.0197L22.262 11.7568C22.0016 11.4964 21.5795 11.4964 21.3191 11.7568L20.3763 12.6996C20.116 12.9599 20.116 13.382 20.3763 13.6424L22.6392 15.9053C22.6913 15.9573 22.6913 16.0418 22.6392 16.0938L20.3768 18.3562C20.1165 18.6166 20.1165 19.0387 20.3768 19.299L21.3196 20.2419C21.58 20.5022 22.0021 20.5022 22.2624 20.2418L24.5248 17.9795C24.5769 17.9274 24.6613 17.9274 24.7134 17.9795L26.976 20.2421C27.2363 20.5024 27.6585 20.5024 27.9188 20.2421L28.8616 19.2992C29.122 19.0389 29.122 18.6168 28.8616 18.3564L26.599 16.0938C26.547 16.0418 26.547 15.9573 26.599 15.9053L28.8621 13.6422Z\" fill=\"currentColor\"/>`;\nvar Icon$56 = `<path d=\"M26.6009 16.0725C26.6009 16.424 26.4302 17.1125 25.9409 18.0213C25.4676 18.8976 24.7542 19.8715 23.8182 20.7783C21.9489 22.5905 19.2662 24.0667 15.9342 24.0667C12.6009 24.0667 9.91958 22.5915 8.04891 20.78C7.11424 19.8736 6.40091 18.9 5.92758 18.0236C5.43824 17.1149 5.26758 16.4257 5.26758 16.0725C5.26758 15.7193 5.43824 15.0293 5.92891 14.1193C6.40224 13.2416 7.11558 12.2665 8.05158 11.3587C9.92224 9.54398 12.6049 8.06665 15.9342 8.06665C19.2636 8.06665 21.9449 9.54505 23.8169 11.3604C24.7529 12.2687 25.4662 13.2441 25.9396 14.1216C26.4302 15.0317 26.6009 15.7209 26.6009 16.0725Z\" stroke=\"currentColor\" stroke-width=\"3\"/> <path d=\"M15.9336 20.0667C18.1427 20.0667 19.9336 18.2758 19.9336 16.0667C19.9336 13.8575 18.1427 12.0667 15.9336 12.0667C13.7245 12.0667 11.9336 13.8575 11.9336 16.0667C11.9336 18.2758 13.7245 20.0667 15.9336 20.0667Z\" fill=\"currentColor\"/> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M27.2323 25.0624L6.93878 4.76886C6.78118 4.61126 6.70762 4.57052 6.61919 4.54372C6.53077 4.51692 6.44033 4.51691 6.3519 4.54372C6.26347 4.57052 6.18991 4.61126 6.03231 4.76886L4.77032 6.03085C4.61272 6.18845 4.57198 6.26201 4.54518 6.35044C4.51838 6.43887 4.51838 6.5293 4.54518 6.61773C4.57198 6.70616 4.61272 6.77972 4.77032 6.93732L25.0639 27.2308C25.2215 27.3884 25.295 27.4292 25.3834 27.456C25.4719 27.4828 25.5623 27.4828 25.6507 27.456C25.7392 27.4292 25.8127 27.3885 25.9703 27.2309L27.2323 25.9689C27.3899 25.8113 27.4307 25.7377 27.4575 25.6493C27.4843 25.5608 27.4843 25.4704 27.4575 25.382C27.4307 25.2935 27.3899 25.22 27.2323 25.0624Z\" fill=\"currentColor\"/>`;\nvar Icon$59 = `<path d=\"M8.66667 6.66667C8.29848 6.66667 8 6.96514 8 7.33333V24.6667C8 25.0349 8.29848 25.3333 8.66667 25.3333H12.6667C13.0349 25.3333 13.3333 25.0349 13.3333 24.6667V7.33333C13.3333 6.96514 13.0349 6.66667 12.6667 6.66667H8.66667Z\" fill=\"currentColor\"/> <path d=\"M19.3333 6.66667C18.9651 6.66667 18.6667 6.96514 18.6667 7.33333V24.6667C18.6667 25.0349 18.9651 25.3333 19.3333 25.3333H23.3333C23.7015 25.3333 24 25.0349 24 24.6667V7.33333C24 6.96514 23.7015 6.66667 23.3333 6.66667H19.3333Z\" fill=\"currentColor\"/>`;\nvar Icon$60 = `<path d=\"M5.33334 26V19.4667C5.33334 19.393 5.39304 19.3333 5.46668 19.3333H7.86668C7.94031 19.3333 8.00001 19.393 8.00001 19.4667V23.3333C8.00001 23.7015 8.29849 24 8.66668 24H23.3333C23.7015 24 24 23.7015 24 23.3333V8.66666C24 8.29847 23.7015 7.99999 23.3333 7.99999H19.4667C19.393 7.99999 19.3333 7.9403 19.3333 7.86666V5.46666C19.3333 5.39302 19.393 5.33333 19.4667 5.33333H26C26.3682 5.33333 26.6667 5.63181 26.6667 5.99999V26C26.6667 26.3682 26.3682 26.6667 26 26.6667H6.00001C5.63182 26.6667 5.33334 26.3682 5.33334 26Z\" fill=\"currentColor\"/> <path d=\"M14.0098 8.42359H10.806C10.6872 8.42359 10.6277 8.56721 10.7117 8.6512L16.5491 14.4886C16.8094 14.7489 16.8094 15.171 16.5491 15.4314L15.3234 16.657C15.0631 16.9174 14.641 16.9174 14.3806 16.657L8.63739 10.9138C8.55339 10.8298 8.40978 10.8893 8.40978 11.0081V14.0236C8.40978 14.3918 8.1113 14.6903 7.74311 14.6903H6.00978C5.64159 14.6903 5.34311 14.3918 5.34311 14.0236L5.34311 6.02359C5.34311 5.6554 5.64159 5.35692 6.00978 5.35692L14.0098 5.35692C14.378 5.35692 14.6764 5.6554 14.6764 6.02359V7.75692C14.6764 8.12511 14.378 8.42359 14.0098 8.42359Z\" fill=\"currentColor\"/>`;\nvar Icon$61 = `<path d=\"M16 15.3333C15.6318 15.3333 15.3333 15.6318 15.3333 16V20C15.3333 20.3682 15.6318 20.6667 16 20.6667H21.3333C21.7015 20.6667 22 20.3682 22 20V16C22 15.6318 21.7015 15.3333 21.3333 15.3333H16Z\" fill=\"currentColor\"/> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M5.33333 7.33334C5.33333 6.96515 5.63181 6.66667 5.99999 6.66667H26C26.3682 6.66667 26.6667 6.96515 26.6667 7.33334V24.6667C26.6667 25.0349 26.3682 25.3333 26 25.3333H5.99999C5.63181 25.3333 5.33333 25.0349 5.33333 24.6667V7.33334ZM7.99999 10C7.99999 9.63182 8.29847 9.33334 8.66666 9.33334H23.3333C23.7015 9.33334 24 9.63182 24 10V22C24 22.3682 23.7015 22.6667 23.3333 22.6667H8.66666C8.29847 22.6667 7.99999 22.3682 7.99999 22V10Z\" fill=\"currentColor\"/>`;\nvar Icon$62 = `<path d=\"M10.6667 6.6548C10.6667 6.10764 11.2894 5.79346 11.7295 6.11862L24.377 15.4634C24.7377 15.7298 24.7377 16.2692 24.3771 16.5357L11.7295 25.8813C11.2895 26.2065 10.6667 25.8923 10.6667 25.3451L10.6667 6.6548Z\" fill=\"currentColor\"/>`;\nvar Icon$63 = `<path d=\"M13.9213 5.53573C14.3146 5.45804 14.6666 5.76987 14.6666 6.17079V7.57215C14.6666 7.89777 14.4305 8.17277 14.114 8.24925C12.5981 8.61559 11.2506 9.41368 10.2091 10.506C9.98474 10.7414 9.62903 10.8079 9.34742 10.6453L8.14112 9.94885C7.79394 9.7484 7.69985 9.28777 7.96359 8.98585C9.48505 7.24409 11.5636 6.00143 13.9213 5.53573Z\" fill=\"currentColor\"/> <path d=\"M5.88974 12.5908C6.01805 12.2101 6.46491 12.0603 6.81279 12.2611L8.01201 12.9535C8.29379 13.1162 8.41396 13.4577 8.32238 13.7699C8.11252 14.4854 7.99998 15.2424 7.99998 16.0257C7.99998 16.809 8.11252 17.566 8.32238 18.2814C8.41396 18.5936 8.29378 18.9352 8.01201 19.0979L6.82742 19.7818C6.48051 19.9821 6.03488 19.8337 5.90521 19.4547C5.5345 18.3712 5.33331 17.2091 5.33331 16C5.33331 14.8078 5.5289 13.6613 5.88974 12.5908Z\" fill=\"currentColor\"/> <path d=\"M8.17106 22.0852C7.82291 22.2862 7.72949 22.7486 7.99532 23.0502C9.51387 24.773 11.5799 26.0017 13.9213 26.4642C14.3146 26.5419 14.6666 26.2301 14.6666 25.8291V24.4792C14.6666 24.1536 14.4305 23.8786 14.114 23.8021C12.5981 23.4358 11.2506 22.6377 10.2091 21.5453C9.98474 21.31 9.62903 21.2435 9.34742 21.4061L8.17106 22.0852Z\" fill=\"currentColor\"/> <path d=\"M17.3333 25.8291C17.3333 26.2301 17.6857 26.5418 18.079 26.4641C22.9748 25.4969 26.6666 21.1796 26.6666 16C26.6666 10.8204 22.9748 6.50302 18.079 5.5358C17.6857 5.4581 17.3333 5.76987 17.3333 6.17079V7.57215C17.3333 7.89777 17.5697 8.17282 17.8862 8.24932C21.3942 9.09721 24 12.2572 24 16.0257C24 19.7942 21.3942 22.9542 17.8862 23.802C17.5697 23.8785 17.3333 24.1536 17.3333 24.4792V25.8291Z\" fill=\"currentColor\"/> <path d=\"M14.3961 10.4163C13.9561 10.0911 13.3333 10.4053 13.3333 10.9525L13.3333 21.0474C13.3333 21.5946 13.9561 21.9087 14.3962 21.5836L21.2273 16.5359C21.5879 16.2694 21.5879 15.73 21.2273 15.4635L14.3961 10.4163Z\" fill=\"currentColor\"/>`;\nvar Icon$74 = `<path d=\"M15.6038 12.2147C16.0439 12.5399 16.6667 12.2257 16.6667 11.6786V10.1789C16.6667 10.1001 16.7351 10.0384 16.8134 10.0479C20.1116 10.4494 22.6667 13.2593 22.6667 16.6659C22.6667 20.3481 19.6817 23.3332 15.9995 23.3332C12.542 23.3332 9.69927 20.7014 9.36509 17.332C9.32875 16.9655 9.03371 16.6662 8.66548 16.6662L6.66655 16.6666C6.29841 16.6666 5.99769 16.966 6.02187 17.3334C6.36494 22.5454 10.7012 26.6667 16 26.6667C21.5228 26.6667 26 22.1895 26 16.6667C26 11.4103 21.9444 7.10112 16.7916 6.69757C16.7216 6.69209 16.6667 6.63396 16.6667 6.56372V4.98824C16.6667 4.44106 16.0439 4.12689 15.6038 4.45206L11.0765 7.79738C10.7159 8.06387 10.7159 8.60326 11.0766 8.86973L15.6038 12.2147Z\" fill=\"currentColor\"/>`;\nvar Icon$77 = `<path d=\"M16.6667 10.3452C16.6667 10.8924 16.0439 11.2066 15.6038 10.8814L11.0766 7.5364C10.7159 7.26993 10.7159 6.73054 11.0766 6.46405L15.6038 3.11873C16.0439 2.79356 16.6667 3.10773 16.6667 3.6549V5.22682C16.6667 5.29746 16.7223 5.35579 16.7927 5.36066C22.6821 5.76757 27.3333 10.674 27.3333 16.6667C27.3333 22.9259 22.2592 28 16 28C9.96483 28 5.03145 23.2827 4.68601 17.3341C4.66466 16.9665 4.96518 16.6673 5.33339 16.6673H7.3334C7.70157 16.6673 7.99714 16.9668 8.02743 17.3337C8.36638 21.4399 11.8064 24.6667 16 24.6667C20.4183 24.6667 24 21.085 24 16.6667C24 12.5225 20.8483 9.11428 16.8113 8.70739C16.7337 8.69957 16.6667 8.76096 16.6667 8.83893V10.3452Z\" fill=\"currentColor\"/> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M17.0879 19.679C17.4553 19.9195 17.8928 20.0398 18.4004 20.0398C18.9099 20.0398 19.3474 19.9205 19.7129 19.6818C20.0803 19.4413 20.3635 19.0938 20.5623 18.6392C20.7612 18.1847 20.8606 17.6373 20.8606 16.9972C20.8625 16.3608 20.764 15.8192 20.5652 15.3722C20.3663 14.9252 20.0822 14.5853 19.7129 14.3523C19.3455 14.1175 18.908 14 18.4004 14C17.8928 14 17.4553 14.1175 17.0879 14.3523C16.7224 14.5853 16.4402 14.9252 16.2413 15.3722C16.0443 15.8173 15.9449 16.3589 15.943 16.9972C15.9411 17.6354 16.0396 18.1818 16.2385 18.6364C16.4373 19.089 16.7205 19.4366 17.0879 19.679ZM19.1362 18.4262C18.9487 18.7349 18.7034 18.8892 18.4004 18.8892C18.1996 18.8892 18.0226 18.8211 17.8691 18.6847C17.7157 18.5464 17.5964 18.3372 17.5112 18.0568C17.4279 17.7765 17.3871 17.4233 17.389 16.9972C17.3909 16.3684 17.4847 15.9025 17.6703 15.5995C17.8559 15.2945 18.0993 15.1421 18.4004 15.1421C18.603 15.1421 18.7801 15.2093 18.9316 15.3438C19.0832 15.4782 19.2015 15.6828 19.2868 15.9574C19.372 16.2301 19.4146 16.5767 19.4146 16.9972C19.4165 17.6392 19.3237 18.1156 19.1362 18.4262Z\" fill=\"currentColor\"/> <path d=\"M13.7746 19.8978C13.8482 19.8978 13.9079 19.8381 13.9079 19.7644V14.2129C13.9079 14.1393 13.8482 14.0796 13.7746 14.0796H12.642C12.6171 14.0796 12.5927 14.0865 12.5716 14.0997L11.2322 14.9325C11.1931 14.9568 11.1693 14.9996 11.1693 15.0457V15.9497C11.1693 16.0539 11.2833 16.1178 11.3722 16.0635L12.464 15.396C12.4682 15.3934 12.473 15.3921 12.4779 15.3921C12.4926 15.3921 12.5045 15.404 12.5045 15.4187V19.7644C12.5045 19.8381 12.5642 19.8978 12.6378 19.8978H13.7746Z\" fill=\"currentColor\"/>`;\nvar Icon$81 = `<path d=\"M15.3333 10.3452C15.3333 10.8924 15.9561 11.2066 16.3962 10.8814L20.9234 7.5364C21.2841 7.26993 21.2841 6.73054 20.9235 6.46405L16.3962 3.11873C15.9561 2.79356 15.3333 3.10773 15.3333 3.6549V5.22682C15.3333 5.29746 15.2778 5.35579 15.2073 5.36066C9.31791 5.76757 4.66667 10.674 4.66667 16.6667C4.66667 22.9259 9.74078 28 16 28C22.0352 28 26.9686 23.2827 27.314 17.3341C27.3354 16.9665 27.0348 16.6673 26.6666 16.6673H24.6666C24.2984 16.6673 24.0029 16.9668 23.9726 17.3337C23.6336 21.4399 20.1937 24.6667 16 24.6667C11.5817 24.6667 8 21.085 8 16.6667C8 12.5225 11.1517 9.11428 15.1887 8.70739C15.2663 8.69957 15.3333 8.76096 15.3333 8.83893V10.3452Z\" fill=\"currentColor\"/> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M17.0879 19.679C17.4553 19.9195 17.8928 20.0398 18.4004 20.0398C18.9099 20.0398 19.3474 19.9205 19.7129 19.6818C20.0803 19.4413 20.3635 19.0938 20.5623 18.6392C20.7612 18.1847 20.8606 17.6373 20.8606 16.9972C20.8625 16.3608 20.764 15.8192 20.5652 15.3722C20.3663 14.9252 20.0822 14.5853 19.7129 14.3523C19.3455 14.1175 18.908 14 18.4004 14C17.8928 14 17.4553 14.1175 17.0879 14.3523C16.7224 14.5853 16.4402 14.9252 16.2413 15.3722C16.0443 15.8173 15.9449 16.3589 15.943 16.9972C15.9411 17.6354 16.0396 18.1818 16.2385 18.6364C16.4373 19.089 16.7205 19.4366 17.0879 19.679ZM19.1362 18.4262C18.9487 18.7349 18.7034 18.8892 18.4004 18.8892C18.1996 18.8892 18.0225 18.8211 17.8691 18.6847C17.7157 18.5464 17.5964 18.3372 17.5112 18.0568C17.4278 17.7765 17.3871 17.4233 17.389 16.9972C17.3909 16.3684 17.4847 15.9025 17.6703 15.5995C17.8559 15.2945 18.0992 15.1421 18.4004 15.1421C18.603 15.1421 18.7801 15.2093 18.9316 15.3438C19.0831 15.4782 19.2015 15.6828 19.2867 15.9574C19.372 16.2301 19.4146 16.5767 19.4146 16.9972C19.4165 17.6392 19.3237 18.1156 19.1362 18.4262Z\" fill=\"currentColor\"/> <path d=\"M13.7746 19.8978C13.8482 19.8978 13.9079 19.8381 13.9079 19.7644V14.2129C13.9079 14.1393 13.8482 14.0796 13.7746 14.0796H12.642C12.6171 14.0796 12.5927 14.0865 12.5716 14.0997L11.2322 14.9325C11.1931 14.9568 11.1693 14.9996 11.1693 15.0457V15.9497C11.1693 16.0539 11.2833 16.1178 11.3722 16.0635L12.464 15.396C12.4682 15.3934 12.473 15.3921 12.4779 15.3921C12.4926 15.3921 12.5045 15.404 12.5045 15.4187V19.7644C12.5045 19.8381 12.5642 19.8978 12.6378 19.8978H13.7746Z\" fill=\"currentColor\"/>`;\nvar Icon$88 = `<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M13.5722 5.33333C13.2429 5.33333 12.9629 5.57382 12.9132 5.89938L12.4063 9.21916C12.4 9.26058 12.3746 9.29655 12.3378 9.31672C12.2387 9.37118 12.1409 9.42779 12.0444 9.48648C12.0086 9.5083 11.9646 9.51242 11.9255 9.49718L8.79572 8.27692C8.48896 8.15732 8.14083 8.27958 7.9762 8.56472L5.5491 12.7686C5.38444 13.0538 5.45271 13.4165 5.70981 13.6223L8.33308 15.7225C8.3658 15.7487 8.38422 15.7887 8.38331 15.8306C8.38209 15.8867 8.38148 15.9429 8.38148 15.9993C8.38148 16.0558 8.3821 16.1121 8.38332 16.1684C8.38423 16.2102 8.36582 16.2503 8.33313 16.2765L5.7103 18.3778C5.45334 18.5836 5.38515 18.9462 5.54978 19.2314L7.97688 23.4352C8.14155 23.7205 8.48981 23.8427 8.79661 23.723L11.926 22.5016C11.9651 22.4864 12.009 22.4905 12.0449 22.5123C12.1412 22.5709 12.2388 22.6274 12.3378 22.6818C12.3745 22.7019 12.4 22.7379 12.4063 22.7793L12.9132 26.0993C12.9629 26.4249 13.2429 26.6654 13.5722 26.6654H18.4264C18.7556 26.6654 19.0356 26.425 19.0854 26.0995L19.5933 22.7801C19.5997 22.7386 19.6252 22.7027 19.6619 22.6825C19.7614 22.6279 19.8596 22.5711 19.9564 22.5121C19.9923 22.4903 20.0362 22.4862 20.0754 22.5015L23.2035 23.7223C23.5103 23.842 23.8585 23.7198 24.0232 23.4346L26.4503 19.2307C26.6149 18.9456 26.5467 18.583 26.2898 18.3771L23.6679 16.2766C23.6352 16.2504 23.6168 16.2104 23.6177 16.1685C23.619 16.1122 23.6196 16.0558 23.6196 15.9993C23.6196 15.9429 23.619 15.8866 23.6177 15.8305C23.6168 15.7886 23.6353 15.7486 23.668 15.7224L26.2903 13.623C26.5474 13.4172 26.6156 13.0544 26.451 12.7692L24.0239 8.56537C23.8592 8.28023 23.5111 8.15797 23.2043 8.27757L20.0758 9.49734C20.0367 9.51258 19.9927 9.50846 19.9569 9.48664C19.8599 9.42762 19.7616 9.37071 19.6618 9.31596C19.6251 9.2958 19.5997 9.25984 19.5933 9.21843L19.0854 5.89915C19.0356 5.57369 18.7556 5.33333 18.4264 5.33333H13.5722ZM16.0001 20.2854C18.3672 20.2854 20.2862 18.3664 20.2862 15.9993C20.2862 13.6322 18.3672 11.7132 16.0001 11.7132C13.6329 11.7132 11.714 13.6322 11.714 15.9993C11.714 18.3664 13.6329 20.2854 16.0001 20.2854Z\" fill=\"currentColor\"/>`;\nvar Icon$104 = `<path d=\"M17.5091 24.6595C17.5091 25.2066 16.8864 25.5208 16.4463 25.1956L9.44847 20.0252C9.42553 20.0083 9.39776 19.9992 9.36923 19.9992H4.66667C4.29848 19.9992 4 19.7007 4 19.3325V12.6658C4 12.2976 4.29848 11.9992 4.66667 11.9992H9.37115C9.39967 11.9992 9.42745 11.99 9.45039 11.9731L16.4463 6.80363C16.8863 6.47845 17.5091 6.79262 17.5091 7.3398L17.5091 24.6595Z\" fill=\"currentColor\"/> <path d=\"M27.5091 9.33336C27.8773 9.33336 28.1758 9.63184 28.1758 10V22C28.1758 22.3682 27.8773 22.6667 27.5091 22.6667H26.1758C25.8076 22.6667 25.5091 22.3682 25.5091 22V10C25.5091 9.63184 25.8076 9.33336 26.1758 9.33336L27.5091 9.33336Z\" fill=\"currentColor\"/> <path d=\"M22.1758 12C22.544 12 22.8424 12.2985 22.8424 12.6667V19.3334C22.8424 19.7016 22.544 20 22.1758 20H20.8424C20.4743 20 20.1758 19.7016 20.1758 19.3334V12.6667C20.1758 12.2985 20.4743 12 20.8424 12H22.1758Z\" fill=\"currentColor\"/>`;\nvar Icon$105 = `<path d=\"M17.5091 24.6594C17.5091 25.2066 16.8864 25.5207 16.4463 25.1956L9.44847 20.0252C9.42553 20.0083 9.39776 19.9991 9.36923 19.9991H4.66667C4.29848 19.9991 4 19.7006 4 19.3324V12.6658C4 12.2976 4.29848 11.9991 4.66667 11.9991H9.37115C9.39967 11.9991 9.42745 11.99 9.45039 11.973L16.4463 6.80358C16.8863 6.4784 17.5091 6.79258 17.5091 7.33975L17.5091 24.6594Z\" fill=\"currentColor\"/> <path d=\"M22.8424 12.6667C22.8424 12.2985 22.544 12 22.1758 12H20.8424C20.4743 12 20.1758 12.2985 20.1758 12.6667V19.3333C20.1758 19.7015 20.4743 20 20.8424 20H22.1758C22.544 20 22.8424 19.7015 22.8424 19.3333V12.6667Z\" fill=\"currentColor\"/>`;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Dm1xEU9Q.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-Dm1xEU9Q.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findYouTubePoster: () => (/* binding */ findYouTubePoster),\n/* harmony export */   resolveYouTubeVideoId: () => (/* binding */ resolveYouTubeVideoId)\n/* harmony export */ });\n/* __next_internal_client_entry_do_not_use__ findYouTubePoster,resolveYouTubeVideoId auto */ const videoIdRE = /(?:youtu\\.be|youtube|youtube\\.com|youtube-nocookie\\.com)(?:\\/shorts)?\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=|)((?:\\w|-){11})/;\nconst posterCache = /* @__PURE__ */ new Map();\nconst pendingFetch = /* @__PURE__ */ new Map();\nfunction resolveYouTubeVideoId(src) {\n    return src.match(videoIdRE)?.[1];\n}\nasync function findYouTubePoster(videoId, abort) {\n    if (posterCache.has(videoId)) return posterCache.get(videoId);\n    if (pendingFetch.has(videoId)) return pendingFetch.get(videoId);\n    const pending = new Promise(async (resolve)=>{\n        const sizes = [\n            \"maxresdefault\",\n            \"sddefault\",\n            \"hqdefault\"\n        ];\n        for (const size of sizes){\n            for (const webp of [\n                true,\n                false\n            ]){\n                const url = resolveYouTubePosterURL(videoId, size, webp), response = await fetch(url, {\n                    mode: \"no-cors\",\n                    signal: abort.signal\n                });\n                if (response.status < 400) {\n                    posterCache.set(videoId, url);\n                    resolve(url);\n                    return;\n                }\n            }\n        }\n    }).catch(()=>\"\").finally(()=>pendingFetch.delete(videoId));\n    pendingFetch.set(videoId, pending);\n    return pending;\n}\nfunction resolveYouTubePosterURL(videoId, size, webp) {\n    const type = webp ? \"webp\" : \"jpg\";\n    return `https://i.ytimg.com/${webp ? \"vi_webp\" : \"vi\"}/${videoId}/${size}.${type}`;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9jaHVua3Mvdmlkc3RhY2stRG0xeEVVOVEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7NkZBRUEsTUFBTUEsWUFBWTtBQUNsQixNQUFNQyxjQUFjLGFBQWEsR0FBRyxJQUFJQztBQUN4QyxNQUFNQyxlQUFlLGFBQWEsR0FBRyxJQUFJRDtBQUN6QyxTQUFTRSxzQkFBc0JDLEdBQUc7SUFDaEMsT0FBT0EsSUFBSUMsS0FBSyxDQUFDTixZQUFZLENBQUMsRUFBRTtBQUNsQztBQUNBLGVBQWVPLGtCQUFrQkMsT0FBTyxFQUFFQyxLQUFLO0lBQzdDLElBQUlSLFlBQVlTLEdBQUcsQ0FBQ0YsVUFBVSxPQUFPUCxZQUFZVSxHQUFHLENBQUNIO0lBQ3JELElBQUlMLGFBQWFPLEdBQUcsQ0FBQ0YsVUFBVSxPQUFPTCxhQUFhUSxHQUFHLENBQUNIO0lBQ3ZELE1BQU1JLFVBQVUsSUFBSUMsUUFBUSxPQUFPQztRQUNqQyxNQUFNQyxRQUFRO1lBQUM7WUFBaUI7WUFBYTtTQUFZO1FBQ3pELEtBQUssTUFBTUMsUUFBUUQsTUFBTztZQUN4QixLQUFLLE1BQU1FLFFBQVE7Z0JBQUM7Z0JBQU07YUFBTSxDQUFFO2dCQUNoQyxNQUFNQyxNQUFNQyx3QkFBd0JYLFNBQVNRLE1BQU1DLE9BQU9HLFdBQVcsTUFBTUMsTUFBTUgsS0FBSztvQkFDcEZJLE1BQU07b0JBQ05DLFFBQVFkLE1BQU1jLE1BQU07Z0JBQ3RCO2dCQUNBLElBQUlILFNBQVNJLE1BQU0sR0FBRyxLQUFLO29CQUN6QnZCLFlBQVl3QixHQUFHLENBQUNqQixTQUFTVTtvQkFDekJKLFFBQVFJO29CQUNSO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGLEdBQUdRLEtBQUssQ0FBQyxJQUFNLElBQUlDLE9BQU8sQ0FBQyxJQUFNeEIsYUFBYXlCLE1BQU0sQ0FBQ3BCO0lBQ3JETCxhQUFhc0IsR0FBRyxDQUFDakIsU0FBU0k7SUFDMUIsT0FBT0E7QUFDVDtBQUNBLFNBQVNPLHdCQUF3QlgsT0FBTyxFQUFFUSxJQUFJLEVBQUVDLElBQUk7SUFDbEQsTUFBTVksT0FBT1osT0FBTyxTQUFTO0lBQzdCLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRUEsT0FBTyxZQUFZLEtBQUssQ0FBQyxFQUFFVCxRQUFRLENBQUMsRUFBRVEsS0FBSyxDQUFDLEVBQUVhLE1BQU07QUFDcEY7QUFFb0QiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbG9yZHJcXERvd25sb2Fkc1xcQW5pVGVhbXMtbWFpblxcbm9kZV9tb2R1bGVzXFxAdmlkc3RhY2tcXHJlYWN0XFxkZXZcXGNodW5rc1xcdmlkc3RhY2stRG0xeEVVOVEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCJcblxuY29uc3QgdmlkZW9JZFJFID0gLyg/OnlvdXR1XFwuYmV8eW91dHViZXx5b3V0dWJlXFwuY29tfHlvdXR1YmUtbm9jb29raWVcXC5jb20pKD86XFwvc2hvcnRzKT9cXC8oPzplbWJlZFxcL3x2XFwvfHdhdGNoXFw/dj18d2F0Y2hcXD8uKyZ2PXwpKCg/Olxcd3wtKXsxMX0pLztcbmNvbnN0IHBvc3RlckNhY2hlID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbmNvbnN0IHBlbmRpbmdGZXRjaCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG5mdW5jdGlvbiByZXNvbHZlWW91VHViZVZpZGVvSWQoc3JjKSB7XG4gIHJldHVybiBzcmMubWF0Y2godmlkZW9JZFJFKT8uWzFdO1xufVxuYXN5bmMgZnVuY3Rpb24gZmluZFlvdVR1YmVQb3N0ZXIodmlkZW9JZCwgYWJvcnQpIHtcbiAgaWYgKHBvc3RlckNhY2hlLmhhcyh2aWRlb0lkKSkgcmV0dXJuIHBvc3RlckNhY2hlLmdldCh2aWRlb0lkKTtcbiAgaWYgKHBlbmRpbmdGZXRjaC5oYXModmlkZW9JZCkpIHJldHVybiBwZW5kaW5nRmV0Y2guZ2V0KHZpZGVvSWQpO1xuICBjb25zdCBwZW5kaW5nID0gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUpID0+IHtcbiAgICBjb25zdCBzaXplcyA9IFtcIm1heHJlc2RlZmF1bHRcIiwgXCJzZGRlZmF1bHRcIiwgXCJocWRlZmF1bHRcIl07XG4gICAgZm9yIChjb25zdCBzaXplIG9mIHNpemVzKSB7XG4gICAgICBmb3IgKGNvbnN0IHdlYnAgb2YgW3RydWUsIGZhbHNlXSkge1xuICAgICAgICBjb25zdCB1cmwgPSByZXNvbHZlWW91VHViZVBvc3RlclVSTCh2aWRlb0lkLCBzaXplLCB3ZWJwKSwgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgICAgICBtb2RlOiBcIm5vLWNvcnNcIixcbiAgICAgICAgICBzaWduYWw6IGFib3J0LnNpZ25hbFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA8IDQwMCkge1xuICAgICAgICAgIHBvc3RlckNhY2hlLnNldCh2aWRlb0lkLCB1cmwpO1xuICAgICAgICAgIHJlc29sdmUodXJsKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pLmNhdGNoKCgpID0+IFwiXCIpLmZpbmFsbHkoKCkgPT4gcGVuZGluZ0ZldGNoLmRlbGV0ZSh2aWRlb0lkKSk7XG4gIHBlbmRpbmdGZXRjaC5zZXQodmlkZW9JZCwgcGVuZGluZyk7XG4gIHJldHVybiBwZW5kaW5nO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVlvdVR1YmVQb3N0ZXJVUkwodmlkZW9JZCwgc2l6ZSwgd2VicCkge1xuICBjb25zdCB0eXBlID0gd2VicCA/IFwid2VicFwiIDogXCJqcGdcIjtcbiAgcmV0dXJuIGBodHRwczovL2kueXRpbWcuY29tLyR7d2VicCA/IFwidmlfd2VicFwiIDogXCJ2aVwifS8ke3ZpZGVvSWR9LyR7c2l6ZX0uJHt0eXBlfWA7XG59XG5cbmV4cG9ydCB7IGZpbmRZb3VUdWJlUG9zdGVyLCByZXNvbHZlWW91VHViZVZpZGVvSWQgfTtcbiJdLCJuYW1lcyI6WyJ2aWRlb0lkUkUiLCJwb3N0ZXJDYWNoZSIsIk1hcCIsInBlbmRpbmdGZXRjaCIsInJlc29sdmVZb3VUdWJlVmlkZW9JZCIsInNyYyIsIm1hdGNoIiwiZmluZFlvdVR1YmVQb3N0ZXIiLCJ2aWRlb0lkIiwiYWJvcnQiLCJoYXMiLCJnZXQiLCJwZW5kaW5nIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzaXplcyIsInNpemUiLCJ3ZWJwIiwidXJsIiwicmVzb2x2ZVlvdVR1YmVQb3N0ZXJVUkwiLCJyZXNwb25zZSIsImZldGNoIiwibW9kZSIsInNpZ25hbCIsInN0YXR1cyIsInNldCIsImNhdGNoIiwiZmluYWxseSIsImRlbGV0ZSIsInR5cGUiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-Dm1xEU9Q.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-GeL5yun1.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-GeL5yun1.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Captions: () => (/* binding */ Captions),\n/* harmony export */   ChapterTitle: () => (/* binding */ ChapterTitle),\n/* harmony export */   Content: () => (/* binding */ Content),\n/* harmony export */   GoogleCastButton: () => (/* binding */ GoogleCastButton),\n/* harmony export */   Group: () => (/* binding */ Group),\n/* harmony export */   MediaAnnouncer: () => (/* binding */ MediaAnnouncer),\n/* harmony export */   Root: () => (/* binding */ Root$4),\n/* harmony export */   Root$1: () => (/* binding */ Root$2),\n/* harmony export */   Root$2: () => (/* binding */ Root$1),\n/* harmony export */   Root$3: () => (/* binding */ Root$3),\n/* harmony export */   Root$4: () => (/* binding */ Root$5),\n/* harmony export */   Root$5: () => (/* binding */ Root),\n/* harmony export */   Title: () => (/* binding */ Title),\n/* harmony export */   Track: () => (/* binding */ Track),\n/* harmony export */   TrackFill: () => (/* binding */ TrackFill),\n/* harmony export */   Trigger: () => (/* binding */ Trigger),\n/* harmony export */   audioGainSlider: () => (/* binding */ audioGainSlider),\n/* harmony export */   controls: () => (/* binding */ controls),\n/* harmony export */   createComputed: () => (/* binding */ createComputed),\n/* harmony export */   createEffect: () => (/* binding */ createEffect),\n/* harmony export */   createSignal: () => (/* binding */ createSignal),\n/* harmony export */   qualitySlider: () => (/* binding */ qualitySlider),\n/* harmony export */   speedSlider: () => (/* binding */ speedSlider),\n/* harmony export */   spinner: () => (/* binding */ spinner),\n/* harmony export */   tooltip: () => (/* binding */ tooltip),\n/* harmony export */   useActiveTextCues: () => (/* binding */ useActiveTextCues),\n/* harmony export */   useActiveTextTrack: () => (/* binding */ useActiveTextTrack),\n/* harmony export */   useChapterOptions: () => (/* binding */ useChapterOptions),\n/* harmony export */   useChapterTitle: () => (/* binding */ useChapterTitle),\n/* harmony export */   useScoped: () => (/* binding */ useScoped),\n/* harmony export */   useTextCues: () => (/* binding */ useTextCues)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-D_bWd66h.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js\");\n/* harmony import */ var _vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-DUlCophs.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-DUlCophs.js\");\n/* harmony import */ var _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack--AIGOV5A.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack--AIGOV5A.js\");\n/* __next_internal_client_entry_do_not_use__ Captions,ChapterTitle,Content,GoogleCastButton,Group,MediaAnnouncer,Root,Root$1,Root$2,Root$3,Root$4,Root$5,Title,Track,TrackFill,Trigger,audioGainSlider,controls,createComputed,createEffect,createSignal,qualitySlider,speedSlider,spinner,tooltip,useActiveTextCues,useActiveTextTrack,useChapterOptions,useChapterTitle,useScoped,useTextCues auto */ \n\n\n\nconst MediaAnnouncerBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.MediaAnnouncerInstance, {\n    events: [\n        \"onChange\"\n    ]\n});\nconst MediaAnnouncer = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ style, children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaAnnouncerBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.div, {\n            ...props2,\n            style: {\n                display: \"contents\",\n                ...style\n            },\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nMediaAnnouncer.displayName = \"MediaAnnouncer\";\nconst ControlsBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.ControlsInstance);\nconst Root$5 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ControlsBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nRoot$5.displayName = \"Controls\";\nconst ControlsGroupBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.ControlsGroupInstance);\nconst Group = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ControlsGroupBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nGroup.displayName = \"ControlsGroup\";\nvar controls = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Group: Group,\n    Root: Root$5\n});\nconst TooltipBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.TooltipInstance);\nfunction Root$4({ children, ...props }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TooltipBridge, {\n        ...props\n    }, children);\n}\nRoot$4.displayName = \"Tooltip\";\nconst TriggerBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.TooltipTriggerInstance);\nconst Trigger = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TriggerBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nTrigger.displayName = \"TooltipTrigger\";\nconst ContentBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.TooltipContentInstance);\nconst Content = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ContentBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.div, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nContent.displayName = \"TooltipContent\";\nvar tooltip = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Content: Content,\n    Root: Root$4,\n    Trigger: Trigger\n});\nconst GoogleCastButtonBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.GoogleCastButtonInstance, {\n    domEventsRegex: /^onMedia/\n});\nconst GoogleCastButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(GoogleCastButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.button, {\n            ...props2,\n            ref: (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nGoogleCastButton.displayName = \"GoogleCastButton\";\nconst QualitySliderBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.QualitySliderInstance, {\n    events: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.sliderCallbacks,\n    domEventsRegex: /^onMedia/\n});\nconst Root$3 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QualitySliderBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.div, {\n            ...props2\n        }, children));\n});\nRoot$3.displayName = \"QualitySlider\";\nvar qualitySlider = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Preview: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Preview,\n    Root: Root$3,\n    Steps: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Steps,\n    Thumb: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Thumb,\n    Track: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Track,\n    TrackFill: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.TrackFill,\n    Value: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Value\n});\nconst AudioGainSliderBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.AudioGainSliderInstance, {\n    events: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.sliderCallbacks,\n    domEventsRegex: /^onMedia/\n});\nconst Root$2 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioGainSliderBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.div, {\n            ...props2\n        }, children));\n});\nRoot$2.displayName = \"AudioGainSlider\";\nvar audioGainSlider = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Preview: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Preview,\n    Root: Root$2,\n    Steps: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Steps,\n    Thumb: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Thumb,\n    Track: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Track,\n    TrackFill: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.TrackFill,\n    Value: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Value\n});\nconst SpeedSliderBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.SpeedSliderInstance, {\n    events: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.sliderCallbacks,\n    domEventsRegex: /^onMedia/\n});\nconst Root$1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SpeedSliderBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.div, {\n            ...props2\n        }, children));\n});\nRoot$1.displayName = \"SpeedSlider\";\nvar speedSlider = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Preview: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Preview,\n    Root: Root$1,\n    Steps: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Steps,\n    Thumb: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Thumb,\n    Track: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Track,\n    TrackFill: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.TrackFill,\n    Value: _vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.Value\n});\nconst Title = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    const $title = (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.useMediaState)(\"title\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.span, {\n        ...props,\n        ref: forwardRef\n    }, $title, children);\n});\nTitle.displayName = \"Title\";\nfunction useActiveTextCues(track) {\n    const [activeCues, setActiveCues] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useActiveTextCues.useEffect\": ()=>{\n            if (!track) {\n                setActiveCues([]);\n                return;\n            }\n            function onCuesChange() {\n                if (track) setActiveCues(track.activeCues);\n            }\n            onCuesChange();\n            return (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.listenEvent)(track, \"cue-change\", onCuesChange);\n        }\n    }[\"useActiveTextCues.useEffect\"], [\n        track\n    ]);\n    return activeCues;\n}\nfunction useActiveTextTrack(kind) {\n    const media = (0,_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.useMediaContext)(), [track, setTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useActiveTextTrack.useEffect\": ()=>{\n            return (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.watchActiveTextTrack)(media.textTracks, kind, setTrack);\n        }\n    }[\"useActiveTextTrack.useEffect\"], [\n        kind\n    ]);\n    return track;\n}\nfunction useChapterTitle() {\n    const $track = useActiveTextTrack(\"chapters\"), $cues = useActiveTextCues($track);\n    return $cues[0]?.text || \"\";\n}\nconst ChapterTitle = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ defaultText = \"\", children, ...props }, forwardRef)=>{\n    const $chapterTitle = useChapterTitle();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.span, {\n        ...props,\n        ref: forwardRef\n    }, $chapterTitle || defaultText, children);\n});\nChapterTitle.displayName = \"ChapterTitle\";\nconst CaptionsBridge = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.createReactComponent)(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.CaptionsInstance);\nconst Captions = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CaptionsBridge, {\n        ...props,\n        ref: forwardRef\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.Primitive.div, {\n            ...props2\n        }, children));\n});\nCaptions.displayName = \"Captions\";\nconst Root = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ size = 96, children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        width: size,\n        height: size,\n        fill: \"none\",\n        viewBox: \"0 0 120 120\",\n        \"aria-hidden\": \"true\",\n        \"data-part\": \"root\",\n        ...props,\n        ref: forwardRef\n    }, children);\n});\nconst Track = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ width = 8, children, ...props }, ref)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: \"60\",\n        cy: \"60\",\n        r: \"54\",\n        stroke: \"currentColor\",\n        strokeWidth: width,\n        \"data-part\": \"track\",\n        ...props,\n        ref\n    }, children));\nconst TrackFill = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ width = 8, fillPercent = 50, children, ...props }, ref)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: \"60\",\n        cy: \"60\",\n        r: \"54\",\n        stroke: \"currentColor\",\n        pathLength: \"100\",\n        strokeWidth: width,\n        strokeDasharray: 100,\n        strokeDashoffset: 100 - fillPercent,\n        \"data-part\": \"track-fill\",\n        ...props,\n        ref\n    }, children));\nvar spinner = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Root: Root,\n    Track: Track,\n    TrackFill: TrackFill\n});\nfunction createSignal(initialValue, deps = []) {\n    const scope = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useReactScope)();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"createSignal.useMemo\": ()=>(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.scoped)({\n                \"createSignal.useMemo\": ()=>(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.signal)(initialValue)\n            }[\"createSignal.useMemo\"], scope)\n    }[\"createSignal.useMemo\"], [\n        scope,\n        ...deps\n    ]);\n}\nfunction createComputed(compute, deps = []) {\n    const scope = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useReactScope)();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"createComputed.useMemo\": ()=>(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.scoped)({\n                \"createComputed.useMemo\": ()=>(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.computed)(compute)\n            }[\"createComputed.useMemo\"], scope)\n    }[\"createComputed.useMemo\"], [\n        scope,\n        ...deps\n    ]);\n}\nfunction createEffect(compute, deps = []) {\n    const scope = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useReactScope)();\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"createEffect.useEffect\": ()=>(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.scoped)({\n                \"createEffect.useEffect\": ()=>(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)(compute)\n            }[\"createEffect.useEffect\"], scope)\n    }[\"createEffect.useEffect\"], [\n        scope,\n        ...deps\n    ]);\n}\nfunction useScoped(compute) {\n    const scope = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useReactScope)();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"useScoped.useMemo\": ()=>(0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.scoped)(compute, scope)\n    }[\"useScoped.useMemo\"], [\n        scope\n    ]);\n}\nfunction useTextCues(track) {\n    const [cues, setCues] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useTextCues.useEffect\": ()=>{\n            if (!track) return;\n            function onCuesChange() {\n                if (track) setCues([\n                    ...track.cues\n                ]);\n            }\n            const events = new _vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.EventsController(track).add(\"add-cue\", onCuesChange).add(\"remove-cue\", onCuesChange);\n            onCuesChange();\n            return ({\n                \"useTextCues.useEffect\": ()=>{\n                    setCues([]);\n                    events.abort();\n                }\n            })[\"useTextCues.useEffect\"];\n        }\n    }[\"useTextCues.useEffect\"], [\n        track\n    ]);\n    return cues;\n}\nfunction useChapterOptions() {\n    const media = (0,_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_3__.useMediaContext)(), track = useActiveTextTrack(\"chapters\"), cues = useTextCues(track), $startTime = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(media.$state.seekableStart), $endTime = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.useSignal)(media.$state.seekableEnd);\n    useActiveTextCues(track);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"useChapterOptions.useMemo\": ()=>{\n            const options = track ? cues.filter({\n                \"useChapterOptions.useMemo\": (cue)=>cue.startTime <= $endTime && cue.endTime >= $startTime\n            }[\"useChapterOptions.useMemo\"]).map({\n                \"useChapterOptions.useMemo\": (cue, i)=>{\n                    let currentRef = null, stopProgressEffect;\n                    return {\n                        cue,\n                        label: cue.text,\n                        value: i.toString(),\n                        startTimeText: (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.formatTime)(Math.max(0, cue.startTime - $startTime)),\n                        durationText: (0,_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_2__.formatSpokenTime)(Math.min($endTime, cue.endTime) - Math.max($startTime, cue.startTime)),\n                        get selected () {\n                            return cue === track.activeCues[0];\n                        },\n                        setProgressVar (ref) {\n                            if (!ref || cue !== track.activeCues[0]) {\n                                stopProgressEffect?.();\n                                stopProgressEffect = void 0;\n                                ref?.style.setProperty(\"--progress\", \"0%\");\n                                currentRef = null;\n                                return;\n                            }\n                            if (currentRef === ref) return;\n                            currentRef = ref;\n                            stopProgressEffect?.();\n                            stopProgressEffect = (0,_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_1__.effect)({\n                                \"useChapterOptions.useMemo\": ()=>{\n                                    const { realCurrentTime } = media.$state, time = realCurrentTime(), cueStartTime = Math.max($startTime, cue.startTime), duration = Math.min($endTime, cue.endTime) - cueStartTime, progress = Math.max(0, time - cueStartTime) / duration * 100;\n                                    ref.style.setProperty(\"--progress\", progress.toFixed(3) + \"%\");\n                                }\n                            }[\"useChapterOptions.useMemo\"]);\n                        },\n                        select (trigger) {\n                            media.remote.seek(cue.startTime - $startTime, trigger);\n                        }\n                    };\n                }\n            }[\"useChapterOptions.useMemo\"]) : [];\n            Object.defineProperty(options, \"selectedValue\", {\n                get () {\n                    const index = options.findIndex({\n                        \"useChapterOptions.useMemo.index\": (option)=>option.selected\n                    }[\"useChapterOptions.useMemo.index\"]);\n                    return (index >= 0 ? index : 0).toString();\n                }\n            });\n            return options;\n        }\n    }[\"useChapterOptions.useMemo\"], [\n        cues,\n        $startTime,\n        $endTime\n    ]);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-GeL5yun1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-krOAtKMi.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/chunks/vidstack-krOAtKMi.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getVimeoVideoInfo: () => (/* binding */ getVimeoVideoInfo),\n/* harmony export */   resolveVimeoVideoId: () => (/* binding */ resolveVimeoVideoId)\n/* harmony export */ });\n/* __next_internal_client_entry_do_not_use__ getVimeoVideoInfo,resolveVimeoVideoId auto */ const videoIdRE = /(?:https:\\/\\/)?(?:player\\.)?vimeo(?:\\.com)?\\/(?:video\\/)?(\\d+)(?:(?:\\?hash=|\\?h=|\\/)(.*))?/;\nconst infoCache = /* @__PURE__ */ new Map();\nconst pendingFetch = /* @__PURE__ */ new Map();\nfunction resolveVimeoVideoId(src) {\n    const matches = src.match(videoIdRE);\n    return {\n        videoId: matches?.[1],\n        hash: matches?.[2]\n    };\n}\nasync function getVimeoVideoInfo(videoId, abort, videoHash) {\n    if (infoCache.has(videoId)) return infoCache.get(videoId);\n    if (pendingFetch.has(videoId)) return pendingFetch.get(videoId);\n    let oembedSrc = `https://vimeo.com/api/oembed.json?url=https://player.vimeo.com/video/${videoId}`;\n    if (videoHash) {\n        oembedSrc = oembedSrc.concat(`?h=${videoHash}`);\n    }\n    const promise = window.fetch(oembedSrc, {\n        mode: \"cors\",\n        signal: abort.signal\n    }).then((response)=>response.json()).then((data)=>{\n        const thumnailRegex = /vimeocdn.com\\/video\\/(.*)?_/, thumbnailId = data?.thumbnail_url?.match(thumnailRegex)?.[1], poster = thumbnailId ? `https://i.vimeocdn.com/video/${thumbnailId}_1920x1080.webp` : \"\", info = {\n            title: data?.title ?? \"\",\n            duration: data?.duration ?? 0,\n            poster,\n            pro: data.account_type !== \"basic\"\n        };\n        infoCache.set(videoId, info);\n        return info;\n    }).finally(()=>pendingFetch.delete(videoId));\n    pendingFetch.set(videoId, promise);\n    return promise;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9jaHVua3Mvdmlkc3RhY2sta3JPQXRLTWkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7MkZBRUEsTUFBTUEsWUFBWTtBQUNsQixNQUFNQyxZQUFZLGFBQWEsR0FBRyxJQUFJQztBQUN0QyxNQUFNQyxlQUFlLGFBQWEsR0FBRyxJQUFJRDtBQUN6QyxTQUFTRSxvQkFBb0JDLEdBQUc7SUFDOUIsTUFBTUMsVUFBVUQsSUFBSUUsS0FBSyxDQUFDUDtJQUMxQixPQUFPO1FBQUVRLFNBQVNGLFNBQVMsQ0FBQyxFQUFFO1FBQUVHLE1BQU1ILFNBQVMsQ0FBQyxFQUFFO0lBQUM7QUFDckQ7QUFDQSxlQUFlSSxrQkFBa0JGLE9BQU8sRUFBRUcsS0FBSyxFQUFFQyxTQUFTO0lBQ3hELElBQUlYLFVBQVVZLEdBQUcsQ0FBQ0wsVUFBVSxPQUFPUCxVQUFVYSxHQUFHLENBQUNOO0lBQ2pELElBQUlMLGFBQWFVLEdBQUcsQ0FBQ0wsVUFBVSxPQUFPTCxhQUFhVyxHQUFHLENBQUNOO0lBQ3ZELElBQUlPLFlBQVksQ0FBQyxxRUFBcUUsRUFBRVAsU0FBUztJQUNqRyxJQUFJSSxXQUFXO1FBQ2JHLFlBQVlBLFVBQVVDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRUosV0FBVztJQUNoRDtJQUNBLE1BQU1LLFVBQVVDLE9BQU9DLEtBQUssQ0FBQ0osV0FBVztRQUN0Q0ssTUFBTTtRQUNOQyxRQUFRVixNQUFNVSxNQUFNO0lBQ3RCLEdBQUdDLElBQUksQ0FBQyxDQUFDQyxXQUFhQSxTQUFTQyxJQUFJLElBQUlGLElBQUksQ0FBQyxDQUFDRztRQUMzQyxNQUFNQyxnQkFBZ0IsK0JBQStCQyxjQUFjRixNQUFNRyxlQUFlckIsTUFBTW1CLGdCQUFnQixDQUFDLEVBQUUsRUFBRUcsU0FBU0YsY0FBYyxDQUFDLDZCQUE2QixFQUFFQSxZQUFZLGVBQWUsQ0FBQyxHQUFHLElBQUlHLE9BQU87WUFDbE5DLE9BQU9OLE1BQU1NLFNBQVM7WUFDdEJDLFVBQVVQLE1BQU1PLFlBQVk7WUFDNUJIO1lBQ0FJLEtBQUtSLEtBQUtTLFlBQVksS0FBSztRQUM3QjtRQUNBakMsVUFBVWtDLEdBQUcsQ0FBQzNCLFNBQVNzQjtRQUN2QixPQUFPQTtJQUNULEdBQUdNLE9BQU8sQ0FBQyxJQUFNakMsYUFBYWtDLE1BQU0sQ0FBQzdCO0lBQ3JDTCxhQUFhZ0MsR0FBRyxDQUFDM0IsU0FBU1M7SUFDMUIsT0FBT0E7QUFDVDtBQUVrRCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxsb3JkclxcRG93bmxvYWRzXFxBbmlUZWFtcy1tYWluXFxub2RlX21vZHVsZXNcXEB2aWRzdGFja1xccmVhY3RcXGRldlxcY2h1bmtzXFx2aWRzdGFjay1rck9BdEtNaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIlxuXG5jb25zdCB2aWRlb0lkUkUgPSAvKD86aHR0cHM6XFwvXFwvKT8oPzpwbGF5ZXJcXC4pP3ZpbWVvKD86XFwuY29tKT9cXC8oPzp2aWRlb1xcLyk/KFxcZCspKD86KD86XFw/aGFzaD18XFw/aD18XFwvKSguKikpPy87XG5jb25zdCBpbmZvQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuY29uc3QgcGVuZGluZ0ZldGNoID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbmZ1bmN0aW9uIHJlc29sdmVWaW1lb1ZpZGVvSWQoc3JjKSB7XG4gIGNvbnN0IG1hdGNoZXMgPSBzcmMubWF0Y2godmlkZW9JZFJFKTtcbiAgcmV0dXJuIHsgdmlkZW9JZDogbWF0Y2hlcz8uWzFdLCBoYXNoOiBtYXRjaGVzPy5bMl0gfTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldFZpbWVvVmlkZW9JbmZvKHZpZGVvSWQsIGFib3J0LCB2aWRlb0hhc2gpIHtcbiAgaWYgKGluZm9DYWNoZS5oYXModmlkZW9JZCkpIHJldHVybiBpbmZvQ2FjaGUuZ2V0KHZpZGVvSWQpO1xuICBpZiAocGVuZGluZ0ZldGNoLmhhcyh2aWRlb0lkKSkgcmV0dXJuIHBlbmRpbmdGZXRjaC5nZXQodmlkZW9JZCk7XG4gIGxldCBvZW1iZWRTcmMgPSBgaHR0cHM6Ly92aW1lby5jb20vYXBpL29lbWJlZC5qc29uP3VybD1odHRwczovL3BsYXllci52aW1lby5jb20vdmlkZW8vJHt2aWRlb0lkfWA7XG4gIGlmICh2aWRlb0hhc2gpIHtcbiAgICBvZW1iZWRTcmMgPSBvZW1iZWRTcmMuY29uY2F0KGA/aD0ke3ZpZGVvSGFzaH1gKTtcbiAgfVxuICBjb25zdCBwcm9taXNlID0gd2luZG93LmZldGNoKG9lbWJlZFNyYywge1xuICAgIG1vZGU6IFwiY29yc1wiLFxuICAgIHNpZ25hbDogYWJvcnQuc2lnbmFsXG4gIH0pLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpLnRoZW4oKGRhdGEpID0+IHtcbiAgICBjb25zdCB0aHVtbmFpbFJlZ2V4ID0gL3ZpbWVvY2RuLmNvbVxcL3ZpZGVvXFwvKC4qKT9fLywgdGh1bWJuYWlsSWQgPSBkYXRhPy50aHVtYm5haWxfdXJsPy5tYXRjaCh0aHVtbmFpbFJlZ2V4KT8uWzFdLCBwb3N0ZXIgPSB0aHVtYm5haWxJZCA/IGBodHRwczovL2kudmltZW9jZG4uY29tL3ZpZGVvLyR7dGh1bWJuYWlsSWR9XzE5MjB4MTA4MC53ZWJwYCA6IFwiXCIsIGluZm8gPSB7XG4gICAgICB0aXRsZTogZGF0YT8udGl0bGUgPz8gXCJcIixcbiAgICAgIGR1cmF0aW9uOiBkYXRhPy5kdXJhdGlvbiA/PyAwLFxuICAgICAgcG9zdGVyLFxuICAgICAgcHJvOiBkYXRhLmFjY291bnRfdHlwZSAhPT0gXCJiYXNpY1wiXG4gICAgfTtcbiAgICBpbmZvQ2FjaGUuc2V0KHZpZGVvSWQsIGluZm8pO1xuICAgIHJldHVybiBpbmZvO1xuICB9KS5maW5hbGx5KCgpID0+IHBlbmRpbmdGZXRjaC5kZWxldGUodmlkZW9JZCkpO1xuICBwZW5kaW5nRmV0Y2guc2V0KHZpZGVvSWQsIHByb21pc2UpO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZXhwb3J0IHsgZ2V0VmltZW9WaWRlb0luZm8sIHJlc29sdmVWaW1lb1ZpZGVvSWQgfTtcbiJdLCJuYW1lcyI6WyJ2aWRlb0lkUkUiLCJpbmZvQ2FjaGUiLCJNYXAiLCJwZW5kaW5nRmV0Y2giLCJyZXNvbHZlVmltZW9WaWRlb0lkIiwic3JjIiwibWF0Y2hlcyIsIm1hdGNoIiwidmlkZW9JZCIsImhhc2giLCJnZXRWaW1lb1ZpZGVvSW5mbyIsImFib3J0IiwidmlkZW9IYXNoIiwiaGFzIiwiZ2V0Iiwib2VtYmVkU3JjIiwiY29uY2F0IiwicHJvbWlzZSIsIndpbmRvdyIsImZldGNoIiwibW9kZSIsInNpZ25hbCIsInRoZW4iLCJyZXNwb25zZSIsImpzb24iLCJkYXRhIiwidGh1bW5haWxSZWdleCIsInRodW1ibmFpbElkIiwidGh1bWJuYWlsX3VybCIsInBvc3RlciIsImluZm8iLCJ0aXRsZSIsImR1cmF0aW9uIiwicHJvIiwiYWNjb3VudF90eXBlIiwic2V0IiwiZmluYWxseSIsImRlbGV0ZSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-krOAtKMi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/player/vidstack-default-icons.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/player/vidstack-default-icons.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultLayoutIcons: () => (/* binding */ defaultLayoutIcons)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chunks/vidstack-D_bWd66h.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js\");\n/* harmony import */ var _chunks_vidstack_CBF7iUqu_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunks/vidstack-CBF7iUqu.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CBF7iUqu.js\");\n/* __next_internal_client_entry_do_not_use__ defaultLayoutIcons auto */ \n\n\nfunction createIcon(paths) {\n    function DefaultLayoutIcon(props) {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_chunks_vidstack_CBF7iUqu_js__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n            paths,\n            ...props\n        });\n    }\n    DefaultLayoutIcon.displayName = \"DefaultLayoutIcon\";\n    return DefaultLayoutIcon;\n}\nconst defaultLayoutIcons = {\n    AirPlayButton: {\n        Default: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$5)\n    },\n    GoogleCastButton: {\n        Default: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$24)\n    },\n    PlayButton: {\n        Play: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$62),\n        Pause: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$59),\n        Replay: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$74)\n    },\n    MuteButton: {\n        Mute: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$54),\n        VolumeLow: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$105),\n        VolumeHigh: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$104)\n    },\n    CaptionButton: {\n        On: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$26),\n        Off: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$27)\n    },\n    PIPButton: {\n        Enter: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$61),\n        Exit: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$60)\n    },\n    FullscreenButton: {\n        Enter: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$40),\n        Exit: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$39)\n    },\n    SeekButton: {\n        Backward: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$77),\n        Forward: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$81)\n    },\n    DownloadButton: {\n        Default: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$31)\n    },\n    Menu: {\n        Accessibility: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$0),\n        ArrowLeft: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$11),\n        ArrowRight: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$22),\n        Audio: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$53),\n        Chapters: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$16),\n        Captions: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$27),\n        Playback: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$63),\n        Settings: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$88),\n        AudioBoostUp: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$104),\n        AudioBoostDown: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$105),\n        SpeedUp: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$35),\n        SpeedDown: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$34),\n        QualityUp: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$13),\n        QualityDown: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$8),\n        FontSizeUp: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$13),\n        FontSizeDown: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$8),\n        OpacityUp: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$33),\n        OpacityDown: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$56),\n        RadioCheck: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$19)\n    },\n    KeyboardDisplay: {\n        Play: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$62),\n        Pause: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$59),\n        Mute: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$54),\n        VolumeUp: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$104),\n        VolumeDown: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$105),\n        EnterFullscreen: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$40),\n        ExitFullscreen: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$39),\n        EnterPiP: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$61),\n        ExitPiP: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$60),\n        CaptionsOn: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$26),\n        CaptionsOff: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$27),\n        SeekForward: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$35),\n        SeekBackward: createIcon(_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Icon$34)\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L2Rldi9wbGF5ZXIvdmlkc3RhY2stZGVmYXVsdC1pY29ucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O3dFQUUrQjtBQUN1UztBQUNoUjtBQUV0RCxTQUFTaUMsV0FBV0MsS0FBSztJQUN2QixTQUFTQyxrQkFBa0JDLEtBQUs7UUFDOUIsT0FBTyxhQUFhLGlCQUFHcEMsZ0RBQW1CLENBQUNnQyw4REFBSUEsRUFBRTtZQUFFRTtZQUFPLEdBQUdFLEtBQUs7UUFBQztJQUNyRTtJQUNBRCxrQkFBa0JHLFdBQVcsR0FBRztJQUNoQyxPQUFPSDtBQUNUO0FBQ0EsTUFBTUkscUJBQXFCO0lBQ3pCQyxlQUFlO1FBQ2JDLFNBQVNSLFdBQVdGLGdFQUFNQTtJQUM1QjtJQUNBVyxrQkFBa0I7UUFDaEJELFNBQVNSLFdBQVdILGlFQUFPQTtJQUM3QjtJQUNBYSxZQUFZO1FBQ1ZDLE1BQU1YLFdBQVdwQixpRUFBT0E7UUFDeEJnQyxPQUFPWixXQUFXckIsaUVBQU9BO1FBQ3pCa0MsUUFBUWIsV0FBV0osaUVBQU9BO0lBQzVCO0lBQ0FrQixZQUFZO1FBQ1ZDLE1BQU1mLFdBQVd0QixpRUFBT0E7UUFDeEJzQyxXQUFXaEIsV0FBV3hCLGtFQUFRQTtRQUM5QnlDLFlBQVlqQixXQUFXdkIsa0VBQVFBO0lBQ2pDO0lBQ0F5QyxlQUFlO1FBQ2JDLElBQUluQixXQUFXN0IsaUVBQU9BO1FBQ3RCaUQsS0FBS3BCLFdBQVc5QixpRUFBT0E7SUFDekI7SUFDQW1ELFdBQVc7UUFDVEMsT0FBT3RCLFdBQVczQixpRUFBT0E7UUFDekJrRCxNQUFNdkIsV0FBVzVCLGlFQUFPQTtJQUMxQjtJQUNBb0Qsa0JBQWtCO1FBQ2hCRixPQUFPdEIsV0FBV3pCLGlFQUFPQTtRQUN6QmdELE1BQU12QixXQUFXMUIsaUVBQU9BO0lBQzFCO0lBQ0FtRCxZQUFZO1FBQ1ZDLFVBQVUxQixXQUFXTCxpRUFBT0E7UUFDNUJnQyxTQUFTM0IsV0FBV04saUVBQU9BO0lBQzdCO0lBQ0FrQyxnQkFBZ0I7UUFDZHBCLFNBQVNSLFdBQVdQLGlFQUFPQTtJQUM3QjtJQUNBb0MsTUFBTTtRQUNKQyxlQUFlOUIsV0FBV1IsZ0VBQU1BO1FBQ2hDdUMsV0FBVy9CLFdBQVdULGlFQUFPQTtRQUM3QnlDLFlBQVloQyxXQUFXVixpRUFBT0E7UUFDOUIyQyxPQUFPakMsV0FBV1gsaUVBQU9BO1FBQ3pCNkMsVUFBVWxDLFdBQVdaLGlFQUFPQTtRQUM1QitDLFVBQVVuQyxXQUFXOUIsaUVBQU9BO1FBQzVCa0UsVUFBVXBDLFdBQVdiLGlFQUFPQTtRQUM1QmtELFVBQVVyQyxXQUFXZCxpRUFBT0E7UUFDNUJvRCxjQUFjdEMsV0FBV3ZCLGtFQUFRQTtRQUNqQzhELGdCQUFnQnZDLFdBQVd4QixrRUFBUUE7UUFDbkNnRSxTQUFTeEMsV0FBVy9CLGlFQUFPQTtRQUMzQndFLFdBQVd6QyxXQUFXaEMsaUVBQU9BO1FBQzdCMEUsV0FBVzFDLFdBQVdmLGlFQUFPQTtRQUM3QjBELGFBQWEzQyxXQUFXaEIsZ0VBQU1BO1FBQzlCNEQsWUFBWTVDLFdBQVdmLGlFQUFPQTtRQUM5QjRELGNBQWM3QyxXQUFXaEIsZ0VBQU1BO1FBQy9COEQsV0FBVzlDLFdBQVdqQixpRUFBT0E7UUFDN0JnRSxhQUFhL0MsV0FBV2xCLGlFQUFPQTtRQUMvQmtFLFlBQVloRCxXQUFXbkIsaUVBQU9BO0lBQ2hDO0lBQ0FvRSxpQkFBaUI7UUFDZnRDLE1BQU1YLFdBQVdwQixpRUFBT0E7UUFDeEJnQyxPQUFPWixXQUFXckIsaUVBQU9BO1FBQ3pCb0MsTUFBTWYsV0FBV3RCLGlFQUFPQTtRQUN4QndFLFVBQVVsRCxXQUFXdkIsa0VBQVFBO1FBQzdCMEUsWUFBWW5ELFdBQVd4QixrRUFBUUE7UUFDL0I0RSxpQkFBaUJwRCxXQUFXekIsaUVBQU9BO1FBQ25DOEUsZ0JBQWdCckQsV0FBVzFCLGlFQUFPQTtRQUNsQ2dGLFVBQVV0RCxXQUFXM0IsaUVBQU9BO1FBQzVCa0YsU0FBU3ZELFdBQVc1QixpRUFBT0E7UUFDM0JvRixZQUFZeEQsV0FBVzdCLGlFQUFPQTtRQUM5QnNGLGFBQWF6RCxXQUFXOUIsaUVBQU9BO1FBQy9Cd0YsYUFBYTFELFdBQVcvQixpRUFBT0E7UUFDL0IwRixjQUFjM0QsV0FBV2hDLGlFQUFPQTtJQUNsQztBQUNGO0FBRThCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGxvcmRyXFxEb3dubG9hZHNcXEFuaVRlYW1zLW1haW5cXG5vZGVfbW9kdWxlc1xcQHZpZHN0YWNrXFxyZWFjdFxcZGV2XFxwbGF5ZXJcXHZpZHN0YWNrLWRlZmF1bHQtaWNvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCJcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSWNvbiQzNCwgSWNvbiQzNSwgSWNvbiQyNywgSWNvbiQyNiwgSWNvbiQ2MCwgSWNvbiQ2MSwgSWNvbiQzOSwgSWNvbiQ0MCwgSWNvbiQxMDUsIEljb24kMTA0LCBJY29uJDU0LCBJY29uJDU5LCBJY29uJDYyLCBJY29uJDE5LCBJY29uJDU2LCBJY29uJDMzLCBJY29uJDgsIEljb24kMTMsIEljb24kODgsIEljb24kNjMsIEljb24kMTYsIEljb24kNTMsIEljb24kMjIsIEljb24kMTEsIEljb24kMCwgSWNvbiQzMSwgSWNvbiQ4MSwgSWNvbiQ3NywgSWNvbiQ3NCwgSWNvbiQyNCwgSWNvbiQ1IH0gZnJvbSAnLi4vY2h1bmtzL3ZpZHN0YWNrLURfYldkNjZoLmpzJztcbmltcG9ydCB7IEljb24gfSBmcm9tICcuLi9jaHVua3Mvdmlkc3RhY2stQ0JGN2lVcXUuanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVJY29uKHBhdGhzKSB7XG4gIGZ1bmN0aW9uIERlZmF1bHRMYXlvdXRJY29uKHByb3BzKSB7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIHsgcGF0aHMsIC4uLnByb3BzIH0pO1xuICB9XG4gIERlZmF1bHRMYXlvdXRJY29uLmRpc3BsYXlOYW1lID0gXCJEZWZhdWx0TGF5b3V0SWNvblwiO1xuICByZXR1cm4gRGVmYXVsdExheW91dEljb247XG59XG5jb25zdCBkZWZhdWx0TGF5b3V0SWNvbnMgPSB7XG4gIEFpclBsYXlCdXR0b246IHtcbiAgICBEZWZhdWx0OiBjcmVhdGVJY29uKEljb24kNSlcbiAgfSxcbiAgR29vZ2xlQ2FzdEJ1dHRvbjoge1xuICAgIERlZmF1bHQ6IGNyZWF0ZUljb24oSWNvbiQyNClcbiAgfSxcbiAgUGxheUJ1dHRvbjoge1xuICAgIFBsYXk6IGNyZWF0ZUljb24oSWNvbiQ2MiksXG4gICAgUGF1c2U6IGNyZWF0ZUljb24oSWNvbiQ1OSksXG4gICAgUmVwbGF5OiBjcmVhdGVJY29uKEljb24kNzQpXG4gIH0sXG4gIE11dGVCdXR0b246IHtcbiAgICBNdXRlOiBjcmVhdGVJY29uKEljb24kNTQpLFxuICAgIFZvbHVtZUxvdzogY3JlYXRlSWNvbihJY29uJDEwNSksXG4gICAgVm9sdW1lSGlnaDogY3JlYXRlSWNvbihJY29uJDEwNClcbiAgfSxcbiAgQ2FwdGlvbkJ1dHRvbjoge1xuICAgIE9uOiBjcmVhdGVJY29uKEljb24kMjYpLFxuICAgIE9mZjogY3JlYXRlSWNvbihJY29uJDI3KVxuICB9LFxuICBQSVBCdXR0b246IHtcbiAgICBFbnRlcjogY3JlYXRlSWNvbihJY29uJDYxKSxcbiAgICBFeGl0OiBjcmVhdGVJY29uKEljb24kNjApXG4gIH0sXG4gIEZ1bGxzY3JlZW5CdXR0b246IHtcbiAgICBFbnRlcjogY3JlYXRlSWNvbihJY29uJDQwKSxcbiAgICBFeGl0OiBjcmVhdGVJY29uKEljb24kMzkpXG4gIH0sXG4gIFNlZWtCdXR0b246IHtcbiAgICBCYWNrd2FyZDogY3JlYXRlSWNvbihJY29uJDc3KSxcbiAgICBGb3J3YXJkOiBjcmVhdGVJY29uKEljb24kODEpXG4gIH0sXG4gIERvd25sb2FkQnV0dG9uOiB7XG4gICAgRGVmYXVsdDogY3JlYXRlSWNvbihJY29uJDMxKVxuICB9LFxuICBNZW51OiB7XG4gICAgQWNjZXNzaWJpbGl0eTogY3JlYXRlSWNvbihJY29uJDApLFxuICAgIEFycm93TGVmdDogY3JlYXRlSWNvbihJY29uJDExKSxcbiAgICBBcnJvd1JpZ2h0OiBjcmVhdGVJY29uKEljb24kMjIpLFxuICAgIEF1ZGlvOiBjcmVhdGVJY29uKEljb24kNTMpLFxuICAgIENoYXB0ZXJzOiBjcmVhdGVJY29uKEljb24kMTYpLFxuICAgIENhcHRpb25zOiBjcmVhdGVJY29uKEljb24kMjcpLFxuICAgIFBsYXliYWNrOiBjcmVhdGVJY29uKEljb24kNjMpLFxuICAgIFNldHRpbmdzOiBjcmVhdGVJY29uKEljb24kODgpLFxuICAgIEF1ZGlvQm9vc3RVcDogY3JlYXRlSWNvbihJY29uJDEwNCksXG4gICAgQXVkaW9Cb29zdERvd246IGNyZWF0ZUljb24oSWNvbiQxMDUpLFxuICAgIFNwZWVkVXA6IGNyZWF0ZUljb24oSWNvbiQzNSksXG4gICAgU3BlZWREb3duOiBjcmVhdGVJY29uKEljb24kMzQpLFxuICAgIFF1YWxpdHlVcDogY3JlYXRlSWNvbihJY29uJDEzKSxcbiAgICBRdWFsaXR5RG93bjogY3JlYXRlSWNvbihJY29uJDgpLFxuICAgIEZvbnRTaXplVXA6IGNyZWF0ZUljb24oSWNvbiQxMyksXG4gICAgRm9udFNpemVEb3duOiBjcmVhdGVJY29uKEljb24kOCksXG4gICAgT3BhY2l0eVVwOiBjcmVhdGVJY29uKEljb24kMzMpLFxuICAgIE9wYWNpdHlEb3duOiBjcmVhdGVJY29uKEljb24kNTYpLFxuICAgIFJhZGlvQ2hlY2s6IGNyZWF0ZUljb24oSWNvbiQxOSlcbiAgfSxcbiAgS2V5Ym9hcmREaXNwbGF5OiB7XG4gICAgUGxheTogY3JlYXRlSWNvbihJY29uJDYyKSxcbiAgICBQYXVzZTogY3JlYXRlSWNvbihJY29uJDU5KSxcbiAgICBNdXRlOiBjcmVhdGVJY29uKEljb24kNTQpLFxuICAgIFZvbHVtZVVwOiBjcmVhdGVJY29uKEljb24kMTA0KSxcbiAgICBWb2x1bWVEb3duOiBjcmVhdGVJY29uKEljb24kMTA1KSxcbiAgICBFbnRlckZ1bGxzY3JlZW46IGNyZWF0ZUljb24oSWNvbiQ0MCksXG4gICAgRXhpdEZ1bGxzY3JlZW46IGNyZWF0ZUljb24oSWNvbiQzOSksXG4gICAgRW50ZXJQaVA6IGNyZWF0ZUljb24oSWNvbiQ2MSksXG4gICAgRXhpdFBpUDogY3JlYXRlSWNvbihJY29uJDYwKSxcbiAgICBDYXB0aW9uc09uOiBjcmVhdGVJY29uKEljb24kMjYpLFxuICAgIENhcHRpb25zT2ZmOiBjcmVhdGVJY29uKEljb24kMjcpLFxuICAgIFNlZWtGb3J3YXJkOiBjcmVhdGVJY29uKEljb24kMzUpLFxuICAgIFNlZWtCYWNrd2FyZDogY3JlYXRlSWNvbihJY29uJDM0KVxuICB9XG59O1xuXG5leHBvcnQgeyBkZWZhdWx0TGF5b3V0SWNvbnMgfTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsIkljb24kMzQiLCJJY29uJDM1IiwiSWNvbiQyNyIsIkljb24kMjYiLCJJY29uJDYwIiwiSWNvbiQ2MSIsIkljb24kMzkiLCJJY29uJDQwIiwiSWNvbiQxMDUiLCJJY29uJDEwNCIsIkljb24kNTQiLCJJY29uJDU5IiwiSWNvbiQ2MiIsIkljb24kMTkiLCJJY29uJDU2IiwiSWNvbiQzMyIsIkljb24kOCIsIkljb24kMTMiLCJJY29uJDg4IiwiSWNvbiQ2MyIsIkljb24kMTYiLCJJY29uJDUzIiwiSWNvbiQyMiIsIkljb24kMTEiLCJJY29uJDAiLCJJY29uJDMxIiwiSWNvbiQ4MSIsIkljb24kNzciLCJJY29uJDc0IiwiSWNvbiQyNCIsIkljb24kNSIsIkljb24iLCJjcmVhdGVJY29uIiwicGF0aHMiLCJEZWZhdWx0TGF5b3V0SWNvbiIsInByb3BzIiwiY3JlYXRlRWxlbWVudCIsImRpc3BsYXlOYW1lIiwiZGVmYXVsdExheW91dEljb25zIiwiQWlyUGxheUJ1dHRvbiIsIkRlZmF1bHQiLCJHb29nbGVDYXN0QnV0dG9uIiwiUGxheUJ1dHRvbiIsIlBsYXkiLCJQYXVzZSIsIlJlcGxheSIsIk11dGVCdXR0b24iLCJNdXRlIiwiVm9sdW1lTG93IiwiVm9sdW1lSGlnaCIsIkNhcHRpb25CdXR0b24iLCJPbiIsIk9mZiIsIlBJUEJ1dHRvbiIsIkVudGVyIiwiRXhpdCIsIkZ1bGxzY3JlZW5CdXR0b24iLCJTZWVrQnV0dG9uIiwiQmFja3dhcmQiLCJGb3J3YXJkIiwiRG93bmxvYWRCdXR0b24iLCJNZW51IiwiQWNjZXNzaWJpbGl0eSIsIkFycm93TGVmdCIsIkFycm93UmlnaHQiLCJBdWRpbyIsIkNoYXB0ZXJzIiwiQ2FwdGlvbnMiLCJQbGF5YmFjayIsIlNldHRpbmdzIiwiQXVkaW9Cb29zdFVwIiwiQXVkaW9Cb29zdERvd24iLCJTcGVlZFVwIiwiU3BlZWREb3duIiwiUXVhbGl0eVVwIiwiUXVhbGl0eURvd24iLCJGb250U2l6ZVVwIiwiRm9udFNpemVEb3duIiwiT3BhY2l0eVVwIiwiT3BhY2l0eURvd24iLCJSYWRpb0NoZWNrIiwiS2V5Ym9hcmREaXNwbGF5IiwiVm9sdW1lVXAiLCJWb2x1bWVEb3duIiwiRW50ZXJGdWxsc2NyZWVuIiwiRXhpdEZ1bGxzY3JlZW4iLCJFbnRlclBpUCIsIkV4aXRQaVAiLCJDYXB0aW9uc09uIiwiQ2FwdGlvbnNPZmYiLCJTZWVrRm9yd2FyZCIsIlNlZWtCYWNrd2FyZCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/player/vidstack-default-icons.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/dev/vidstack.js":
/*!******************************************************!*\
  !*** ./node_modules/@vidstack/react/dev/vidstack.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARIAKeyShortcuts: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.ARIAKeyShortcuts),\n/* harmony export */   AUDIO_EXTENSIONS: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.AUDIO_EXTENSIONS),\n/* harmony export */   AUDIO_TYPES: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.AUDIO_TYPES),\n/* harmony export */   AirPlayButton: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.AirPlayButton),\n/* harmony export */   AirPlayButtonInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.AirPlayButtonInstance),\n/* harmony export */   AudioGainSlider: () => (/* reexport safe */ _chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.audioGainSlider),\n/* harmony export */   AudioGainSliderInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.AudioGainSliderInstance),\n/* harmony export */   AudioProviderLoader: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.AudioProviderLoader),\n/* harmony export */   AudioTrackList: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.AudioTrackList),\n/* harmony export */   Caption: () => (/* binding */ caption),\n/* harmony export */   CaptionButton: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.CaptionButton),\n/* harmony export */   CaptionButtonInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.CaptionButtonInstance),\n/* harmony export */   Captions: () => (/* reexport safe */ _chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.Captions),\n/* harmony export */   CaptionsInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.CaptionsInstance),\n/* harmony export */   ChapterTitle: () => (/* reexport safe */ _chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.ChapterTitle),\n/* harmony export */   Controls: () => (/* reexport safe */ _chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.controls),\n/* harmony export */   ControlsGroupInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.ControlsGroupInstance),\n/* harmony export */   ControlsInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.ControlsInstance),\n/* harmony export */   DASHProviderLoader: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.DASHProviderLoader),\n/* harmony export */   DASH_VIDEO_EXTENSIONS: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.DASH_VIDEO_EXTENSIONS),\n/* harmony export */   DASH_VIDEO_TYPES: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.DASH_VIDEO_TYPES),\n/* harmony export */   DEFAULT_AUDIO_GAINS: () => (/* binding */ DEFAULT_AUDIO_GAINS),\n/* harmony export */   DEFAULT_PLAYBACK_RATES: () => (/* reexport safe */ _chunks_vidstack_CIHGgWPC_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_PLAYBACK_RATES),\n/* harmony export */   FullscreenButton: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.FullscreenButton),\n/* harmony export */   FullscreenButtonInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.FullscreenButtonInstance),\n/* harmony export */   FullscreenController: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.FullscreenController),\n/* harmony export */   Gesture: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.Gesture),\n/* harmony export */   GestureInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.GestureInstance),\n/* harmony export */   GoogleCastButton: () => (/* reexport safe */ _chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.GoogleCastButton),\n/* harmony export */   GoogleCastButtonInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.GoogleCastButtonInstance),\n/* harmony export */   HLSProviderLoader: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.HLSProviderLoader),\n/* harmony export */   HLS_VIDEO_EXTENSIONS: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.HLS_VIDEO_EXTENSIONS),\n/* harmony export */   HLS_VIDEO_TYPES: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.HLS_VIDEO_TYPES),\n/* harmony export */   Icon: () => (/* reexport safe */ _chunks_vidstack_CBF7iUqu_js__WEBPACK_IMPORTED_MODULE_7__.Icon),\n/* harmony export */   LibASSTextRenderer: () => (/* binding */ LibASSTextRenderer),\n/* harmony export */   List: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.List),\n/* harmony export */   LiveButton: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.LiveButton),\n/* harmony export */   LiveButtonInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.LiveButtonInstance),\n/* harmony export */   LocalMediaStorage: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.LocalMediaStorage),\n/* harmony export */   Logger: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.Logger),\n/* harmony export */   MEDIA_KEY_SHORTCUTS: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.MEDIA_KEY_SHORTCUTS),\n/* harmony export */   MediaAnnouncer: () => (/* reexport safe */ _chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.MediaAnnouncer),\n/* harmony export */   MediaAnnouncerInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.MediaAnnouncerInstance),\n/* harmony export */   MediaControls: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.MediaControls),\n/* harmony export */   MediaPlayer: () => (/* binding */ MediaPlayer),\n/* harmony export */   MediaPlayerInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.MediaPlayerInstance),\n/* harmony export */   MediaProvider: () => (/* binding */ MediaProvider),\n/* harmony export */   MediaProviderInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.MediaProviderInstance),\n/* harmony export */   MediaRemoteControl: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.MediaRemoteControl),\n/* harmony export */   Menu: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.menu),\n/* harmony export */   MenuButtonInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.MenuButtonInstance),\n/* harmony export */   MenuInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.MenuInstance),\n/* harmony export */   MenuItemInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.MenuItemInstance),\n/* harmony export */   MenuItemsInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.MenuItemsInstance),\n/* harmony export */   MenuPortalInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.MenuPortalInstance),\n/* harmony export */   MuteButton: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.MuteButton),\n/* harmony export */   MuteButtonInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.MuteButtonInstance),\n/* harmony export */   PIPButton: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.PIPButton),\n/* harmony export */   PIPButtonInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.PIPButtonInstance),\n/* harmony export */   PlayButton: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.PlayButton),\n/* harmony export */   PlayButtonInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.PlayButtonInstance),\n/* harmony export */   Poster: () => (/* binding */ Poster),\n/* harmony export */   PosterInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.PosterInstance),\n/* harmony export */   QualitySlider: () => (/* reexport safe */ _chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.qualitySlider),\n/* harmony export */   QualitySliderInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.QualitySliderInstance),\n/* harmony export */   RadioGroup: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.radioGroup),\n/* harmony export */   RadioGroupInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.RadioGroupInstance),\n/* harmony export */   RadioInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.RadioInstance),\n/* harmony export */   ScreenOrientationController: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.ScreenOrientationController),\n/* harmony export */   SeekButton: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.SeekButton),\n/* harmony export */   SeekButtonInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.SeekButtonInstance),\n/* harmony export */   Slider: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.slider),\n/* harmony export */   SliderChaptersInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.SliderChaptersInstance),\n/* harmony export */   SliderInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.SliderInstance),\n/* harmony export */   SliderPreviewInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.SliderPreviewInstance),\n/* harmony export */   SliderThumbnailInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.SliderThumbnailInstance),\n/* harmony export */   SliderValueInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.SliderValueInstance),\n/* harmony export */   SliderVideoInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.SliderVideoInstance),\n/* harmony export */   SpeedSlider: () => (/* reexport safe */ _chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.speedSlider),\n/* harmony export */   SpeedSliderInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.SpeedSliderInstance),\n/* harmony export */   Spinner: () => (/* reexport safe */ _chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.spinner),\n/* harmony export */   TextRenderers: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.TextRenderers),\n/* harmony export */   TextTrack: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.TextTrack),\n/* harmony export */   TextTrackList: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.TextTrackList),\n/* harmony export */   Thumbnail: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.thumbnail),\n/* harmony export */   ThumbnailInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.ThumbnailInstance),\n/* harmony export */   Time: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.Time),\n/* harmony export */   TimeInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.TimeInstance),\n/* harmony export */   TimeRange: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.TimeRange),\n/* harmony export */   TimeSlider: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.timeSlider),\n/* harmony export */   TimeSliderInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.TimeSliderInstance),\n/* harmony export */   Title: () => (/* reexport safe */ _chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.Title),\n/* harmony export */   ToggleButton: () => (/* binding */ ToggleButton),\n/* harmony export */   ToggleButtonInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.ToggleButtonInstance),\n/* harmony export */   Tooltip: () => (/* reexport safe */ _chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.tooltip),\n/* harmony export */   TooltipContentInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.TooltipContentInstance),\n/* harmony export */   TooltipInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.TooltipInstance),\n/* harmony export */   TooltipTriggerInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.TooltipTriggerInstance),\n/* harmony export */   Track: () => (/* binding */ Track),\n/* harmony export */   VIDEO_EXTENSIONS: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.VIDEO_EXTENSIONS),\n/* harmony export */   VIDEO_TYPES: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.VIDEO_TYPES),\n/* harmony export */   VideoProviderLoader: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.VideoProviderLoader),\n/* harmony export */   VideoQualityList: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.VideoQualityList),\n/* harmony export */   VimeoProviderLoader: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.VimeoProviderLoader),\n/* harmony export */   VolumeSlider: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.volumeSlider),\n/* harmony export */   VolumeSliderInstance: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.VolumeSliderInstance),\n/* harmony export */   YouTubeProviderLoader: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.YouTubeProviderLoader),\n/* harmony export */   appendTriggerEvent: () => (/* reexport safe */ _chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.appendTriggerEvent),\n/* harmony export */   boundTime: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.boundTime),\n/* harmony export */   canChangeVolume: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.canChangeVolume),\n/* harmony export */   canFullscreen: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.canFullscreen),\n/* harmony export */   canGoogleCastSrc: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.canGoogleCastSrc),\n/* harmony export */   canOrientScreen: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.canOrientScreen),\n/* harmony export */   canPlayHLSNatively: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.canPlayHLSNatively),\n/* harmony export */   canRotateScreen: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.canRotateScreen),\n/* harmony export */   canUsePictureInPicture: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.canUsePictureInPicture),\n/* harmony export */   canUseVideoPresentation: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.canUseVideoPresentation),\n/* harmony export */   createTextTrack: () => (/* binding */ createTextTrack),\n/* harmony export */   findActiveCue: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.findActiveCue),\n/* harmony export */   findTriggerEvent: () => (/* reexport safe */ _chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.findTriggerEvent),\n/* harmony export */   formatSpokenTime: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.formatSpokenTime),\n/* harmony export */   formatTime: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.formatTime),\n/* harmony export */   getDownloadFile: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.getDownloadFile),\n/* harmony export */   getTimeRangesEnd: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.getTimeRangesEnd),\n/* harmony export */   getTimeRangesStart: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.getTimeRangesStart),\n/* harmony export */   hasTriggerEvent: () => (/* reexport safe */ _chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.hasTriggerEvent),\n/* harmony export */   isAudioProvider: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isAudioProvider),\n/* harmony export */   isAudioSrc: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isAudioSrc),\n/* harmony export */   isCueActive: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isCueActive),\n/* harmony export */   isDASHProvider: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isDASHProvider),\n/* harmony export */   isDASHSrc: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isDASHSrc),\n/* harmony export */   isGoogleCastProvider: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isGoogleCastProvider),\n/* harmony export */   isHLSProvider: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isHLSProvider),\n/* harmony export */   isHLSSrc: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isHLSSrc),\n/* harmony export */   isHTMLAudioElement: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLAudioElement),\n/* harmony export */   isHTMLIFrameElement: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLIFrameElement),\n/* harmony export */   isHTMLMediaElement: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLMediaElement),\n/* harmony export */   isHTMLVideoElement: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLVideoElement),\n/* harmony export */   isKeyboardClick: () => (/* reexport safe */ _chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.isKeyboardClick),\n/* harmony export */   isKeyboardEvent: () => (/* reexport safe */ _chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.isKeyboardEvent),\n/* harmony export */   isMediaStream: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isMediaStream),\n/* harmony export */   isPointerEvent: () => (/* reexport safe */ _chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.isPointerEvent),\n/* harmony export */   isTrackCaptionKind: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isTrackCaptionKind),\n/* harmony export */   isVideoProvider: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isVideoProvider),\n/* harmony export */   isVideoQualitySrc: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isVideoQualitySrc),\n/* harmony export */   isVideoSrc: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isVideoSrc),\n/* harmony export */   isVimeoProvider: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isVimeoProvider),\n/* harmony export */   isYouTubeProvider: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isYouTubeProvider),\n/* harmony export */   mediaContext: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.mediaContext),\n/* harmony export */   mediaState: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.mediaState),\n/* harmony export */   normalizeTimeIntervals: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.normalizeTimeIntervals),\n/* harmony export */   parseJSONCaptionsFile: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.parseJSONCaptionsFile),\n/* harmony export */   sliderState: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.sliderState),\n/* harmony export */   softResetMediaState: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.softResetMediaState),\n/* harmony export */   sortVideoQualities: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.sortVideoQualities),\n/* harmony export */   updateTimeIntervals: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.updateTimeIntervals),\n/* harmony export */   useActiveTextCues: () => (/* reexport safe */ _chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.useActiveTextCues),\n/* harmony export */   useActiveTextTrack: () => (/* reexport safe */ _chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.useActiveTextTrack),\n/* harmony export */   useActiveThumbnail: () => (/* binding */ useActiveThumbnail),\n/* harmony export */   useAudioGainOptions: () => (/* binding */ useAudioGainOptions),\n/* harmony export */   useAudioOptions: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.useAudioOptions),\n/* harmony export */   useCaptionOptions: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.useCaptionOptions),\n/* harmony export */   useChapterOptions: () => (/* reexport safe */ _chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.useChapterOptions),\n/* harmony export */   useChapterTitle: () => (/* reexport safe */ _chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.useChapterTitle),\n/* harmony export */   useMediaContext: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.useMediaContext),\n/* harmony export */   useMediaPlayer: () => (/* reexport safe */ _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.useMediaPlayer),\n/* harmony export */   useMediaProvider: () => (/* binding */ useMediaProvider),\n/* harmony export */   useMediaRemote: () => (/* reexport safe */ _chunks_vidstack_CIHGgWPC_js__WEBPACK_IMPORTED_MODULE_5__.useMediaRemote),\n/* harmony export */   useMediaState: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.useMediaState),\n/* harmony export */   useMediaStore: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.useMediaStore),\n/* harmony export */   usePlaybackRateOptions: () => (/* reexport safe */ _chunks_vidstack_CIHGgWPC_js__WEBPACK_IMPORTED_MODULE_5__.usePlaybackRateOptions),\n/* harmony export */   useSliderPreview: () => (/* binding */ useSliderPreview),\n/* harmony export */   useSliderState: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.useSliderState),\n/* harmony export */   useSliderStore: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.useSliderStore),\n/* harmony export */   useState: () => (/* binding */ useState),\n/* harmony export */   useStore: () => (/* binding */ useStore),\n/* harmony export */   useTextCues: () => (/* reexport safe */ _chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.useTextCues),\n/* harmony export */   useThumbnails: () => (/* binding */ useThumbnails),\n/* harmony export */   useVideoQualityOptions: () => (/* reexport safe */ _chunks_vidstack_CIHGgWPC_js__WEBPACK_IMPORTED_MODULE_5__.useVideoQualityOptions),\n/* harmony export */   walkTriggerEventChain: () => (/* reexport safe */ _chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.walkTriggerEventChain),\n/* harmony export */   watchActiveTextTrack: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.watchActiveTextTrack),\n/* harmony export */   watchCueTextChange: () => (/* reexport safe */ _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.watchCueTextChange)\n/* harmony export */ });\n/* harmony import */ var _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/vidstack-DUlCophs.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-DUlCophs.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunks/vidstack-D_bWd66h.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js\");\n/* harmony import */ var _chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunks/vidstack-GeL5yun1.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-GeL5yun1.js\");\n/* harmony import */ var _chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunks/vidstack--AIGOV5A.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack--AIGOV5A.js\");\n/* harmony import */ var _chunks_vidstack_CBF7iUqu_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./chunks/vidstack-CBF7iUqu.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CBF7iUqu.js\");\n/* harmony import */ var _chunks_vidstack_CIHGgWPC_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunks/vidstack-CIHGgWPC.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-CIHGgWPC.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* __next_internal_client_entry_do_not_use__ ARIAKeyShortcuts,AUDIO_EXTENSIONS,AUDIO_TYPES,AirPlayButtonInstance,AudioGainSliderInstance,AudioProviderLoader,AudioTrackList,CaptionButtonInstance,CaptionsInstance,ControlsGroupInstance,ControlsInstance,DASHProviderLoader,DASH_VIDEO_EXTENSIONS,DASH_VIDEO_TYPES,FullscreenButtonInstance,FullscreenController,GestureInstance,GoogleCastButtonInstance,HLSProviderLoader,HLS_VIDEO_EXTENSIONS,HLS_VIDEO_TYPES,List,LiveButtonInstance,LocalMediaStorage,Logger,MEDIA_KEY_SHORTCUTS,MediaAnnouncerInstance,MediaControls,MediaRemoteControl,MenuButtonInstance,MenuInstance,MenuItemInstance,MenuItemsInstance,MenuPortalInstance,MuteButtonInstance,PIPButtonInstance,PlayButtonInstance,QualitySliderInstance,RadioGroupInstance,RadioInstance,ScreenOrientationController,SeekButtonInstance,SliderChaptersInstance,SliderInstance,SliderPreviewInstance,SliderThumbnailInstance,SliderValueInstance,SliderVideoInstance,SpeedSliderInstance,TextRenderers,TextTrackList,ThumbnailInstance,TimeInstance,TimeRange,TimeSliderInstance,TooltipContentInstance,TooltipInstance,TooltipTriggerInstance,VIDEO_EXTENSIONS,VIDEO_TYPES,VideoProviderLoader,VideoQualityList,VimeoProviderLoader,VolumeSliderInstance,YouTubeProviderLoader,boundTime,canChangeVolume,canFullscreen,canGoogleCastSrc,canOrientScreen,canPlayHLSNatively,canRotateScreen,canUsePictureInPicture,canUseVideoPresentation,findActiveCue,formatSpokenTime,formatTime,getDownloadFile,getTimeRangesEnd,getTimeRangesStart,isAudioProvider,isAudioSrc,isCueActive,isDASHProvider,isDASHSrc,isGoogleCastProvider,isHLSProvider,isHLSSrc,isHTMLAudioElement,isHTMLIFrameElement,isHTMLMediaElement,isHTMLVideoElement,isMediaStream,isTrackCaptionKind,isVideoProvider,isVideoQualitySrc,isVideoSrc,isVimeoProvider,isYouTubeProvider,mediaContext,normalizeTimeIntervals,parseJSONCaptionsFile,sliderState,softResetMediaState,sortVideoQualities,updateTimeIntervals,useMediaStore,useSliderState,useSliderStore,watchActiveTextTrack,watchCueTextChange,appendTriggerEvent,findTriggerEvent,hasTriggerEvent,isKeyboardClick,isKeyboardEvent,isPointerEvent,walkTriggerEventChain,AudioGainSlider,Captions,ChapterTitle,Controls,GoogleCastButton,MediaAnnouncer,QualitySlider,SpeedSlider,Spinner,Title,Tooltip,useActiveTextCues,useActiveTextTrack,useChapterOptions,useChapterTitle,useTextCues,AirPlayButton,CaptionButton,FullscreenButton,Gesture,LiveButton,Menu,MuteButton,PIPButton,PlayButton,RadioGroup,SeekButton,Slider,Thumbnail,Time,TimeSlider,VolumeSlider,useAudioOptions,useCaptionOptions,useMediaPlayer,DEFAULT_PLAYBACK_RATES,useMediaRemote,usePlaybackRateOptions,useVideoQualityOptions,Caption,DEFAULT_AUDIO_GAINS,Icon,LibASSTextRenderer,MediaPlayer,MediaPlayerInstance,MediaProvider,MediaProviderInstance,Poster,PosterInstance,TextTrack,ToggleButton,ToggleButtonInstance,Track,createTextTrack,mediaState,useActiveThumbnail,useAudioGainOptions,useMediaContext,useMediaProvider,useMediaState,useSliderPreview,useState,useStore,useThumbnails auto */ \n\n\n\n\n\n\n\n\n\n\n\n\nclass LibASSTextRenderer {\n    constructor(loader, config){\n        this.priority = 1;\n        this.#instance = null;\n        this.#track = null;\n        this.#typeRE = /(ssa|ass)$/;\n        this.loader = loader;\n        this.config = config;\n    }\n    #instance;\n    #track;\n    #typeRE;\n    canRender(track, video) {\n        return !!video && !!track.src && ((0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.isString)(track.type) && this.#typeRE.test(track.type) || this.#typeRE.test(track.src));\n    }\n    attach(video) {\n        if (!video) return;\n        this.loader().then(async (mod)=>{\n            this.#instance = new mod.default({\n                ...this.config,\n                video,\n                subUrl: this.#track?.src || \"\"\n            });\n            new _chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.EventsController(this.#instance).add(\"ready\", ()=>{\n                const canvas = this.#instance?._canvas;\n                if (canvas) canvas.style.pointerEvents = \"none\";\n            }).add(\"error\", (event)=>{\n                if (!this.#track) return;\n                this.#track[_chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.TextTrackSymbol.readyState] = 3;\n                this.#track.dispatchEvent(new _chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.DOMEvent(\"error\", {\n                    trigger: event,\n                    detail: event.error\n                }));\n            });\n        });\n    }\n    changeTrack(track) {\n        if (!track || track.readyState === 3) {\n            this.#freeTrack();\n        } else if (this.#track !== track) {\n            this.#instance?.setTrackByUrl(track.src);\n            this.#track = track;\n        }\n    }\n    detach() {\n        this.#freeTrack();\n    }\n    #freeTrack() {\n        this.#instance?.freeTrack();\n        this.#track = null;\n    }\n}\nconst DEFAULT_AUDIO_GAINS = [\n    1,\n    1.25,\n    1.5,\n    1.75,\n    2,\n    2.5,\n    3,\n    4\n];\nclass AudioGainRadioGroup extends _chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.Component {\n    static{\n        this.props = {\n            normalLabel: \"Disabled\",\n            gains: DEFAULT_AUDIO_GAINS\n        };\n    }\n    #media;\n    #menu;\n    #controller;\n    get value() {\n        return this.#controller.value;\n    }\n    get disabled() {\n        const { gains } = this.$props, { canSetAudioGain } = this.#media.$state;\n        return !canSetAudioGain() || gains().length === 0;\n    }\n    constructor(){\n        super();\n        this.#controller = new _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.RadioGroupController();\n        this.#controller.onValueChange = this.#onValueChange.bind(this);\n    }\n    onSetup() {\n        this.#media = (0,_chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.useMediaContext)();\n        if ((0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.hasProvidedContext)(_chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.menuContext)) {\n            this.#menu = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useContext)(_chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.menuContext);\n        }\n    }\n    onConnect(el) {\n        (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.effect)(this.#watchValue.bind(this));\n        (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.effect)(this.#watchHintText.bind(this));\n        (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.effect)(this.#watchControllerDisabled.bind(this));\n    }\n    getOptions() {\n        const { gains, normalLabel } = this.$props;\n        return gains().map((gain)=>({\n                label: gain === 1 || gain === null ? normalLabel : String(gain * 100) + \"%\",\n                value: gain.toString()\n            }));\n    }\n    #watchValue() {\n        this.#controller.value = this.#getValue();\n    }\n    #watchHintText() {\n        const { normalLabel } = this.$props, { audioGain } = this.#media.$state, gain = audioGain();\n        this.#menu?.hint.set(gain === 1 || gain == null ? normalLabel() : String(gain * 100) + \"%\");\n    }\n    #watchControllerDisabled() {\n        this.#menu?.disable(this.disabled);\n    }\n    #getValue() {\n        const { audioGain } = this.#media.$state;\n        return audioGain()?.toString() ?? \"1\";\n    }\n    #onValueChange(value, trigger) {\n        if (this.disabled) return;\n        const gain = +value;\n        this.#media.remote.changeAudioGain(gain, trigger);\n        this.dispatch(\"change\", {\n            detail: gain,\n            trigger\n        });\n    }\n}\nconst audiogainradiogroup__proto = AudioGainRadioGroup.prototype;\n(0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.prop)(audiogainradiogroup__proto, \"value\");\n(0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.prop)(audiogainradiogroup__proto, \"disabled\");\n(0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.method)(audiogainradiogroup__proto, \"getOptions\");\nconst playerCallbacks = [\n    \"onAbort\",\n    \"onAudioTrackChange\",\n    \"onAudioTracksChange\",\n    \"onAutoPlay\",\n    \"onAutoPlayChange\",\n    \"onAutoPlayFail\",\n    \"onCanLoad\",\n    \"onCanPlay\",\n    \"onCanPlayThrough\",\n    \"onControlsChange\",\n    \"onDestroy\",\n    \"onDurationChange\",\n    \"onEmptied\",\n    \"onEnd\",\n    \"onEnded\",\n    \"onError\",\n    \"onFindMediaPlayer\",\n    \"onFullscreenChange\",\n    \"onFullscreenError\",\n    \"onLiveChange\",\n    \"onLiveEdgeChange\",\n    \"onLoadedData\",\n    \"onLoadedMetadata\",\n    \"onLoadStart\",\n    \"onLoopChange\",\n    \"onOrientationChange\",\n    \"onPause\",\n    \"onPictureInPictureChange\",\n    \"onPictureInPictureError\",\n    \"onPlay\",\n    \"onPlayFail\",\n    \"onPlaying\",\n    \"onPlaysInlineChange\",\n    \"onPosterChange\",\n    \"onProgress\",\n    \"onProviderChange\",\n    \"onProviderLoaderChange\",\n    \"onProviderSetup\",\n    \"onQualitiesChange\",\n    \"onQualityChange\",\n    \"onRateChange\",\n    \"onReplay\",\n    \"onSeeked\",\n    \"onSeeking\",\n    \"onSourceChange\",\n    \"onSourceChange\",\n    \"onStalled\",\n    \"onStarted\",\n    \"onStreamTypeChange\",\n    \"onSuspend\",\n    \"onTextTrackChange\",\n    \"onTextTracksChange\",\n    \"onTimeUpdate\",\n    \"onTitleChange\",\n    \"onVdsLog\",\n    \"onVideoPresentationChange\",\n    \"onVolumeChange\",\n    \"onWaiting\"\n];\nconst MediaPlayerBridge = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.MediaPlayerInstance, {\n    events: playerCallbacks,\n    eventsRegex: /^onHls/,\n    domEventsRegex: /^onMedia/\n});\nconst MediaPlayer = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ aspectRatio, children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(MediaPlayerBridge, {\n        ...props,\n        src: props.src,\n        ref: forwardRef,\n        style: {\n            aspectRatio,\n            ...props.style\n        }\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.Primitive.div, {\n            ...props2\n        }, children));\n});\nMediaPlayer.displayName = \"MediaPlayer\";\nconst MediaProviderBridge = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.MediaProviderInstance);\nconst MediaProvider = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ loaders = [], children, iframeProps, mediaProps, ...props }, forwardRef)=>{\n    const reactLoaders = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"MediaProvider.useMemo[reactLoaders]\": ()=>loaders.map({\n                \"MediaProvider.useMemo[reactLoaders]\": (Loader)=>new Loader()\n            }[\"MediaProvider.useMemo[reactLoaders]\"])\n    }[\"MediaProvider.useMemo[reactLoaders]\"], loaders);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(MediaProviderBridge, {\n        ...props,\n        loaders: reactLoaders,\n        ref: forwardRef\n    }, (props2, instance)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n            ...props2\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(MediaOutlet, {\n            provider: instance,\n            mediaProps,\n            iframeProps\n        }), children));\n});\nMediaProvider.displayName = \"MediaProvider\";\nfunction MediaOutlet({ provider, mediaProps, iframeProps }) {\n    const { sources, crossOrigin, poster, remotePlaybackInfo, nativeControls, viewType } = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useStateContext)(_chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.mediaState), { loader } = provider.$state, { $provider: $$provider, $providerSetup: $$providerSetup } = (0,_chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.useMediaContext)(), $sources = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(sources), $nativeControls = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(nativeControls), $crossOrigin = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(crossOrigin), $poster = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(poster), $loader = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(loader), $provider = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)($$provider), $providerSetup = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)($$providerSetup), $remoteInfo = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(remotePlaybackInfo), $mediaType = $loader?.mediaType(), $viewType = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(viewType), isAudioView = $viewType === \"audio\", isYouTubeEmbed = $loader?.name === \"youtube\", isVimeoEmbed = $loader?.name === \"vimeo\", isEmbed = isYouTubeEmbed || isVimeoEmbed, isRemotion = $loader?.name === \"remotion\", isGoogleCast = $loader?.name === \"google-cast\", [googleCastIconPaths, setGoogleCastIconPaths] = react__WEBPACK_IMPORTED_MODULE_1__.useState(\"\"), [hasMounted, setHasMounted] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"MediaOutlet.useEffect\": ()=>{\n            if (!isGoogleCast || googleCastIconPaths) return;\n            Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/vidstack-D_bWd66h.js */ \"(ssr)/./node_modules/@vidstack/react/dev/chunks/vidstack-D_bWd66h.js\")).then({\n                \"MediaOutlet.useEffect\": function(n) {\n                    return n.chromecast;\n                }\n            }[\"MediaOutlet.useEffect\"]).then({\n                \"MediaOutlet.useEffect\": (mod)=>{\n                    setGoogleCastIconPaths(mod.default);\n                }\n            }[\"MediaOutlet.useEffect\"]);\n        }\n    }[\"MediaOutlet.useEffect\"], [\n        isGoogleCast\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"MediaOutlet.useEffect\": ()=>{\n            setHasMounted(true);\n        }\n    }[\"MediaOutlet.useEffect\"], []);\n    if (isGoogleCast) {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n            className: \"vds-google-cast\",\n            ref: (el)=>{\n                provider.load(el);\n            }\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_chunks_vidstack_CBF7iUqu_js__WEBPACK_IMPORTED_MODULE_7__.Icon, {\n            paths: googleCastIconPaths\n        }), $remoteInfo?.deviceName ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n            className: \"vds-google-cast-info\"\n        }, \"Google Cast on\", \" \", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n            className: \"vds-google-cast-device-name\"\n        }, $remoteInfo.deviceName)) : null);\n    }\n    if (isRemotion) {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n            \"data-remotion-canvas\": true\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n            \"data-remotion-container\": true,\n            ref: (el)=>{\n                provider.load(el);\n            }\n        }, (0,_chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.isRemotionProvider)($provider) && $providerSetup ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement($provider.render) : null));\n    }\n    return isEmbed ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"iframe\", {\n        ...iframeProps,\n        className: (iframeProps?.className ? `${iframeProps.className} ` : \"\") + isYouTubeEmbed ? \"vds-youtube\" : \"vds-vimeo\",\n        suppressHydrationWarning: true,\n        tabIndex: !$nativeControls ? -1 : void 0,\n        \"aria-hidden\": \"true\",\n        \"data-no-controls\": !$nativeControls ? \"\" : void 0,\n        ref (el) {\n            provider.load(el);\n        }\n    }), !$nativeControls && !isAudioView ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"vds-blocker\"\n    }) : null) : $mediaType ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement($mediaType === \"audio\" ? \"audio\" : \"video\", {\n        ...mediaProps,\n        controls: $nativeControls ? true : null,\n        crossOrigin: typeof $crossOrigin === \"boolean\" ? \"\" : $crossOrigin,\n        poster: $mediaType === \"video\" && $nativeControls && $poster ? $poster : null,\n        suppressHydrationWarning: true,\n        children: !hasMounted ? $sources.map(({ src, type })=>(0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.isString)(src) ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"source\", {\n                src,\n                type: type !== \"?\" ? type : void 0,\n                key: src\n            }) : null) : null,\n        ref (el) {\n            provider.load(el);\n        }\n    }) : null;\n}\nMediaOutlet.displayName = \"MediaOutlet\";\nfunction createTextTrack(init) {\n    const media = (0,_chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.useMediaContext)(), track = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"createTextTrack.useMemo[track]\": ()=>new _chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.TextTrack(init)\n    }[\"createTextTrack.useMemo[track]\"], Object.values(init));\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"createTextTrack.useEffect\": ()=>{\n            media.textTracks.add(track);\n            return ({\n                \"createTextTrack.useEffect\": ()=>void media.textTracks.remove(track)\n            })[\"createTextTrack.useEffect\"];\n        }\n    }[\"createTextTrack.useEffect\"], [\n        track\n    ]);\n    return track;\n}\nfunction Track({ lang, ...props }) {\n    createTextTrack({\n        language: lang,\n        ...props\n    });\n    return null;\n}\nTrack.displayName = \"Track\";\nconst ToggleButtonBridge = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.ToggleButtonInstance);\nconst ToggleButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ToggleButtonBridge, {\n        ...props\n    }, (props2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.Primitive.button, {\n            ...props2,\n            ref: (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nToggleButton.displayName = \"ToggleButton\";\nconst PosterBridge = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.createReactComponent)(_chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.PosterInstance);\nconst Poster = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(PosterBridge, {\n        src: props.asChild && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.isValidElement(children) ? children.props.src : void 0,\n        ...props\n    }, (props2, instance)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(PosterImg, {\n            ...props2,\n            instance,\n            ref: (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(props2.ref, forwardRef)\n        }, children));\n});\nPoster.displayName = \"Poster\";\nconst PosterImg = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ instance, children, ...props }, forwardRef)=>{\n    const { src, img, alt, crossOrigin, hidden } = instance.$state, $src = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(src), $alt = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(alt), $crossOrigin = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(crossOrigin), $hidden = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(hidden);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.Primitive.img, {\n        ...props,\n        src: $src || void 0,\n        alt: $alt || void 0,\n        crossOrigin: $crossOrigin || void 0,\n        ref: (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.composeRefs)(img.set, forwardRef),\n        style: {\n            display: $hidden ? \"none\" : void 0\n        }\n    }, children);\n});\nPosterImg.displayName = \"PosterImg\";\nconst Root = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ children, ...props }, forwardRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.Primitive.div, {\n        translate: \"yes\",\n        \"aria-live\": \"off\",\n        \"aria-atomic\": \"true\",\n        ...props,\n        ref: forwardRef\n    }, children);\n});\nRoot.displayName = \"Caption\";\nconst Text = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardRef)=>{\n    const textTrack = (0,_chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.useMediaState)(\"textTrack\"), [activeCue, setActiveCue] = react__WEBPACK_IMPORTED_MODULE_1__.useState();\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"Text.useEffect\": ()=>{\n            if (!textTrack) return;\n            function onCueChange() {\n                setActiveCue(textTrack?.activeCues[0]);\n            }\n            textTrack.addEventListener(\"cue-change\", onCueChange);\n            return ({\n                \"Text.useEffect\": ()=>{\n                    textTrack.removeEventListener(\"cue-change\", onCueChange);\n                    setActiveCue(void 0);\n                }\n            })[\"Text.useEffect\"];\n        }\n    }[\"Text.useEffect\"], [\n        textTrack\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.Primitive.span, {\n        ...props,\n        \"data-part\": \"cue\",\n        dangerouslySetInnerHTML: {\n            __html: activeCue?.text || \"\"\n        },\n        ref: forwardRef\n    });\n});\nText.displayName = \"CaptionText\";\nvar caption = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Root: Root,\n    Text: Text\n});\nfunction useState(ctor, prop, ref) {\n    const initialValue = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"useState.useMemo[initialValue]\": ()=>ctor.state.record[prop]\n    }[\"useState.useMemo[initialValue]\"], [\n        ctor,\n        prop\n    ]);\n    return (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(ref.current ? ref.current.$state[prop] : initialValue);\n}\nconst storesCache = /* @__PURE__ */ new Map();\nfunction useStore(ctor, ref) {\n    const initialStore = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"useStore.useMemo[initialStore]\": ()=>{\n            let store = storesCache.get(ctor);\n            if (!store) {\n                store = new Proxy(ctor.state.record, {\n                    get: {\n                        \"useStore.useMemo[initialStore]\": (_, prop)=>({\n                                \"useStore.useMemo[initialStore]\": ()=>ctor.state.record[prop]\n                            })[\"useStore.useMemo[initialStore]\"]\n                    }[\"useStore.useMemo[initialStore]\"]\n                });\n                storesCache.set(ctor, store);\n            }\n            return store;\n        }\n    }[\"useStore.useMemo[initialStore]\"], [\n        ctor\n    ]);\n    return (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignalRecord)(ref.current ? ref.current.$state : initialStore);\n}\nfunction useMediaProvider() {\n    const [provider, setProvider] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null), context = (0,_chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.useMediaContext)();\n    if (!context) {\n        throw Error(\"[vidstack] no media context was found - was this called outside of `<MediaPlayer>`?\");\n    }\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useMediaProvider.useEffect\": ()=>{\n            if (!context) return;\n            return (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.effect)({\n                \"useMediaProvider.useEffect\": ()=>{\n                    setProvider(context.$provider());\n                }\n            }[\"useMediaProvider.useEffect\"]);\n        }\n    }[\"useMediaProvider.useEffect\"], []);\n    return provider;\n}\nfunction useThumbnails(src, crossOrigin = null) {\n    const scope = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useReactScope)(), $src = (0,_chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.createSignal)(src), $crossOrigin = (0,_chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.createSignal)(crossOrigin), loader = (0,_chunks_vidstack_GeL5yun1_js__WEBPACK_IMPORTED_MODULE_3__.useScoped)({\n        \"useThumbnails.useScoped[loader]\": ()=>_chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.ThumbnailsLoader.create($src, $crossOrigin)\n    }[\"useThumbnails.useScoped[loader]\"]);\n    if (!scope) {\n        console.warn(`[vidstack] \\`useThumbnails\\` must be called inside a child component of \\`<MediaPlayer>\\``);\n    }\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useThumbnails.useEffect\": ()=>{\n            $src.set(src);\n        }\n    }[\"useThumbnails.useEffect\"], [\n        src\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useThumbnails.useEffect\": ()=>{\n            $crossOrigin.set(crossOrigin);\n        }\n    }[\"useThumbnails.useEffect\"], [\n        crossOrigin\n    ]);\n    return (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(loader.$images);\n}\nfunction useActiveThumbnail(thumbnails, time) {\n    return react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"useActiveThumbnail.useMemo\": ()=>{\n            let activeIndex = -1;\n            for(let i = thumbnails.length - 1; i >= 0; i--){\n                const image = thumbnails[i];\n                if (time >= image.startTime && (!image.endTime || time < image.endTime)) {\n                    activeIndex = i;\n                    break;\n                }\n            }\n            return thumbnails[activeIndex] || null;\n        }\n    }[\"useActiveThumbnail.useMemo\"], [\n        thumbnails,\n        time\n    ]);\n}\nfunction useSliderPreview({ clamp = false, offset = 0, orientation = \"horizontal\" } = {}) {\n    const [rootRef, setRootRef] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null), [previewRef, setPreviewRef] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null), [pointerValue, setPointerValue] = react__WEBPACK_IMPORTED_MODULE_1__.useState(0), [isVisible, setIsVisible] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useSliderPreview.useEffect\": ()=>{\n            if (!rootRef) return;\n            const dragging = (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.signal)(false);\n            function updatePointerValue(event) {\n                if (!rootRef) return;\n                setPointerValue(getPointerValue(rootRef, event, orientation));\n            }\n            return (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.effect)({\n                \"useSliderPreview.useEffect\": ()=>{\n                    if (!dragging()) {\n                        new _chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.EventsController(rootRef).add(\"pointerenter\", {\n                            \"useSliderPreview.useEffect\": ()=>{\n                                setIsVisible(true);\n                                previewRef?.setAttribute(\"data-visible\", \"\");\n                            }\n                        }[\"useSliderPreview.useEffect\"]).add(\"pointerdown\", {\n                            \"useSliderPreview.useEffect\": (event)=>{\n                                dragging.set(true);\n                                updatePointerValue(event);\n                            }\n                        }[\"useSliderPreview.useEffect\"]).add(\"pointerleave\", {\n                            \"useSliderPreview.useEffect\": ()=>{\n                                setIsVisible(false);\n                                previewRef?.removeAttribute(\"data-visible\");\n                            }\n                        }[\"useSliderPreview.useEffect\"]).add(\"pointermove\", updatePointerValue);\n                    }\n                    previewRef?.setAttribute(\"data-dragging\", \"\");\n                    new _chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.EventsController(document).add(\"pointerup\", {\n                        \"useSliderPreview.useEffect\": (event)=>{\n                            dragging.set(false);\n                            previewRef?.removeAttribute(\"data-dragging\");\n                            updatePointerValue(event);\n                        }\n                    }[\"useSliderPreview.useEffect\"]).add(\"pointermove\", updatePointerValue).add(\"touchmove\", {\n                        \"useSliderPreview.useEffect\": (e)=>e.preventDefault()\n                    }[\"useSliderPreview.useEffect\"], {\n                        passive: false\n                    });\n                }\n            }[\"useSliderPreview.useEffect\"]);\n        }\n    }[\"useSliderPreview.useEffect\"], [\n        rootRef\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useSliderPreview.useEffect\": ()=>{\n            if (previewRef) {\n                previewRef.style.setProperty(\"--slider-pointer\", pointerValue + \"%\");\n            }\n        }\n    }[\"useSliderPreview.useEffect\"], [\n        previewRef,\n        pointerValue\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useSliderPreview.useEffect\": ()=>{\n            if (!previewRef) return;\n            const update = {\n                \"useSliderPreview.useEffect.update\": ()=>{\n                    (0,_chunks_vidstack_DUlCophs_js__WEBPACK_IMPORTED_MODULE_0__.updateSliderPreviewPlacement)(previewRef, {\n                        offset,\n                        clamp,\n                        orientation\n                    });\n                }\n            }[\"useSliderPreview.useEffect.update\"];\n            update();\n            const resize = new ResizeObserver(update);\n            resize.observe(previewRef);\n            return ({\n                \"useSliderPreview.useEffect\": ()=>resize.disconnect()\n            })[\"useSliderPreview.useEffect\"];\n        }\n    }[\"useSliderPreview.useEffect\"], [\n        previewRef,\n        clamp,\n        offset,\n        orientation\n    ]);\n    return {\n        previewRootRef: setRootRef,\n        previewRef: setPreviewRef,\n        previewValue: pointerValue,\n        isPreviewVisible: isVisible\n    };\n}\nfunction getPointerValue(root, event, orientation) {\n    let thumbPositionRate, rect = root.getBoundingClientRect();\n    if (orientation === \"vertical\") {\n        const { bottom: trackBottom, height: trackHeight } = rect;\n        thumbPositionRate = (trackBottom - event.clientY) / trackHeight;\n    } else {\n        const { left: trackLeft, width: trackWidth } = rect;\n        thumbPositionRate = (event.clientX - trackLeft) / trackWidth;\n    }\n    return round(Math.max(0, Math.min(100, 100 * thumbPositionRate)));\n}\nfunction round(num) {\n    return Number(num.toFixed(3));\n}\nfunction useAudioGainOptions({ gains = DEFAULT_AUDIO_GAINS, disabledLabel = \"disabled\" } = {}) {\n    const media = (0,_chunks_vidstack_AIGOV5A_js__WEBPACK_IMPORTED_MODULE_4__.useMediaContext)(), { audioGain, canSetAudioGain } = media.$state;\n    (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(audioGain);\n    (0,_chunks_vidstack_D_bWd66h_js__WEBPACK_IMPORTED_MODULE_2__.useSignal)(canSetAudioGain);\n    return react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"useAudioGainOptions.useMemo\": ()=>{\n            const options = gains.map({\n                \"useAudioGainOptions.useMemo.options\": (opt)=>{\n                    const label = typeof opt === \"number\" ? opt === 1 && disabledLabel ? disabledLabel : opt * 100 + \"%\" : opt.label, gain = typeof opt === \"number\" ? opt : opt.gain;\n                    return {\n                        label,\n                        value: gain.toString(),\n                        gain,\n                        get selected () {\n                            return audioGain() === gain;\n                        },\n                        select (trigger) {\n                            media.remote.changeAudioGain(gain, trigger);\n                        }\n                    };\n                }\n            }[\"useAudioGainOptions.useMemo.options\"]);\n            Object.defineProperty(options, \"disabled\", {\n                get () {\n                    return !canSetAudioGain() || !options.length;\n                }\n            });\n            Object.defineProperty(options, \"selectedValue\", {\n                get () {\n                    return audioGain()?.toString();\n                }\n            });\n            return options;\n        }\n    }[\"useAudioGainOptions.useMemo\"], [\n        gains\n    ]);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/dev/vidstack.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/player/styles/default/layouts/video.css":
/*!******************************************************************************!*\
  !*** ./node_modules/@vidstack/react/player/styles/default/layouts/video.css ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"29eb89cab38e\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L3BsYXllci9zdHlsZXMvZGVmYXVsdC9sYXlvdXRzL3ZpZGVvLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxsb3JkclxcRG93bmxvYWRzXFxBbmlUZWFtcy1tYWluXFxub2RlX21vZHVsZXNcXEB2aWRzdGFja1xccmVhY3RcXHBsYXllclxcc3R5bGVzXFxkZWZhdWx0XFxsYXlvdXRzXFx2aWRlby5jc3MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIyOWViODljYWIzOGVcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/player/styles/default/layouts/video.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vidstack/react/player/styles/default/theme.css":
/*!**********************************************************************!*\
  !*** ./node_modules/@vidstack/react/player/styles/default/theme.css ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"8859c3ca505c\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZpZHN0YWNrL3JlYWN0L3BsYXllci9zdHlsZXMvZGVmYXVsdC90aGVtZS5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbG9yZHJcXERvd25sb2Fkc1xcQW5pVGVhbXMtbWFpblxcbm9kZV9tb2R1bGVzXFxAdmlkc3RhY2tcXHJlYWN0XFxwbGF5ZXJcXHN0eWxlc1xcZGVmYXVsdFxcdGhlbWUuY3NzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiODg1OWMzY2E1MDVjXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vidstack/react/player/styles/default/theme.css\n");

/***/ })

};
;